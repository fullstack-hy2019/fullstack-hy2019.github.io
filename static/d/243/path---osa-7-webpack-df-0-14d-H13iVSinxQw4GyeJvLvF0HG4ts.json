{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<h2>Webpack</h2>\n<p>React on ollut jossain määrin kuuluisa siitä, että sovelluskehityksen edellyttämien työkalujen konfigurointi on ollut hyvin hankalaa. Kiitos <a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a>:in, sovelluskehitys Reactilla on kuitenkin nykyään tuskatonta, parempaa työskentelyflowta on tuskin ollut koskaan Javascriptillä tehtävässä selainpuolen sovelluskehityksessä.</p>\n<p>Emme voi kuitenkaan turvautua ikuisesti create-react-app:in magiaan ja nyt onkin aika selvittää mitä kaikkea taustalla on. Avainasemassa React-sovelluksen toimintakuntoon saattamisessa on <a href=\"https://webpack.js.org/\">webpack</a>-niminen työkalu.</p>\n<h3>bundlaus</h3>\n<p>Olemme toteuttaneet sovelluksia jakamalla koodin moduuleihin, joita on <em>importattu</em> niitä tarvitseviin paikkoihin. Vaikka ES6-moduulit ovatkin Javascript-standardissa määriteltyjä, ei mikään selain vielä osaa käsitellä moduuleihin jaettua koodia.</p>\n<p>Selainta varten moduuleissa oleva koodi <em>bundlataan</em>, eli siitä muodostetaan yksittäinen, kaiken koodin sisältävä tiedosto. Kun veimme Reactilla toteutetun frontendin tuotantoon osan 3 luvussa <a href=\"/osa3#frontendin-tuotantoversio\">Frontendin tuotantoversio</a>, suoritimme bundlauksen komennolla <em>npm run build</em>. Konepellin alla kyseinen npm-skripti suorittaa bundlauksen webpackia hyväksi käyttäen. Tuloksena on joukko hakemistoon <em>build</em> sijoitettavia tiedostoja:</p>\n<pre>\n├── asset-manifest.json\n├── favicon.ico\n├── index.html\n├── manifest.json\n├── service-worker.js\n└── static\n    ├── css\n    │   ├── main.1b1453df.css\n    │   └── main.1b1453df.css.map\n    └── js\n        ├── main.54f11b10.js\n        └── main.54f11b10.js.map\n</pre>\n<p>Hakemiston juuressa oleva sovelluksen \"päätiedosto\" <em>index.html</em> lataa <em>script</em>-tagin avulla bundlatun Javascript-tiedoston:</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n  &#x3C;head>\n    &#x3C;meta charset=\"utf-8\" />\n    &#x3C;title>React App&#x3C;/title>\n    &#x3C;link href=\"/static/css/main.1b1453df.css\" rel=\"stylesheet\" />\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;div id=\"root\">&#x3C;/div>\n    &#x3C;script type=\"text/javascript\" src=\"/static/js/main.54f11b10.js\">&#x3C;/script>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>Kuten esimerkistä näemme, create-react-app:illa tehdyssä sovelluksessa bundlataan Javascriptin lisäksi sovelluksen CSS-määrittelyt tiedostoon <em>static/css/main.1b1453df.css</em></p>\n<p>Käytännössä bundlaus tapahtuu siten, että sovelluksen Javascriptille määritellään alkupiste, usein tiedosto <em>index.js</em>, ja bundlauksen yhteydessä webpack ottaa mukaan kaiken koodin mitä alkupiste importtaa, sekä importattujen koodien importtaamat koodit, jne.</p>\n<p>Koska osa importeista on kirjastoja, kuten React, Redux ja Axios, bundlattuun javascript-tiedostoon tulee myös kaikkien näiden sisältö.</p>\n<blockquote>\n<p>Vanha tapa jakaa sovelluksen koodi moneen tiedostoon perustui siihen, että <em>index.html</em> latasi kaikki sovelluksen tarvitsemat erilliset Javascript-tiedostot script-tagien avulla. Tämä on kuitenkin tehotonta, sillä jokaisen tiedoston lataaminen aiheuttaa pienen overheadin ja nykyään pääosin suositaankin koodin bundlaamista yksittäiseksi tiedostoksi.</p>\n</blockquote>\n<p>Tehdään nyt React-projektille sopiva webpack-konfiguraatio kokonaan käsin.</p>\n<p>Luodaan projektia varten hakemisto ja sen sisälle seuraavat hakemistot (dist ja src) sekä tiedostot:</p>\n<pre>\n├── dist\n├── package.json\n├── src\n│   └── index.js\n└── webpack.config.js\n</pre>\n<p>Tiedoston <em>package.json</em> sisältö voi olla esim. seuraava:</p>\n<pre><code class=\"language-json\">{\n  \"name\": \"webpack-osa7\",\n  \"version\": \"0.0.1\",\n  \"description\": \"practising webpack\",\n  \"scripts\": {},\n  \"license\": \"MIT\"\n}\n</code></pre>\n<p>Asennetaan webpack komennolla</p>\n<pre><code class=\"language-bash\">npm install --save-dev webpack webpack-cli\n</code></pre>\n<p>Webpackin toiminta konfiguroidaan tiedostoon <em>webpack.config.js</em>, laitetaan sen alustavaksi sisällöksi seuraava</p>\n<pre><code class=\"language-bash\">const path = require('path')\n\nconst config = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'main.js'\n  }\n}\nmodule.exports = config\n</code></pre>\n<p>Määritellään sitten npm-skripti <em>build</em> jonka avulla bundlaus suoritetaan</p>\n<pre><code class=\"language-bash\">// ...\n\"scripts\": {\n  \"build\": \"webpack --mode=development\"\n},\n// ...\n</code></pre>\n<p>Lisätään hieman koodia tiedostoon <em>src/index.js</em>:</p>\n<pre><code class=\"language-js\">const hello = name => {\n  console.log(`hello ${name}`);\n};\n</code></pre>\n<p>Kun nyt suoritamme komennon <em>npm run build</em> webpack bundlaa koodin. Tuloksena on hakemistoon <em>dist</em> sijoitettava tiedosto <em>main.js</em>:</p>\n<picture><img src=\"/static/6433076ef5df206c63279b982704150f/14be6/1.png\" srcset=\"/static/6433076ef5df206c63279b982704150f/4cce7/1.png 200w,\n/static/6433076ef5df206c63279b982704150f/bae5f/1.png 400w,\n/static/6433076ef5df206c63279b982704150f/14be6/1.png 800w,\n/static/6433076ef5df206c63279b982704150f/16a28/1.png 1136w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Tiedostossa on paljon erikoisen näköistä tavaraa. Lopussa on mukana myös kirjoittamamme koodi.</p>\n<p>Lisätään hakemistoon <em>src</em> tiedosto <em>App.js</em> ja sille sisältö</p>\n<pre><code class=\"language-js\">const App = () => {\n  return null;\n};\n\nexport default App;\n</code></pre>\n<p>Importataan ja käytetään modulia <em>App</em> tiedostossa <em>index.js</em></p>\n<pre><code class=\"language-js\">import App from './App';\n\nconst hello = name => {\n  console.log(`hello ${name}`);\n};\n\nApp();\n</code></pre>\n<p>Kun nyt suoritamme bundlauksen komennolla <em>npm run build</em> huomaamme webpackin havainneen molemmat tiedostot:</p>\n<picture><img src=\"/static/21921fb9c9fb2d288aced172687b234f/14be6/2.png\" srcset=\"/static/21921fb9c9fb2d288aced172687b234f/4cce7/2.png 200w,\n/static/21921fb9c9fb2d288aced172687b234f/bae5f/2.png 400w,\n/static/21921fb9c9fb2d288aced172687b234f/14be6/2.png 800w,\n/static/21921fb9c9fb2d288aced172687b234f/0ab6d/2.png 1138w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Kirjoittamamme koodi löytyy melko kryptisesti muotoiltuna bundlen lopussa:</p>\n<pre><code class=\"language-js\">/***/ \"./src/App.js\":\n/*!********************!*\\\n  !*** ./src/App.js ***!\n  \\********************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\nconst App = () => {\\n  return null;\\n};\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (App);\\n\\n//# sourceURL=webpack:///./src/App.js?\");\n\n/***/ }),\n\n/***/ \"./src/index.js\":\n/*!**********************!*\\\n  !*** ./src/index.js ***!\n  \\**********************/\n/*! no exports provided */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _App__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./App */ \\\"./src/App.js\\\");\\n\\n\\nconst hello = name => {\\n  console.log(`hello ${name}`);\\n};\\n\\nObject(_App__WEBPACK_IMPORTED_MODULE_0__[\\\"default\\\"])();\\n\\n//# sourceURL=webpack:///./src/index.js?\");\n</code></pre>\n<h3>Konfiguraatiotiedosto</h3>\n<p>Katsotaan nyt tarkemmin konfiguraation <em>webpack.config.js</em> tämänhetkistä sisältöä:</p>\n<pre><code class=\"language-js\">const path = require('path');\n\nconst config = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'main.js',\n  },\n};\nmodule.exports = config;\n</code></pre>\n<p>Konfiguraatio on Javascriptia ja tapahtuu eksporttaamalla määrittelyt sisältävä olio Noden moduulisyntaksilla.</p>\n<p>Tämän hetkinen minimaalinen määrittely on aika ilmeinen, kenttä <a href=\"https://webpack.js.org/concepts/#entry\">entry</a> kertoo sen tiedoston, mistä bundlaus aloitetaan.</p>\n<p>Kenttä <a href=\"https://webpack.js.org/concepts/#output\">output</a> taas kertoo minne muodostettu bundle sijoitetaan. Kohdehakemisto täytyy määritellä <em>absoluuttisena polkuna</em>, se taas onnistuu helposti <a href=\"https://nodejs.org/docs/latest-v8.x/api/path.html#path_path_resolve_paths\">path.resolve</a>-metodilla. <a href=\"https://nodejs.org/docs/latest/api/globals.html#globals_dirname\">__dirname</a> on Noden globaali muuttuja, joka viittaa nykyiseen hakemistoon.</p>\n<h3>Webpack 4</h3>\n<p>Helmikuun viimeisten päivien aikana julkaistu Webpackin versio 4 on vähentänyt välttämättömän konfiguroinnin määrää määrittelemällä Webpackille joukon oletusarvoisia konfiguraatioita.</p>\n<p>Konfiguraatiossamme <em>entryllä</em> ja <em>outputilla</em> on niiden oletusarvo, eli voisimme myös jättää ne määrittelemättä, ja tiedoston <em>webpack.config.js</em> sisällöksi kävisi:</p>\n<pre><code class=\"language-js\">const config = {};\nmodule.exports = config;\n</code></pre>\n<p>Jätämme kuitenkin <em>entryn</em> ja <em>outputin</em> määrittelyt tiedostoon.</p>\n<h3>Reactin bundlaaminen</h3>\n<p>Muutetaan sitten sovellus minimalistiseksi React-sovellukseksi. Asennetaan tarvittavat kirjastot</p>\n<pre><code class=\"language-bash\">npm install --save react react-dom\n</code></pre>\n<p>Liitetään tavanomaiset loitsut tiedostoon <em>index.js</em></p>\n<pre><code class=\"language-js\">import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(&#x3C;App />, document.getElementById('root'));\n</code></pre>\n<p>ja muutetaan <em>App.js</em> muotoon</p>\n<pre><code class=\"language-react\">import React from 'react'\n\nconst App = () => (\n  &#x3C;div>hello webpack&#x3C;/div>\n)\n\nexport default App\n</code></pre>\n<p>Tarvitsemme sovellukselle myös \"pääsivuna\" toimivan tiedoston <em>dist/index.html</em> joka lataa <em>script</em>-tagin avulla bundlatun Javascriptin:</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n  &#x3C;head>\n    &#x3C;meta charset=\"utf-8\" />\n    &#x3C;title>React App&#x3C;/title>\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;div id=\"root\">&#x3C;/div>\n    &#x3C;script type=\"text/javascript\" src=\"./main.js\">&#x3C;/script>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>Kun bundlaamme sovelluksen, törmäämme kuitenkin ongelmaan</p>\n<picture><img src=\"/static/01bbf01876bbaa3d005ed18eb267d0b4/14be6/3.png\" srcset=\"/static/01bbf01876bbaa3d005ed18eb267d0b4/4cce7/3.png 200w,\n/static/01bbf01876bbaa3d005ed18eb267d0b4/bae5f/3.png 400w,\n/static/01bbf01876bbaa3d005ed18eb267d0b4/14be6/3.png 800w,\n/static/01bbf01876bbaa3d005ed18eb267d0b4/ea1cd/3.png 1130w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Loaderit</h3>\n<p>Webpack mainitsee että saatamme tarvita <em>loaderin</em> tiedoston <em>App.js</em> käsittelyyn. Webpack ymmärtää itse vain Javascriptia ja vaikka se saattaa meiltä matkan varrella olla unohtunutkin, käytämme Reactia ohjelmoidessamme <a href=\"https://facebook.github.io/jsx/\">JSX</a>:ää näkymien renderöintiin, eli esim. seuraava</p>\n<pre><code class=\"language-react\">const App = () => (\n  &#x3C;div>hello webpack&#x3C;/div>\n)\n</code></pre>\n<p>ei ole \"normaalia\" Javascriptia, vaan JSX:n tarjoama syntaktinen oikotie määritellä <em>div</em>-tagiä vastaava React-elementti.</p>\n<p><a href=\"https://webpack.js.org/concepts/loaders/\">Loaderien</a> avulla on mahdollista kertoa webpackille miten tiedostot tulee käsitellä ennen niiden bundlausta.</p>\n<p>Määritellään projektiimme Reactin käyttämän JSX:n normaaliksi Javascriptiksi muuntava loaderi:</p>\n<pre><code class=\"language-js\">const config = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'main.js',\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        query: {\n          presets: ['react'],\n        },\n      },\n    ],\n  },\n};\n</code></pre>\n<p>Loaderit määritellään kentän <em>module</em> alle sijoitettavaan taulukkoon <em>rules</em>.</p>\n<p>Yksittäisen loaderin määrittely on kolmiosainen:</p>\n<pre><code class=\"language-js\">{\n  test: /\\.js$/,\n  loader: 'babel-loader',\n  query: {\n    presets: ['react']\n  }\n}\n</code></pre>\n<p>Kenttä <em>test</em> määrittelee että käsitellään <em>.js</em>-päätteisiä tiedostoja, <em>loader</em> kertoo että käsittely tapahtuu <a href=\"https://github.com/babel/babel-loader\">babel-loader</a>:illa. Kenttä <em>query</em> taas antaa loaderille sen toimintaa ohjaavia parametreja.</p>\n<p>Asennetaan loader ja sen tarvitsemat kirjastot <em>kehitysaikaiseksi riippuvuudeksi</em>:</p>\n<pre><code class=\"language-bash\">npm install --save-dev babel-core babel-loader babel-preset-react\n</code></pre>\n<p>Nyt bundlaus onnistuu.</p>\n<p>Jos katsomme bundlattua koodia, huomaamme, että komponentti <em>App</em> on muuttunut muotoon</p>\n<pre><code class=\"language-js\">const App = () =>\n  react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\n    'div',\n    null,\n    'hello webpack'\n  );\n</code></pre>\n<p>Eli JSX-syntaksin sijaan komponentit luodaan pelkällä Javascriptilla käyttäen Reactin funktiota <a href=\"https://reactjs.org/docs/react-without-jsx.html\">createElement</a>.</p>\n<p>Sovellusta voi nyt kokeilla avaamalla tiedoston dist/index.html* selaimen _open file* -toiminnolla:</p>\n<picture><img src=\"/static/c186187dbead4d9f525df4955439913b/14be6/4.png\" srcset=\"/static/c186187dbead4d9f525df4955439913b/4cce7/4.png 200w,\n/static/c186187dbead4d9f525df4955439913b/bae5f/4.png 400w,\n/static/c186187dbead4d9f525df4955439913b/14be6/4.png 800w,\n/static/c186187dbead4d9f525df4955439913b/1b35a/4.png 1200w,\n/static/c186187dbead4d9f525df4955439913b/0b406/4.png 1388w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Tässä on jo melkein kaikki mitä tarvitsemme React-sovelluskehitykseen.</p>\n<h3>Transpilaus</h3>\n<p>Prosessista, joka muuttaa Javascriptia muodosta toiseen käytetään englanninkielistä termiä <a href=\"https://en.wiktionary.org/wiki/transpile\">transpiling</a>, joka taas on termi, joka viittaa koodin kääntämiseen (compile) sitä muuntamalla (transform). Suomenkielisen termin puuttuessa käytämme prosessista tällä kurssilla nimitystä <em>transpilaus</em>.</p>\n<p>Edellisen luvun konfiguraation avulla siis <em>transpiloimme</em> JSX:ää sisältävän Javascriptin normaaliksi Javascriptiksi tämän hetken johtavan työkalun <a href=\"https://babeljs.io/\">babelin</a> avulla.</p>\n<p>Kuten osassa 1 jo mainittiin, läheskään kaikki selaimet eivät vielä osaa Javascriptin uusimpien versioiden ES6:n ja ES7:n ominaisuuksia ja tämän takia koodi yleensä transpiloidaan käyttämään vanhempaa Javascript-syntaksia ES5:ttä.</p>\n<p>Babelin suorittama transpilointiprosessi määritellään <em>pluginien</em> avulla. Käytännössä useimmiten käytetään valmiita <a href=\"https://babeljs.io/docs/plugins/\">presetejä</a>, eli useamman sopivan pluginin joukkoja.</p>\n<p>Tällä hetkellä sovelluksemme transpiloinnissa käytetään presetiä <a href=\"https://babeljs.io/docs/plugins/preset-react/\">react</a>:</p>\n<pre><code class=\"language-js\">{\n  test: /\\.js$/,\n  loader: 'babel-loader',\n  query: {\n    presets: ['react']\n  }\n}\n</code></pre>\n<p>Otetaan käyttöön preset <a href=\"https://babeljs.io/docs/plugins/preset-env/\">env</a>, joka sisältää kaiken hyödyllisen, minkä avulla uusimman standardin mukainen koodi saadaan transpiloitua ES5-standardin mukaiseksi koodiksi:</p>\n<pre><code class=\"language-js\">{\n  test: /\\.js$/,\n  loader: 'babel-loader',\n  query: {\n    presets: ['env', 'react']\n  }\n}\n</code></pre>\n<p>Preset asennetaan komennolla</p>\n<pre><code class=\"language-js\">npm install babel-preset-env --save-dev\n</code></pre>\n<p>Kun nyt transpiloimme koodin, muuttuu se vanhan koulukunnan Javascriptiksi. Komponentin <em>App</em> määrittely näyttää seuraavalta:</p>\n<pre><code class=\"language-js\">var App = function App() {\n  return _react2.default.createElement('div', null, 'hello webpack');\n};\n</code></pre>\n<p>Muuttujan määrittely tapahtuu avainsanan <em>var</em> avulla, sillä ES5 ei tunne avainsanaa <em>const</em>. Myöskään nuolifunktiot eivät ole käytössä, joten funktiomäärittely käyttää avainsanaa <em>function</em>.</p>\n</div>","frontmatter":{"title":"osa 7","subTitle":"Webpack","path":"/osa7/webpack","mainImage":{"publicURL":"/static/osa7-1e053fee2ca6c82a8b0f28ad6d14ad45.png"},"partColor":"light-blue","part":7,"letter":"a"}}},"pageContext":{}}