{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Sovelluksen fronend toimii puhelinluettelon näyttämisen osalta päivitetyn palvelimen kanssa. Jotta luetteloon voitaisiin lisätä henkilöitä, tulee backendiin toteuttaa kirjaantuminen.</p>\n<h3>Käyttän kirjautuminen</h3>\n<p>Lisätään sovelluksen tilaan muuttuja <em>token</em> joka tallettaa tokenin siinä vaiheessa kun käyttäjä on kirjaantunut. Jos <em>token</em> ei ole määritelty, näytetään kirjautumisesta huoleviva komponentti <i>LoginForm</i>, joka saa parametriksi mutaation tekevän funktion <em>login</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">LOGIN</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token string\">`\nmutation login($username: String!, $password: String!) {\n  login(username: $username, password: $password)  {\n    value\n  }\n}\n`</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>token<span class=\"token punctuation\">,</span> setToken<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> login <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LOGIN</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">errorNotification</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> errorMessage <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>errorMessage<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token function\">errorNotification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>LoginForm\n          login<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>login<span class=\"token punctuation\">}</span>\n          setToken<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setToken</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          handleError<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleError<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Jos kirjautuminen onnistuu, eli funktio <em>login</em> ei heitä poikkeusta, talletetaan funktion palauttama <i>token</i> komponentin <i>App</i> tilaan. Token talletetaan myös <i>local storageen</i>, näin siihen on helpompi päästä käsiksi siinä vaiheessa kun haluamme asettaa tokenin <i>Authorization</i>-headeriin.</p>\n<p>Jos operaatio epäonnistuu, kutsutaan propsina saatua funktiota, joka asettaa komponentin <i>App</i> tilaan käyttäjälle näytettävän virheilmoituksen:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LoginForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">,</span> setUsername<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>password<span class=\"token punctuation\">,</span> setPassword<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> submit <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> props<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        variables<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">.</span>value\n\n      props<span class=\"token punctuation\">.</span><span class=\"token function\">setToken</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span>\n      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'library-user-token'</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      props<span class=\"token punctuation\">.</span><span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>submit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          username <span class=\"token operator\">&lt;</span>input\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          password <span class=\"token operator\">&lt;</span>input\n            type<span class=\"token operator\">=</span><span class=\"token string\">'password'</span>\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>password<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">'submit'</span><span class=\"token operator\">></span>login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> LoginForm</code></pre></div>\n<p>Lisätään sovellukselle myös nappi, jonka avulla kirjautunut käyttäjä voi kirjautua ulos. Napin klikkauskäsittelijässä asetetaan tilaan <em>token</em> null, poistetaan token local storagesta ja resetoidaan Apollo clientin välimuisti. Tämä on <a href=\"https://www.apollographql.com/docs/react/recipes/authentication.html#login-logout\">tärkeää</a>, sillä joissain välimustiin on saatettu hakea dataa, johon vain kirjaantuneella käyttäjällä on oikeus päästä käsiksi:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token function\">useApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setToken</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">resetStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sovelluksen tämän vaiheen koodi <a href=\"https://github.com/fullstack-hy2019/graphql-phonebook-frontend/tree/part8-6\">githubissa</a>, branchissa <i>part8-6</i>.</p>\n<h3>Tokenin lisääminen headeriin</h3>\n<p>Backendin muutosten jälkeen uusien henkilöiden lisäys puhelinluetteloon vaatii sen, että käyttäjän token lähetetään pyynnon mukana. Jotta saamme tokenin lähetettyä pyyntöjen mukana, joudumme hieman muuttamaan tapaa, jonka avulla määrittelemme <em>ApolloClient</em>-olion tiedostossa <i>index.js</i></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> ApolloClient <span class=\"token keyword\">from</span> <span class=\"token string\">'apollo-boost'</span></span><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApolloProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-apollo-hooks'</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  uri<span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://localhost:4000/graphql\"</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>ApolloProvider client<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>client<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ApolloProvider<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Määrittely käyttää apunaan <a href=\"https://github.com/apollographql/apollo-client/tree/master/packages/apollo-boost\">apollo-boost</a>-kirjastoa, joka dokumentaationsa mukaan</p>\n<blockquote>\n<p><i>Apollo Boost is a zero-config way to start using Apollo Client. It includes some sensible defaults, such as our recommended InMemoryCache and HttpLink, which come configured for you with our recommended settings.</i></p>\n</blockquote>\n<p>Eli apollo-boost tarjoaa helpon tavan konfiguroida <em>ApolloClient</em> useisiin tilanteisiin rittävillä oletusasetuksilla. </p>\n<p>Vaikka apollo-boostilla olisi myös mahdollista konfiguroida pyyntöihin asetettavat headerit, luovutaan nyt apollo-boostin käytöstä ja tehdään konfiguraatio kokonaan itse.</p>\n<p>Konfiguraatio on seuraavassa</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApolloClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'apollo-client'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createHttpLink <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'apollo-link-http'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> InMemoryCache <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'apollo-cache-inmemory'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> setContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'apollo-link-context'</span>\n\n<span class=\"token keyword\">const</span> httpLink <span class=\"token operator\">=</span> <span class=\"token function\">createHttpLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  uri<span class=\"token punctuation\">:</span> <span class=\"token string\">'http://localhost:4000/graphql'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> authLink <span class=\"token operator\">=</span> <span class=\"token function\">setContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> headers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'library-user-token'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>headers<span class=\"token punctuation\">,</span>\n      authorization<span class=\"token punctuation\">:</span> token <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token string\">`bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>token<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  link<span class=\"token punctuation\">:</span> authLink<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>httpLink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  cache<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InMemoryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Konfiguraatio edellyttää kahden kirjaston asentamista:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install <span class=\"token operator\">--</span>save apollo<span class=\"token operator\">-</span>link apollo<span class=\"token operator\">-</span>link<span class=\"token operator\">-</span>context</code></pre></div>\n<p><em>client</em> muodostetaan nyt kirjaston <a href=\"https://www.apollographql.com/docs/link/index.html\">apollo-link</a> tarjoaman konstruktorifunktion <a href=\"https://www.apollographql.com/docs/react/api/apollo-client.html#apollo-client\">ApolloClient</a>. Parametreja on kaksi, <em>link</em> ja <em>cache</em>. Näistä jälkimmäinen määrittelee, että sovelluksen käyttöön tulee keskusmuistissa toimiva välimuisti <a href=\"https://www.apollographql.com/docs/react/advanced/caching.html#smooth-scroll-top\">InMemoryCache</a>. </p>\n<p>Ensimmäinen parametri <em>link</em> määrittelee miten client ottaa yhteyttä palvelimeen, missä pohjalla on <a href=\"https://www.apollographql.com/docs/link/links/http.htm\">httpLink</a>, eli normaali HTTP:n yli tapahtuva yhteys, jota on höystetty siten että pyyntöjen mukaan <a href=\"https://www.apollographql.com/docs/react/recipes/authentication.html#Header\">asetetaan headerille</a> <i>authorization</i> arvoksi localStoragessa mahdollisesti oleva token.</p>\n<p>Uusien henkilöiden lisäys ja numeroiden muuttaminen toimii taas. Sovellukseen jää kuitenkin yksi ongelma, jos yritämme lisätä puhelinnumerotonta henkilöä se ei onnistu</p>\n<picture><img src=\"/static/23063ee32536e5cddaff2d6ceeca6954/14be6/25.png\" srcset=\"/static/23063ee32536e5cddaff2d6ceeca6954/4cce7/25.png 200w,\n/static/23063ee32536e5cddaff2d6ceeca6954/bae5f/25.png 400w,\n/static/23063ee32536e5cddaff2d6ceeca6954/14be6/25.png 800w,\n/static/23063ee32536e5cddaff2d6ceeca6954/1b35a/25.png 1200w,\n/static/23063ee32536e5cddaff2d6ceeca6954/9ee03/25.png 1600w,\n/static/23063ee32536e5cddaff2d6ceeca6954/d6bb9/25.png 1696w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Validointi epäonnistuu sillä fronend lähettää kentän <em>phone</em> arvona tyhjän merkkijonon. </p>\n<p>Muutetaan uuden henkilön luovaa funktiota siten, että se asettaa kentälle <em>phone</em>  arvon <em>null</em> jos käyttäjä ei ole syöttänyt kenttään mitään:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PersonForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> submit <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">await</span> props<span class=\"token punctuation\">.</span><span class=\"token function\">addPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> \n      variables<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> \n<span class=\"gatsby-highlight-code-line\">        name<span class=\"token punctuation\">,</span> street<span class=\"token punctuation\">,</span> city<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">        phone<span class=\"token punctuation\">:</span> phone<span class=\"token punctuation\">.</span>length<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">?</span> phone <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span></span>      <span class=\"token punctuation\">}</span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sovelluksen tämän vaiheen koodi <a href=\"https://github.com/fullstack-hy2019/graphql-phonebook-frontend/tree/part8-7\">githubissa</a>, branchissa <i>part8-7</i>.</p>\n<h3>Välimuistin päivitys revisited</h3>\n<p>Uusien henkilöiden lisäyksen yhteydessä on siis\n<a href=\"/osa8/react_ja_graph_ql#valimuistin-paivitys\">päivitettävä</a> Apollo clientin välimuisti. Päivitys tapahtuu määrittelemällä mutaation yhteydessä option <em>refetchQueries</em> avulla että kysely <em>ALL_PERSONS</em> on suoritettava uudelleen:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> addPerson <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CREATE_PERSON</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    onError<span class=\"token punctuation\">:</span> handleError<span class=\"token punctuation\">,</span>\n    refetchQueries<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> query<span class=\"token punctuation\">:</span> <span class=\"token constant\">ALL_PERSONS</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Lähestymistapa on kohtuullisen toimiva, ikävänä puolena on toki se, että päivityksen yhteydessä suoritetaan aina myös kysely. </p>\n<p>Ratkaisua on mahdollista optimoida hoitamalla välimuistin päivitys itse. Tämä tapahtuu määrittelemällä mutaatiolle sopiva <a href=\"https://www.apollographql.com/docs/react/advanced/caching.html#after-mutations\">update</a>-callback, jonka Apollo suorittaa mutaation päätteeksi: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> addPerson <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CREATE_PERSON</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    onError<span class=\"token punctuation\">:</span> handleError<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    update<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> dataInStore <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">readQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> query<span class=\"token punctuation\">:</span> <span class=\"token constant\">ALL_PERSONS</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      dataInStore<span class=\"token punctuation\">.</span>allPersons<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>addPerson<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      store<span class=\"token punctuation\">.</span><span class=\"token function\">writeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        query<span class=\"token punctuation\">:</span> <span class=\"token constant\">ALL_PERSONS</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">        data<span class=\"token punctuation\">:</span> dataInStore</span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span>  </code></pre></div>\n<p>Callback-funktio saa parametriksi viitten välimuistiin sekä mutaation mukana palautetun datan, eli esimerkkimme tapauksessa lisätyn käyttäjän.</p>\n<p>Koodi lukee funktion <a href=\"https://www.apollographql.com/docs/react/advanced/caching.html#readquery\">readQuery</a> avulla kyselyn <em>ALL_PERSONS</em> välimuitiin talletetun tilan ja päivittää välimuistin funktion <a href=\"https://www.apollographql.com/docs/react/advanced/caching.html#writequery-and-writefragment\">writeQuery</a> avulla lisäten henkilöiden joukkoon mutaation lisäämän henkilön.</p>\n<p>On myös olemassa tilanteita, joissa ainoa järkevä tapa saada välimuisti pidettyä ajantasaisena on <em>update</em>-callbackillä tehtävä päivitys. </p>\n<p>Tarvittaessa valimuisti on mahdollista kytkeä pois päältä joko koko sovelluksesta tai yksittäisiltä kyselyiltä määrittelemällä välimuistin käyttöä kontrolloivalle <a href=\"https://www.apollographql.com/docs/react/api/react-apollo.html#query-props\">fetchPolicy</a>:lle arvo <em>no-cache</em>. </p>\n<p>Voisimme määritellä, että yksittäisen henkilön osoitetietoja ei tallenneta välimuistiin:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Persons</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> result <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> show <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      query<span class=\"token punctuation\">:</span> <span class=\"token constant\">FIND_PERSON</span><span class=\"token punctuation\">,</span>\n      variables<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> nameToSearch<span class=\"token punctuation\">:</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">      fetchPolicy<span class=\"token punctuation\">:</span> <span class=\"token string\">'no-cache'</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setPerson</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>findPerson<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Jätämme kuitenkin koodin ennalleen. </p>\n<p>Välimuistin kanssa kannattaa olla tarkkana sillä oleva epäajantasainen data voi aiheuttaa vaikeasti havaittavissa olevia bugeja. Kuten tunnettua välimuistin ajantasalla pitäminen on erittäin haastavaa. Koodareiden joukossa kulkevan kansanviisauden mukaan </p>\n<blockquote>\n<p><i>There are only two hard things in Computer Science: cache invalidation and naming things.</i> Katso lisää <a href=\"https://www.google.com/search?q=two+hard+things+in+Computer+Science&#x26;oq=two+hard+things+in+Computer+Science\">täältä</a>.</p>\n</blockquote>\n<p>Sovelluksen tämän vaiheen koodi <a href=\"https://github.com/fullstack-hy2019/graphql-phonebook-frontend/tree/part8-8\">githubissa</a>, branchissa <i>part8-8</i>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Tehtäviä</h3>\n<h4>DEPRECATED: Genren kirjat</h4>\n<p>Laajenna sovellustasi siten, että kirjojen näkymästä voidaan rajata näytettävä kirjalista ainoastaan niihin jotka kuuluvat valittuun genreen. Toteutuksesi voi näyttää seuraavalta:</p>\n<picture><img src=\"/static/d3dec55ca886c6c68798485c6e634556/14be6/19.png\" srcset=\"/static/d3dec55ca886c6c68798485c6e634556/4cce7/19.png 200w,\n/static/d3dec55ca886c6c68798485c6e634556/bae5f/19.png 400w,\n/static/d3dec55ca886c6c68798485c6e634556/14be6/19.png 800w,\n/static/d3dec55ca886c6c68798485c6e634556/1b35a/19.png 1200w,\n/static/d3dec55ca886c6c68798485c6e634556/b4b8e/19.png 1380w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>DEPRECATED: Genren kirjat GraphQL:llä</h4>\n<p>Tietyn genren kirjoihin rajoittamisen voi tehdä kokonaan React-sovelluksen puolella. Voit merkitä tämän tehtävän, jos rajaat näytettävät kirjat tahtävässä 8.5 palvelimeen toteutetun suoran GraphQ-kyselyn avulla. </p>\n<p>Tämä tehtävä voi olla haastava ja niin kurssin tässä vaiheessa jo kuuluukin olla. Muutama vihje</p>\n<ul>\n<li>komponetin <i>Query</i> tai hookin <i>useQuery</i> käyttö kannattaa kirjalistan osalta sillä kysely on pystyttävä tekemään käyttäjän valitessa haluamansa genren</li>\n<li>GraphQL-kyselyjen tuloksia kannatta joskus tallentaan komponentin tilaan</li>\n<li>huomaa, että voit tehdä GraphQL-kyselyjä <i>useEffect</i>-hookissa</li>\n<li><i>useEffect</i>-hookin <a href=\"https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect\">toisesta parametrista</a> voi olla tehtävässä apua, se tosin riippuu käyttämästäsi lähestymistavasta.</li>\n</ul>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/part-8-1f98236965546b36c2a293574ec8b02a.svg"},"part":8,"letter":"d"}}},"pageContext":{"part":8,"letter":"d"}}