{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Jatketaan sovelluksen laajentamista siten, että se mahdollistaa uusien muistiinpanojen lisäämisen.</p>\n<p>Jotta saisimme sivun päivittymään uusien muistiinpanojen lisäyksen yhteydessä, on parasta sijoittaa muistiinpanot komponentin <code>App</code> tilaan. Eli importataan funktio <a href=\"https://reactjs.org/docs/hooks-state.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">useState</a> ja määritellään sen avulla komponentille tila joka saa aluksi arvokseen propsina välitettävän muistiinpanot alustavan taulukon: </p>\n<pre><code class=\"language-js\">import React, { useState } from 'react' // highlight-line\nimport Note from './components/Note'\n\nconst App = (props) => { // highlight-line\n  const [notes, setNotes] = useState(props.notes) // highlight-line\n\n  const rows = () => notes.map(note =>\n    &#x3C;Note\n      key={note.id}\n      note={note}\n    />\n  )\n\n  return (\n    &#x3C;div>\n      &#x3C;h1>Muistiinpanot&#x3C;/h1>\n      &#x3C;ul>\n        {rows()}\n      &#x3C;/ul>\n    &#x3C;/div>\n  )\n}\n\nexport default App\n</code></pre>\n<p>Komponentti siis alustaa funktion <code>useState</code> avulla tilan  <code>notes</code> arvoksi propseina välitettävän alustavan muistiinpanojen listan:</p>\n<pre><code class=\"language-js\">const App = (props) => { \n  const [notes, setNotes] = useState(props.notes) \n\n  // ...\n}\n</code></pre>\n<p>Jos haluaisimme lähteä liikkeelle tyhjästä muistiinpanojen listasta, annettaisiin tilan alkuarvoksi tyhjä taulukko, ja koska komponentti ei käyttäisi ollenkaan propseja, voitaisiin parametri <code>props</code> jättää kokonaan määrittelemättä:</p>\n<pre><code class=\"language-js\">const App = () => { \n  const [notes, setNotes] = useState([]) \n\n  // ...\n}  \n</code></pre>\n<p>Jätetään kuitenkin toistaiseksi tilalle alkuarvon asettava määrittely voimaan.</p>\n<p>Lisätään seuraavaksi komponenttiin lomake eli HTML <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">form</a> uuden muistiinpanon lisäämistä varten:</p>\n<pre><code class=\"language-js\">const App = (props) => {\n  const [notes, setNotes] = useState(props.notes) \n\n  const rows = () => // ...\n\n// highlight-start \n  const addNote = (event) => {\n    event.preventDefault()\n    console.log('nappia painettu', event.target)\n  }\n // highlight-end  \n\n  return (\n    &#x3C;div>\n      &#x3C;h1>Muistiinpanot&#x3C;/h1>\n      &#x3C;ul>\n        {rows()}\n      &#x3C;/ul>\n// highlight-start    \n      &#x3C;form onSubmit={addNote}>\n        &#x3C;input />\n        &#x3C;button type=\"submit\">tallenna&#x3C;/button>\n      &#x3C;/form>   \n// highlight-end       \n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>Lomakkeelle on lisätty myös tapahtumankäsittelijäksi metodi <em>funktio</em> reagoimaan sen \"lähettämiseen\", eli napin painamiseen.</p>\n<p>Tapahtumankäsittelijä on <a href=\"/osa1#tapahtumank%C3%A4sittely\">osasta 1</a> tuttuun tapaan määritelty seuraavasti:</p>\n<pre><code class=\"language-js\">const addNote = (event) => {\n  event.preventDefault()\n  console.log('nappia painettu', event.target)\n}\n</code></pre>\n<p>Parametrin <code>event</code> arvona on metodin kutsun aiheuttama <a href=\"https://reactjs.org/docs/handling-events.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tapahtuma</a>.</p>\n<p>Tapahtumankäsittelijä kutsuu heti tapahtuman metodia <code>event.preventDefault()</code> jolla se estää lomakkeen lähetyksen oletusarvoisen toiminnan, joka aiheuttaisi mm. sivun uudelleenlatautumisen.</p>\n<p>Tapahtuman kohde, eli <em>event.target</em> on tulostettu konsoliin</p>\n<p><img src=\"../images/2/6b.png\"></p>\n<p>Kohteena on siis komponentin määrittelemä lomake.</p>\n<p>Miten pääsemme käsiksi lomakkeen <code>input</code>-komponenttiin syötettyyn dataan?</p>\n<p>Tapoja on useampia, tutustumme ensin ns. <a href=\"https://reactjs.org/docs/forms.html#controlled-components\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">kontrolloituina komponentteina</a> toteutettuihin lomakkeisiin.</p>\n<p>Lisätään komonentille <code>App</code>tila <code>newNote</code> lomakkeen syötettä varten <strong>ja</strong> määritellään se <code>input</code>-komponentin attribuutin <code>value</code> arvoksi:</p>\n<pre><code class=\"language-js\">const App = (props) => {\n  const [notes, setNotes] = useState(props.notes) \n  const [newNote, setNewNote] = useState('uusi muistiinpano...') // highlight-line\n\n  // ...\n\n  return (\n    &#x3C;div>\n      &#x3C;h1>Muistiinpanot&#x3C;/h1>\n      &#x3C;ul>\n        {rows()}\n      &#x3C;/ul>\n      &#x3C;form onSubmit={addNote}>\n        &#x3C;input value={newNote} /> // highlight-line\n        &#x3C;button type=\"submit\">tallenna&#x3C;/button>\n      &#x3C;/form>      \n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>Tilaan <code>newNote</code> määritelty \"placeholder\"-teksti <em>uusi muistiinpano...</em> ilmestyy syötekomponenttiin, tekstiä ei kuitenkaan voi muuttaa. Konsoliin tuleekin ikävä varoitus joka kertoo mistä on kyse</p>\n<p><img src=\"../images/2/7b.png\"></p>\n<p>Koska määrittelimme syötekomponentille <code>value</code>-attribuutiksi komponentin <code>App</code> tilassa olevan muuttujan, alkaa <code>App</code> <a href=\"https://reactjs.org/docs/forms.html#controlled-components\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">kontrolloimaan</a> syötekomponentin toimintaa.</p>\n<p>Jotta kontrolloidun syötekomponentin editoiminen olisi mahdollista, täytyy sille rekisteröidä <em>tapahtumankäsittelijä</em>, joka synkronoi syötekenttään tehdyt muutokset komponentin <code>App</code> tilaan:</p>\n<pre><code class=\"language-js\">const App = (props) => {\n  const [notes, setNotes] = useState(props.notes) \n  const [newNote, setNewNote] = useState('uusi muistiinpano...')\n\n  // ...\n// highlight-start\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n// highlight-end\n\n  return (\n    &#x3C;div>\n      &#x3C;h1>Muistiinpanot&#x3C;/h1>\n      &#x3C;ul>\n        {rows()}\n      &#x3C;/ul>\n      &#x3C;form onSubmit={addNote}>\n        &#x3C;input\n          value={newNote}\n          onChange={handleNoteChange} // highlight-line\n        />\n        &#x3C;button type=\"submit\">tallenna&#x3C;/button>\n      &#x3C;/form>      \n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>Lomakkeen <code>input</code>-komponentille on nyt rekisteröity tapahtumankäsittelijä tilanteeseen <em>onChange</em>:</p>\n<pre><code class=\"language-js\">&#x3C;input\n  value={newNote}\n  onChange={handleNoteChange}\n/>\n</code></pre>\n<p>Tapahtumankäsittelijää kutsutaan <em>aina kun syötekomponentissa tapahtuu jotain</em>. Tapahtumankäsittelijämetodi saa parametriksi tapahtumaolion <code>event</code></p>\n<pre><code class=\"language-js\">const handleNoteChange = (event) => {\n  console.log(event.target.value)\n  setNewNote(event.target.value)\n}\n</code></pre>\n<p>Tapahtumaolion kenttä <code>target</code> vastaa nyt kontrolloitua <code>input</code>-kenttää ja <code>event.target.value</code> viittaa inputin syötekentän arvoon.</p>\n<p>Huomaa, että toisin kuin tapahtuman <em>onSubmit</em> käsittelijässä, nyt oletusarvoisen toiminnan estävää metodikutusua <em>event.preventDefault()</em> ei tarvita, sillä syötekentän muutoksella ei ole oletusarvoista toimintaa toisin kuin lomakkeen lähettämisellä.</p>\n<p>Voit seurata konsolista miten tapahtumankäsittelijää kutsutaan:</p>\n<p><img src=\"../images/2/8b.png\"></p>\n<p>Muistithan jo asentaa <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React devtoolsin</a>? Devtoolsista näet, miten tila muuttuu syötekenttään kirjoitettaessa:</p>\n<p><img src=\"../images/2/9b.png\"></p>\n<p>Nyt komponentin <code>App</code> tilan <code>newNote</code> heijastaa koko ajan syötekentän arvoa, joten voimme viimeistellä uuden muistiinpanon lisäämisestä huolehtivan metodin <code>addNote</code>:</p>\n<pre><code class=\"language-js\">const addNote = (event) => {\n  event.preventDefault()\n  const noteObject = {\n    content: newNote,\n    date: new Date().toISOString(),\n    important: Math.random() > 0.5,\n    id: notes.length + 1,\n  }\n\n  setNotes(notes.concat(noteObject))\n  setNewNote('')\n}\n</code></pre>\n<p>Ensin luodaan uutta muistiinpanoa vastaava olio <code>noteObject</code>, jonka sisältökentän arvo saadaan komponentin tilasta <code>newNote</code>. Yksikäsitteinen tunnus eli </ode>id</code> generoidaan kaikkien muistiinpanojen lukumäärän perusteella. Koska muistiinpanoja ei poisteta, menetelmä toimii sovelluksessamme. Komennon <code>Math.random()</code> avulla muistiinpanosta tulee 50% todennäköisyydellä tärkeä.</p>\n<p>Uusi muistiinpano lisätään vanhojen joukkoon oikeaoppisesti käyttämällä <a href=\"/osa1#taulukon-k%C3%A4sittely%C3%A4\">osasta 1</a> tuttua taulukon metodia <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">concat</a>:</p>\n<pre><code class=\"language-js\">setNotes(notes.concat(noteObject))\n</code></pre>\n<p>Metodi ei muuta alkuperäistä tilaa <code>notes</code> vaan luo uuden taulukon, joka sisältää myös lisättävän alkion. Tämä on tärkeää, sillä Reactin tilaa <a href=\"https://reactjs.org/docs/state-and-lifecycle.html#using-state-correctly\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ei saa muuttaa suoraan</a>!</p>\n<p>Tapahtumankäsittelijä tyhjentää myös syötekenttää kontrolloiva tila <code>newNote</code> sen tilaa muuttavalla funktiolla <code>setNewNote</code></p>\n<pre><code class=\"language-js\">setNewNote('')\n</code></pre>\n<p>Sovelluksen tämän hetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/fullstack-hy2019/part2-notes/tree/part2-2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">githubissa</a>, branchissä <em>part2-2</em>.</p>\n<h3>Näytettävien elementtien filtteröinti</h3>\n<p>Tehdään sovellukseen toiminto, joka mahdollistaa ainoastaan tärkeiden muistiinpanojen näyttämisen.</p>\n<p>Lisätään komponentin <code>App</code> tilaan tieto siitä näytetäänkö muistiinpanoista kaikki vai ainoastaan tärkeät:</p>\n<pre><code class=\"language-js\">const App = (props) => {\n  const [notes, setNotes] = useState(props.notes) \n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true) // highlight-line\n  \n  // ...\n}\n</code></pre>\n<p>Muutetaan komponenttia siten, että se tallettaa muuttujaan <code>notesToShow</code> näytettävien muistiinpanojen listan riippuen siitä tuleeko näyttää kaikki vai vain tärkeät:</p>\n<pre><code class=\"language-js\">const App = (props) => {\n  // ..\n\n// highlight-start\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n// highlight-end\n\n  const rows = () => notesToShow.map(note => // highlight-line\n    &#x3C;Note\n      key={note.id}\n      note={note}\n    />\n  )\n\n  // ...\n}  \n</code></pre>\n<p>Muuttujan <code>notesToShow</code> määrittely on melko kompakti</p>\n<pre><code class=\"language-js\">const notesToShow = showAll\n  ? notes\n  : notes.filter(note => note.important === true)\n</code></pre>\n<p>Käytössä on monissa muissakin kielissä oleva <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ehdollinen</a> operaatio.</p>\n<p>Operaatio toimii seuraavasti. Jos meillä on esim:</p>\n<pre><code class=\"language-js\">const tulos = ehto ? val1 : val2\n</code></pre>\n<p>muuttujan <code>tulos</code> arvoksi asetetaan <codeval1></code>:n arvo jos <code>tulos</code> on tosi. Jos <code>ehto</code> ei ole tosi, muuttujan <code>tulos</code> arvoksi tulee <code>val2</code>:n arvo.</p>\n<p>Eli jos tilan arvo <code>showAll</code> on epätosi, muuttuja <code>notesToShow</code> saa arvokseen vaan ne muistiinpanot, joiden <code>important</code>-kentän arvo on tosi. Filtteröinti tapahtuu taulukon metodilla <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">filter</a>:</p>\n<pre><code class=\"language-js\">notes.filter(note => note.important === true)\n</code></pre>\n<p>vertailu-operaatio on oikeastaan turha koska <code>note.important</code> on arvoltaan joko <code>true</code> tai <code>false</code>, eli riittää kirjoittaa</p>\n<pre><code class=\"language-js\">notes.filter(note => note.important)\n</code></pre>\n<p>Tässä käytettiin kuitenkin ensin vertailuoperaattoria, mm. korostamaan erästä tärkeää seikkaa: Javascriptissa <code>arvo1 == arvo2</code> ei toimi kaikissa tilanteissa loogisesti ja onkin varmempi käyttää aina vertailuissa muotoa <code>arvo1 === arvo2</code>. Enemmän aiheesta <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">täällä</a>.</p>\n<p>Filtteröinnin toimivuutta voi jo nyt kokeilla vaihtelemalla sitä, miten tilan kentän <code>showAll</code> alkuarvo määritelään konstruktorissa.</p>\n<p>Lisätään sitten toiminnallisuus, mikä mahdollistaa <code>showAll</code>:in tilan muuttamisen sovelluksesta.</p>\n<p>Oleelliset muutokset ovat seuraavassa:</p>\n<pre><code class=\"language-js\">import React, { useState } from 'react' \nimport Note from './components/Note'\n\nconst App = (props) => {\n  const [notes, setNotes] = useState(props.notes) \n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n\n  // ...\n\n  return (\n    &#x3C;div>\n      &#x3C;h1>Muistiinpanot&#x3C;/h1>\n// highlight-start      \n      &#x3C;div>\n        &#x3C;button onClick={() => setShowAll(!showAll)}>\n          näytä {showAll ? 'vain tärkeät' : 'kaikki' }\n        &#x3C;/button>\n      &#x3C;/div>\n// highlight-end            \n      &#x3C;ul>\n        {rows()}\n      &#x3C;/ul>\n      &#x3C;form onSubmit={addNote}>\n        &#x3C;input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        &#x3C;button type=\"submit\">tallenna&#x3C;/button>\n      &#x3C;/form>      \n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>Näkyviä muistiinpanoja (kaikki vai ainoastaan tärkeät) siis kontrolloidaan napin avulla. Napin tapahtumankäsittelijä on niin yksinkertainen että se on kirjotettu suoraan napin attribuutiksi. Tapahtumankäsittelijä muuttaa <em>showAll</em>:n arvon truesta falseksi ja päinvastoin:</p>\n<pre><code class=\"language-js\">() => setShowAll(!showAll)\n</code></pre>\n<p>Napin teksti riippuu tilan <code>showAll</code> arvosta:</p>\n<pre><code class=\"language-js\">näytä {showAll ? 'vain tärkeät' : 'kaikki'}\n</code></pre>\n<p>Sovelluksen tämän hetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/FullStack-HY/part2-notes/tree/part2-3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">githubissa</a>, tagissa <em>part2-3</em>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Tehtäviä</h3>\n<p><i>Seuraavassa tehtävässä aloitettavaa ohjelmaa kehitellään eteenpäin muutamassa seuraavassa tehtävässä. Tässä ja kurssin aikana muissakin vastaantulevissa tehtäväsarjoissa ohjelman lopullisen version palauttaminen riittää, voit toki halutessasi tehdä commitin jokaisen tehtävän jälkeisestä tilanteesta, mutta se ei ole välttämätöntä.</i></p>\n<p>Muista, että saadaksesi komponentin tilan luotua joudut asentamaan Reactin version <em>0.16.7.0-alpha.2</em> antamalla seuraavan komennon projektin hakemistossa</p>\n<pre><code class=\"language-js\">npm install -s react@16.7.0-alpha.2 react-dom@16.7.0-alpha.2\n</code></pre>\n<h4>2.6: puhelinluettelo osa 1</h4>\n<p>Toteutetaan yksinkertainen puhelinluettelo. <strong>Aluksi luetteloon lisätään vaan nimiä.</strong></p>\n<p>Voit ottaa sovelluksesi komponentin <code>App</code> pohjaksi seuraavan:</p>\n<pre><code class=\"language-js\">import React, { useState } from 'react'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([ { name: 'Arto Hellas' }]) \n  const [ newName, setNewName ] = useState('')\n\n  return (\n    &#x3C;div>\n      &#x3C;h2>Puhelinluettelo&#x3C;/h2>\n      &#x3C;form>\n        &#x3C;div>\n          nimi: &#x3C;input />\n        &#x3C;/div>\n        &#x3C;div>\n          &#x3C;button type=\"submit\">lisää&#x3C;/button>\n        &#x3C;/div>\n      &#x3C;/form>\n      &#x3C;h2>Numerot&#x3C;/h2>\n      ...\n    &#x3C;/div>\n  )\n\n}\n\nexport default App\n</code></pre>\n<p>Tila <code>newName</code> on tarkoitettu lomakkeen kentän kontrollointiin.</p>\n<p>Joskus tilaa tallettavia ja tarvittaessa muitakin muuttujia voi olla hyödyllistä renderöidä debugatessa komponenttiin, eli voi tilapäisesti lisätä komponentin  palauttamaan koodiin esim. seuraavan:</p>\n<pre><code>&#x3C;div>debug: {newName}&#x3C;/div>\n</code></pre>\n<p>Muista myös osan 1 luku <a href=\"#react-sovellusten-debuggaus\">React-sovellusten debuggaus</a>, erityisesti <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react developer tools</a> on välillä todella kätevä komponentin tilan muutosten seuraamisessa.</p>\n<p>Sovellus voi näyttää tässä vaiheessa seuraavalta:</p>\n<p><img src=\"../images/2/10a.png\"></p>\n<p>Huomaa, React developer toolsin käyttö!</p>\n<p><strong>Huom:</strong></p>\n<ul>\n<li>voit käyttää kentän <code>key</code> arvona henkilön nimeä</li>\n<li>muista estää lomakkeen lähetyksen oletusarvoinen toiminta!</li>\n</ul>\n<h4>2.7: puhelinluettelo osa 2</h4>\n<p>Jos lisättävä nimi on jo sovelluksen tiedossa, estä lisäys. Taulukolla on lukuisia sopivia <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">metodeja</a> tehtävän tekemiseen.</p>\n<p>Anna tilanteessa virheilmoitus komennolla <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">alert</a>:</p>\n<p><img src=\"../images/2/11b.png\"></p>\n<p><strong>Muistutus edellisestä osasta:</strong> kun muodostat Javascriptissä merkkijonoja muuttujaan perustuen, on tyylikkäin tapa asian hoitamiseen <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">template string</a>:</p>\n<pre><code class=\"language-js\">`${newName} on jo luettelossa`\n</code></pre>\n<p>Jos muuttujalla <code>newName</code> on arvona <i>arto</i>, on tuloksena merkkijono</p>\n<pre><code class=\"language-js\">`arto on jo luettelossa`\n</code></pre>\n<p>Sama toki hoituisi javamaisesti merkkijonojen plus-metodilla</p>\n<pre><code class=\"language-js\">newName + ' on jo luettelossa'\n</code></pre>\n<p>Template stringin käyttö antaa kuitenkin professionaalimman vaikutelman.</p>\n<h4>2.8: puhlelinluettelo osa 3</h4>\n<p>Lisää sovellukseen mahdollisuus antaa henkilöille puhelinnumero. Tarvitset siis lomakkeeseen myös toisen <code>input</code>-elementin (ja sille oman muutoksenkäsittelijän):</p>\n<pre><code>&#x3C;form>\n  &#x3C;div>nimi: &#x3C;input />&#x3C;/div>\n  &#x3C;div>numero: &#x3C;input />&#x3C;/div>\n  &#x3C;div>&#x3C;button type=\"submit\">lisää&#x3C;/button>&#x3C;/div>\n&#x3C;/form>\n</code></pre>\n<p>Sovellus voi näyttää tässä vaiheessa seuraavalta. Kuvassa myös <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react developer tools</a>:in tarjoama näkymä komponentin <code>App</code> tilaan:</p>\n<p><img src=\"../images/2/12b.png\"></p>\n<h4>2.9*: puhelinluettelo osa 4</h4>\n<p>Tee lomakkeeseen hakukenttä, jonka avulla näytettävien nimien listaa voidaan rajata:</p>\n<p><img src=\"../images/2/13b.png\"></p>\n<p>Rajausehdon syöttämisen voi hoitaa omana lomakkeeseen kuulumattomana <code>input</code>-elementtinä. Kuvassa rajausehdosta on tehty <em>caseinsensitiivinen</em> eli ehto <em>arto</em> löytää isolla kirjaimella kirjoitetun Arton.</p>\n<p><strong>Huom:</strong> Kun toteutat jotain uutta toiminnallisuutta, on usein hyötyä 'kovakoodata' sovellukseen jotain sisältöä, esim.</p>\n<pre><code class=\"language-js\">const App = () => {\n  const [persons, setPersons] = useState([\n    { name: 'Arto Hellas', number: '040-123456' },\n    { name: 'Martti Tienari', number: '040-123456' },\n    { name: 'Arto Järvinen', number: '040-123456' },\n    { name: 'Lea Kutvonen', number: '040-123456' }\n  ])\n\n  // ...\n}\n</code></pre>\n<p>Näin vältytään turhalta manuaaliselta työltä, missä testaaminen edellyttäisi myös testiaineiston syöttämistä käsin soveluksen lomakkeen kautta.</p>\n<h4>2.10: puhelinluettelo osa 5</h4>\n<p>Jos koko sovelluksesi on tehty yhteen komponenttiin, refaktoroi sitä eriyttämällä sopivia komponentteja. Pidä kuitenkin edelleen kaikki tila sekä tapahtumankäsittelijäfunktiot juurikomponentissa <code>App</code>.</p>\n<p>Riittää että erotat sovelluksesta <strong>kolme</strong> komponenttia. Hyviä kandidaatteja ovat esim. filtteröintilomake, uuden henkilön lisäävä lomake, kaikki henkilöt renderöivä komponentti sekä yksittäisen henkilön renderöivä komponentti.</p>\n<p>Sovelluksen juurikomponentti voi näyttää refaktoroinnin jälkeen suunilleen seuraavalta, eli se ei itse renderöi suoraan oikeastaan mitään muita kuin otsikkoja:</p>\n<pre><code class=\"language-js\">const App = () => {\n  // ...\n\n  return (\n    &#x3C;div>\n      &#x3C;h2>Puhelinluettelo&#x3C;/h2>\n\n      &#x3C;Filter ... />\n\n      &#x3C;h3>lisää uusi&#x3C;/h3>\n\n      &#x3C;PersonForm \n        ...\n      />\n\n      &#x3C;h3>Numerot&#x3C;/h3>\n\n      &#x3C;Persons ... />\n    &#x3C;/div>\n  )\n}\n</code></pre>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/part-2-2c709798e38da8a809241016507d8154.svg"},"part":2,"letter":"b"}}},"pageContext":{"part":2,"letter":"b"}}