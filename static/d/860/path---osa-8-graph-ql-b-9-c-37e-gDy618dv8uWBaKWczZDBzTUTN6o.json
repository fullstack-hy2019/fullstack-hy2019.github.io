{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Tälläkin kurssilla moneen kertaan käytetty REST on ollut pitkään vallitseva tapa toteuttaa palvelimen selaimelle tarjoama rajapinta ja yleensäkin verkossa toimivien sovellusten välinen integraatio.</p>\n<p>RESTin rinnalle selaimessa ja mobiililaitteessa toimivan logiikan ja palvelimien väliseen kommunikointiin on viime vuosina noussut alunperin Facebookin kehittämä <a href=\"http://graphql.org/\">GraphQL</a>.</p>\n<p>GraphQL on filosofialtaan todella erilainen RESTiin verrattuna. REST on <i>resurssipohjainen</i>, jokaisella resurssilla, esim. <i>käyttäjällä</i> on oma sen identifioiva osoite, esim. <i>/users/10</i>, ja kaikki resursseille tehtävät operaatiot toteutetaan tekemällä URL:ille kohdistuvia pyyntöjä, joiden toiminta määrittyy käytetyn HTTP-metodin avulla.</p>\n<p>RESTin resurssiperustaisuus toimii hyvin useissa tapauksissa, joissain tapauksissa se voi kuitenkin olla hieman kankea.</p>\n<p>Oletetaan että blogilistasovelluksemme sisältäisi somemaista toiminnallisuutta ja haluaisimme esim. näyttää sovelluksessa listan, joka sisältää kaikkien seuraamiemme (follow) käyttäjien blogeja kommentoineiden käyttäjien lisäämien blogien nimet.</p>\n<p>Jos palvelin toteuttaisi REST API:n, joutuisimme todennäköisesti tekemään monia HTTP-pyyntöjä selaimen koodista, ennen kuin saisimme muodostettua halutun datan. Pyyntöjen vastauksena tulisi myös paljon ylimääräistä dataa ja halutun datan keräävä selaimen koodi olisi todennäköisesti kohtuullisen monimutkainen.</p>\n<p>Jos kyseessä olisi usein käytetty toiminnallisuus, voitaisiin sitä varten toteuttaa oma REST-endpoint. Jos vastaavia skeaarioita olisi paljon, esim. kymmeniä, tulisi erittäin työlääksi toteuttaa kaikille toiminnallisuuksille oma REST-endpoint.</p>\n<p>GraphQL:n avulla toteutettava palvelin sopii tämänkaltaisiin tilanteisiin hyvin.</p>\n<p>GraphQL:ssä periaatteena, on että selaimen koodi muodostaa <i>kyselyn</i>, joka kuvailee halutun datan ja lähettää sen API:lle HTTP POST -pyynnöllä. Toisin kuin REST:issä, GraphQL:ssä kaikki kyselyt kohdistetaan samaan osoitteeseen ja ovat POST-tyyppisiä.</p>\n<p>Edellä kuvatun skenaarion data saataisiin haettua (suurinpiirtein) seuraavan kaltaisella kyselyllä:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">query FetchBlogsQuery <span class=\"token punctuation\">{</span>\n  user<span class=\"token punctuation\">(</span>username: <span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    followedUsers <span class=\"token punctuation\">{</span>\n      blogs <span class=\"token punctuation\">{</span>\n        comments <span class=\"token punctuation\">{</span>\n          user <span class=\"token punctuation\">{</span>\n            blogs <span class=\"token punctuation\">{</span>\n              title\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Palvelimen vastaus pyyntöön olisi suunnilleen seuraavanlainen JSON-olio:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n  data: <span class=\"token punctuation\">{</span>\n    followedUsers: <span class=\"token punctuation\">{</span>\n      blogs: <span class=\"token punctuation\">{</span>\n        comments: <span class=\"token punctuation\">{</span>\n          user: <span class=\"token punctuation\">{</span>\n            blogs: <span class=\"token punctuation\">[</span>\n              <span class=\"token string\">'Goto considered harmful'</span>,\n              <span class=\"token string\">'End to End Testing with Puppeteer and Jest'</span>,\n              <span class=\"token string\">'Navigating your transition to GraphQL'</span>,\n              <span class=\"token string\">'From REST to GraphQL'</span>\n            <span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sovelluslogiikka säilyy yksinkertaisena ja selaimen koodi saa täsmälleen haluamansa datan yksittäisellä kyselyllä.</p>\n<h3>Skeema ja kyselyt</h3>\n<p>Tutustutaan GraphQL:n peruskäsitteistöön toteuttamalla GraphQL-versio osien 2 ja 3 puhelinluettelosovelluksesta.</p>\n<p>Jokaisen GraphQL-sovelluksen ytimessä on <a href=\"https://graphql.org/learn/schema/\">skeema</a>, joka määrittelee minkä muotoista dataa sovelluksessa vaihdetaan clientin ja palvelimen välillä. Puhelinluettelon alustava skeema on seuraavassa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Person <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  phone<span class=\"token punctuation\">:</span> String\n  street<span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  city<span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span> \n<span class=\"token punctuation\">}</span>\n\ntype Query <span class=\"token punctuation\">{</span>\n  personCount<span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span>\n  allPersons<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Person<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n  <span class=\"token function\">findPerson</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Person\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Skeema määrittelee kaksi <a href=\"https://graphql.org/learn/schema/#type-system\">tyyppiä</a>. Tyypeistä ensimmäinen <i>Person</i> määrittelee, että henkilöillä on neljä kenttää. Kentät ovat tyyppiä <i>String</i>, joka on yksi GraphQL:n määrittelemistä <a href=\"https://graphql.org/learn/schema/#scalar-types\">valmiista tyypeistä</a>. Kentistä muilla paitsi puhelinnumerolla (<i>phone</i>) on oltava arvo, tämä on merkitty skeemaan huutomerkillä.</p>\n<p>Toinen skeeman määrittelemistä tyypeistä on <a href=\"https://graphql.org/learn/schema/#the-query-and-mutation-types\">Query</a>. Käytännössä jokaisessa GraphQL-skeemassa määritellään tyyppi Query, joka kertoo mitä kyselyjä API:n voidaan tehdä. </p>\n<p>Puhelinluettelo määrittelee kolme erilaista kyselyä ja <em>personCount</em> palauttaa kokonaisluvun. <em>allPersons</em> palauttaa listan <i>Person</i> tyyppisiä olioita. <i>findPerson</i> saa merkkijonomuotoisen parametrin ja palauttaa <i>Person</i>-olion. </p>\n<p>Queryjen paluuarvon ja parametrin määrittelyssä on jälleen käytetty välillä huutomerkkiä merkkaamaan <i>pakollisuutta</i>, eli <em>personCount</em> palauttaa varmasti kokonaisluvun. Kyselylle <em>findPerson</em> on pakko antaa parametriksi merkkijono. Kysely palauttaa <i>Person</i>-olion tai arvon <i>null</i>. <em>allPersons</em> palauttaa listan <i>Person</i>-olioita, listalla ei ole <i>null</i>-arvoja. </p>\n<p>Skeema siis määrittelee mitä kyselyjä client pystyy palvelimelta tekemään, minkälaisia parametreja kyselyillä voi olla sen minkä muotoista kyselyjen palauttama data on.</p>\n<p>Kyselyistä yksinkertaisin <em>personCount</em> näyttää seuraavalta</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n\tpersonCount\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Olettaen että sovellukseen olisi talletettu kolmen henkilön tiedot vastaus kyselyyn näyttäisi seuraavalta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"personCount\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kaikkien henkilöiden tiedot hakeva <em>allPersons</em> on hieman monimutkaisempi. Koska kysely palauttaa listan <i>Person</i>-olioita, on kyselyn yhteydessä määriteltävä <i>mitkä kentät</i> kyselyn <a href=\"https://graphql.org/learn/queries/#fields\">halutaan palauttavan</a>: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n\tallPersons<span class=\"token punctuation\">{</span>\n    name\n    phone\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Vastaus voisi näyttää seuraavalta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"allPersons\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Arto Hellas\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"040-123543\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Matti Luukkainen\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"040-432342\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Venla Ruuska\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kysely voi määritellä palautettavaksi mitkä tahansa skeemassa mainitut kentät, esim. seuraava olisi myös mahdollista:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n\tallPersons<span class=\"token punctuation\">{</span>\n    name\n    city\n    street\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Vielä esimerkki parametria edellyttävästä kyselystä, joka hakee yksittäisen henkilön tiedot palauttavasta kyselystä</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">findPerson</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Arto Hellas\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tphone \n    city \n    street\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kyselyn parametri siis annetaan suluissa, ja sen jälkeen määritellään aaltosuluissa paluuarvona tulevan olion halutut kentät. </p>\n<p>Vastaus on muotoa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"findPerson\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"040-123543\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"city\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Espoo\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"street\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tapiolankatu 5 A\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kyselyn paluuarvoa ei oltu merkitty pakolliseksi, eli jos etsitään tuntematonta henkilöä</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">findPerson</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Donald Trump\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tphone \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>vastaus on <i>null</i></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"findPerson\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kuten huomaamme, GraphQL kyselyn ja siihen vastauksena tulevan JSON:in muodoilla on vahva yhteys, voidaan ajatella että kysely kuvailee sen minkälaista dataa vastauksena halutaan. Ero REST:issä tehtäviin pyyntöihin on suuri, REST:iä käytettäessä pyynnon tyyppi ei kerro mitään palautettavan datan muodosta. </p>\n<p>GraphQL:n skeema kuvaa ainoastaan palvelimen ja sitä käyttäjien clientien välillä liikkuvan tiedon muodon. Tieto voi olla organisoituna palvelimen tietokantaan ihan missä muodossa tahansa.</p>\n<p>Nimestään huolimatta GraphQL:llä ei siis ole mitään tekemistä tietokantojen kanssa, se ei ota mitään kantaa siihen miten data on tallennettu. GraphQL-periaattella toimivan API:n käyttämä data voi siis olla talletettu relaatiotietokantaan, dokumenttitietokantaan tai muille palvelimille, joita GraphQL-palvelin käyttää vaikkapa REST:in välityksellä. </p>\n<h3>Apollo server</h3>\n<p>Toteuteaan nyt GraphQL-palvelin tämän hetken johtavaa kirjastoa <a href=\"https://www.apollographql.com/docs/apollo-server/\">Apollo serveriä</a> käyttäen. </p>\n<p>Luodaan uusi npm-projekti komennolla <em>npm init</em> ja asennetaan tarvittavat riippuvuuet</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install <span class=\"token operator\">--</span>save apollo<span class=\"token operator\">-</span>server graphql</code></pre></div>\n<p>Alustava toteutus on seuraavassa</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer<span class=\"token punctuation\">,</span> gql <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> persons <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Arto Hellas\"</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token punctuation\">:</span> <span class=\"token string\">\"040-123543\"</span><span class=\"token punctuation\">,</span>\n    street<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tapiolankatu 5 A\"</span><span class=\"token punctuation\">,</span>\n    city<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Espoo\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Matti Luukkainen\"</span><span class=\"token punctuation\">,</span>\n    phone<span class=\"token punctuation\">:</span> <span class=\"token string\">\"040-432342\"</span><span class=\"token punctuation\">,</span>\n    street<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Malminkaari 10 A\"</span><span class=\"token punctuation\">,</span>\n    city<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Helsinki\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Venla Ruuska\"</span><span class=\"token punctuation\">,</span>\n    street<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Nallemäentie 22 C\"</span><span class=\"token punctuation\">,</span>\n    city<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Helsinki\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token string\">`\n  type Person {\n    name: String!\n    phone: String\n    street: String!\n    city: String! \n  }\n\n  type Query {\n    personCount: Int!\n    allPersons: [Person!]!\n    findPerson(name: String!): Person\n  }\n`</span></span>\n\n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    personCount<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n    allPersons<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons<span class=\"token punctuation\">,</span>\n    findPerson<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> args<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n  resolvers<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Server ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Toteutuksen ytimessä on <em>ApolloServer</em>, joka saa kaksi parametria </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n  resolvers<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>parametreista ensimmäinen <em>typeDefs</em> sisältää sovelluksen käyttämän GraphQL-skeeman. </p>\n<p>Toinen parametri on olio, joka sisältää palvelimen <a href=\"https://www.apollographql.com/docs/apollo-server/essentials/data.html#resolver-map\">resolverit</a>, eli käytännössä koodin, joka määrittelee <i>miten</i> GraphQL-kyselyihin vastataan.</p>\n<p>Resolverien koodi on seuraavassa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    personCount<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n    allPersons<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons<span class=\"token punctuation\">,</span>\n    findPerson<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> args<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>kuten huomataan vastaavat resolverit rakenteeltaan skeemassa määriteltyjä kyseilyitä:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Query <span class=\"token punctuation\">{</span>\n  personCount<span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span>\n  allPersons<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Person<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n  <span class=\"token function\">findPerson</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Person\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>eli jokaista skeemassa määriteltyä kyselyä kohti om määritelty oma kentän <i>Query</i> alle tuleva kenttänsä.</p>\n<p>Kyselyn </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  personCount\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>resolveri on funktio</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons<span class=\"token punctuation\">.</span>length</code></pre></div>\n<p>eli kyselyyn palautetaan vastauksena henkilöt tallentavan taulukon <em>persons</em> pituus. </p>\n<p>Kaikki luettelossa olevat henkilöt hakevan kyselyn </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  allPersons <span class=\"token punctuation\">{</span>\n    name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>resolveri on funktio, joka palauttaa <i>kaikki</i> taulukon <em>persons</em> oliot</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> persons</code></pre></div>\n<h3>GraphQL-playground</h3>\n<p>Kun Apollo serveriä suoritetaan sovelluskehitysmoodissa, käynnistää se osoitteeseen <a href=\"http://localhost:4000/graphql\">http://localhost:4000/graphql</a> sovelluskehittäjälle eritäin hyödyllisen <a href=\"https://www.apollographql.com/docs/apollo-server/features/graphql-playground.html\">GraphQL-playground</a> näkymän, joka avulla on mahdollista tehdä kyselyjä palvelimelle.</p>\n<p>Kokeillaan </p>\n<picture><img src=\"/static/84f414833029834ab295d900b4506288/14be6/41.png\" srcset=\"/static/84f414833029834ab295d900b4506288/4cce7/41.png 200w,\n/static/84f414833029834ab295d900b4506288/bae5f/41.png 400w,\n/static/84f414833029834ab295d900b4506288/14be6/41.png 800w,\n/static/84f414833029834ab295d900b4506288/1b35a/41.png 1200w,\n/static/84f414833029834ab295d900b4506288/c6ea5/41.png 1506w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Triviaaliresolveri</h3>\n<h3>Olion sisällä olio</h3>\n<h3>Frontti</h3>\n<p>GraphQL on jo melko iäkäs teknologia, se on ollut Facebookin sisäisessä käytössä jo vuodesta 2012 lähtien, teknologian voi siis todeta olevan \"battle tested\". Facebook julkaisi GraphQL:n vuonna 2015 ja se on pikkuhiljaa saanut enenevissä määrin huomiota ja nousee ehkä lähivuosina uhmaamaan REST:in valta-asemaa.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/part-8-1f98236965546b36c2a293574ec8b02a.svg"},"part":8,"letter":"a"}}},"pageContext":{"part":8,"letter":"a"}}