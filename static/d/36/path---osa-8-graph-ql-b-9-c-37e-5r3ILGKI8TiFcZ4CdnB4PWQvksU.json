{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Tälläkin kurssilla moneen kertaan käytetty REST on ollut pitkään vallitseva tapa toteuttaa palvelimen selaimelle tarjoama rajapinta ja yleensäkin verkossa toimivien sovellusten välinen integraatio.</p>\n<p>RESTin rinnalle selaimessa (tai mobiililaitteessa) toimivan logiikan ja palvelimien väliseen kommunikointiin on viime vuosina noussut alunperin Facebookin kehittämä <a href=\"http://graphql.org/\">GraphQL</a>.</p>\n<p>GraphQL on filosofialtaan todella erilainen RESTiin verrattuna. REST on <em>resurssipohjainen</em>, jokaisella resurssilla, esim. <em>käyttäjällä</em> on oma sen identifioiva osoite, esim. <em>users/10</em>, ja kaikki resursseille tehtävät operaatiot toteutetaan tekemällä URL:ille kohdistuvia pyyntöjä, joiden toiminta määrittyy käytetyn HTTP-metodin avulla.</p>\n<p>RESTin resurssiperustaisuus toimii hyvin useissa tapauksissa, joissain tapauksissa se voi kuitenkin olla hieman kankea.</p>\n<p>Oletetaan että blogilistasovelluksemme sisältäisi somemaista toiminnallisuutta ja haluaisimme esim. näyttää sovelluksessa listan, joka sisältää kaikkien seuraamiemme (follow) käyttäjien blogeja kommentoineiden käyttäjien lisäämien blogien nimet.</p>\n<p>Jos palvelin toteuttaisi REST API:n, joutuisimme todennäköisesti tekemään monia HTTP-pyyntöjä selaimen koodista, ennen kuin saisimme muodostettua halutun datan. Pyyntöjen vastauksena tulisi myös paljon ylimääräistä dataa ja halutun datan keräävä selaimen koodi olisi todennäköisesti kohtuullisen monimutkainen.</p>\n<p>Jos kyseessä olisi usein käytetty toiminnallisuus, voitaisiin sitä varten toteuttaa oma REST-endpoint. Jos vastaavia skeaarioita olisi paljon, esim. kymmeniä, tulisi erittäin työlääksi toteuttaa kaikille toiminnallisuuksille oma REST-endpoint.</p>\n<p>GraphQL:n avulla toteutettava palvelin sopii tämänkaltaisiin tilanteisiin hyvin.</p>\n<p>GraphQL:ssä periaatteena, on että selaimen koodi muodostaa <em>kyselyn</em>, joka kuvailee haluttua dataa ja lähettää sen API:lle HTTP POST -pyynnöllä. Toisin kuin REST:issä, GraphQL:ssä kaikki kyselyt kohdistetaan samaan osoitteeseen ja ovat POST-tyyppisiä.</p>\n<p>Edellä kuvatun skenaarion data saataisiin haettua (suurinpiirtein) seuraavan kaltaisella kyselyllä:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">query FetchBlogsQuery <span class=\"token punctuation\">{</span>\n  user<span class=\"token punctuation\">(</span>username: <span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    followedUsers <span class=\"token punctuation\">{</span>\n      blogs <span class=\"token punctuation\">{</span>\n        comments <span class=\"token punctuation\">{</span>\n          user <span class=\"token punctuation\">{</span>\n            blogs <span class=\"token punctuation\">{</span>\n              title\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Palvelimen vastaus pyyntöön olisi suunnilleen seuraavanlainen JSON-olio:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n  data: <span class=\"token punctuation\">{</span>\n    followedUsers: <span class=\"token punctuation\">{</span>\n      blogs: <span class=\"token punctuation\">{</span>\n        comments: <span class=\"token punctuation\">{</span>\n          user: <span class=\"token punctuation\">{</span>\n            blogs: <span class=\"token punctuation\">[</span>\n              <span class=\"token string\">'Goto considered harmful'</span>,\n              <span class=\"token string\">'End to End Testing with Puppeteer and Jest'</span>,\n              <span class=\"token string\">'Navigating your transition to GraphQL'</span>,\n              <span class=\"token string\">'From REST to GraphQL'</span>\n            <span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sovelluslogiikka säilyy yksinkertaisena ja selaimen koodi saa täsmälleen haluamansa datan yksittäisellä kyselyllä.</p>\n<p>GraphQL:ää käytettäessä sovelluksen datasta on määriteltävä <a href=\"http://graphql.org/learn/schema/\">skeema</a>, joka kuvailee datan entiteettejä, eli esimerkkimme tapauksessa käyttäjiä, blogeja ja kommentteja sekä niiden suhteita, ks. lisää esim. blogista <a href=\"https://dev-blog.apollodata.com/navigating-your-transition-to-graphql-28a4dfa3acfb\">Navigating your transition to GraphQL</a>.</p>\n<p>GraphQL:n nimi tuleekin siitä, että entiteetit ja niiden suhteet muodostavat usein, etenkin sosiaalisen median tapaisissa sovelluksissa eräänlaisen verkon, missä entiteetit liittyvät toisiin entiteetteihin erilaisten <em>suhteiden</em> kautta.</p>\n<p>Nimestään huolimatta GraphQL:llä ei ole suoranaisesti mitään tekemistä tietokantojen kanssa, se ei ota mitään kantaa siihen miten data on tallennettu. GraphQL-periaattella toimivan API:n käyttämä data voi siis olla talletettu relaatiotietokantaan, dokumenttitietokantaan tai muille palvelimille, joita GraphQL-palvelin käyttää vaikkapa REST:in välityksellä. GraphQL on täysin ohjelmointikieliriippumaton, sekä GraphQL-clientien että -servereiden toteuttamisen tueksi on olemassa kirjastoja useilla ohjelmointikielillä.</p>\n<p>GraphQL on jo melko iäkäs teknologia, se on ollut Facebookin sisäisessä käytössä jo vuodesta 2012 lähtien, teknologian voi siis todeta olevan \"battle tested\". Facebook julkaisi GraphQL:n vuonna 2015 ja se on pikkuhiljaa saanut enenevissä määrin huomiota ja nousee ehkä lähivuosina uhmaamaan REST:in valta-asemaa.</p>\n<p>Teen kurssille ehkä tulevaisuudessa uuden, GraphQL:ää käsittelevän osan. Tänä keväänä se ei kuitenkaan tule ilmestymään. Jos haluat kulkea etujoukkojen mukana, voikin olla hyvä idea tutustua GraphQL:n <a href=\"https://courses.helsinki.fi/fi/TKT21010/121540755\">Full Stack -harjoitustyön</a> yhteydessä.</p>\n<p>Lisää GraphQL:stä esim. seuraavissa:</p>\n<ul>\n<li><a href=\"http://graphql.org/\">http://graphql.org/</a></li>\n<li><a href=\"https://github.com/facebook/graphql\">https://github.com/facebook/graphql</a></li>\n<li><a href=\"https://dev-blog.apollodata.com/full-stack-react-graphql-tutorial-582ac8d24e3b\">Tutoriaali</a> GraphQL:n käyttöön Reactista <a href=\"https://www.apollographql.com/docs/react/\">Apollo clientin</a> avulla</li>\n<li><a href=\"https://dev-blog.apollodata.com/why-graphql-is-the-future-3bec28193807\">Why GraphQL is the future</a></li>\n</ul>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/part-8-1f98236965546b36c2a293574ec8b02a.svg"},"part":8,"letter":"a"}}},"pageContext":{"part":8,"letter":"a"}}