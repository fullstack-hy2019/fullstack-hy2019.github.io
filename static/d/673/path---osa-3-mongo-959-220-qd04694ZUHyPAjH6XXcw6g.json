{"data":{"markdownRemark":{"html":"<h2>Yhteys frontendiin</h2>\n<p>Palataan yritykseemme käyttää nyt tehtyä backendiä <a href=\"/osa2\">osassa 2</a> tehdyllä React-frontendillä. Aiempi yritys lopahti seuraavaan virheilmoitukseen</p>\n<p>![](../assets/3/3.pngng\nFrontendin tekemä GET-pyyntö osoitteeseen <a href=\"http://localhost:3001/notes\">http://localhost:3001/notes</a> ei jostain syystä toimi. Mistä on kyse? Backend toimii kuitenkin selaimesta ja postmanista käytettäessä ilman ongelmaa.</p>\n<h3>Same origin policy ja CORS</h3>\n<p>Kyse on asiasta nimeltään CORS eli Cross-origin resource sharing. <a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\">Wikipedian</a> sanoin</p>\n<blockquote>\n<p>Cross-origin resource sharing (CORS) is a mechanism that allows restricted resources (e.g. fonts) on a web page to be requested from another domain outside the domain from which the first resource was served. A web page may freely embed cross-origin images, stylesheets, scripts, iframes, and videos. Certain \"cross-domain\" requests, notably Ajax requests, are forbidden by default by the same-origin security policy.</p>\n</blockquote>\n<p>Lyhyesti sanottuna meidän kontekstissa kyse on seuraavasta: websovelluksen selaimessa suoritettava Javascript-koodi saa oletusarvoisesti kommunikoida vain samassa <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">originissa</a> olevan palvelimen kanssa. Koska palvelin on localhostin portissa 3001 ja frontend localhostin portissa 3000, niiden origin ei ole sama.</p>\n<p>Korostetaan vielä, että <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">same origin policy</a> ja CORS eivät ole mitenkään React- tai Node-spesifisiä asioita, vaan yleismaailmallisia periaatteita Web-sovellusten toiminnasta.</p>\n<p>Voimme sallia muista <em>origineista</em> tulevat pyynnöt käyttämällä Noden <a href=\"https://github.com/expressjs/cors\">cors</a>-middlewarea.</p>\n<p>Asennetaan <em>cors</em> komennolla</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> cors --save</code></pre></div>\n<p>Otetaan middleware käyttöön ja sallitaan kaikki origineista tulevat pyynnöt:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> cors <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cors'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nyt frontend toimii! Tosin muistiinpanojen tärkeäksi muuttavaa toiminnallisuutta backendissa ei vielä ole.</p>\n<p>CORS:ista voi lukea tarkemmin esim. <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">Mozillan sivuilta</a>.</p>\n<h2>Sovellus internettiin</h2>\n<p>Kun koko \"stäkki\" on saatu vihdoin kuntoon, siirretään sovellus internettiin. Viime aikoina on tullut uusia mielenkiintoisa sovellusten hostausmahdollisuuksia, esim. <a href=\"https://zeit.co\">Zeit</a>. Käytetään seuraavassa vanhaa kunnon <a href=\"https://www.heroku.com\">Herokua</a>.</p>\n<p>Lisätään projektin juureen tiedosto <em>Procfile</em>, joka kertoo Herokulle, miten sovellus käynnistetään</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">web: node index.js</code></pre></div>\n<p>Muutetaan tiedoston <em>index.js</em> lopussa olevaa sovelluksen käyttämän portin määrittelyä seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3001</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nyt käyttöön tulee <a href=\"https://en.wikipedia.org/wiki/Environment_variable\">ympäristömuuttujassa</a> <em>PORT</em> määritelty portti tai 3001 jos ympäristömuuttuja <em>PORT</em> ei ole määritelty. Heroku konfiguroi sovelluksen portin ympäristömuuttujan avulla.</p>\n<p>Tehdään projektihakemistosta git-repositorio, lisätään <em>.gitignore</em> jolla seuraava sisältö</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node_modules</code></pre></div>\n<p>Luodaan heroku-sovellus komennolla <em>heroku create</em> ja deployataan sovellus komennoilla <em>git add -A</em>, <em>git commit -m \"Initiate app.\"</em> ja <em>git push heroku master</em>.</p>\n<p>Jos kaikki meni hyvin, sovellus toimii:</p>\n<picture><img src=\"/static/2022c4968533d523d9779298df095908/14be6/11b.png\" srcset=\"/static/2022c4968533d523d9779298df095908/4cce7/11b.png 200w,\n/static/2022c4968533d523d9779298df095908/bae5f/11b.png 400w,\n/static/2022c4968533d523d9779298df095908/14be6/11b.png 800w,\n/static/2022c4968533d523d9779298df095908/1b35a/11b.png 1200w,\n/static/2022c4968533d523d9779298df095908/39ad8/11b.png 1574w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Jos ei, vikaa voi selvittää herokun lokeja lukemalla, eli komennolla <em>heroku logs</em>.</p>\n<p>Esim. tätä materiaalia tehdessä törmättiin ongelmaan joka aiheutti seuraavan tulostuksen lokeihin</p>\n<p>![](../assets/3/11.ppng</p>\n<p>Syynä ongelmalle oli se, että middlewarea <em>cors</em> asennettaessa oli unohtunut antaa optio <strong>--save</strong>, joka tallentaa tiedon riippuvuudesta tiedostoon <em>package.json</em>. Koska näin kävi, ei Heroku ollut asentanut corsia sovelluksen käyttöön.</p>\n<blockquote>\n<p><strong>HUOM</strong> ainakin alussa on järkevää tarkkailla Herokussa olevan sovelluksen lokeja koko ajan. Parhaiten tämä onnistuu antamalla komento <em>heroku logs -t</em>, jolloin logit tulevat konsoliin sitä mukaan kun palvelimella tapahtuu jotain.</p>\n</blockquote>\n<p>Myös frontend toimii Herokussa olevan backendin avulla. Voit varmistaa asian muuttamalla frontendiin määritellyn backendin osoitteen viittaamaan <em>localhost:3001</em>:n sijaan Herokussa olevaan backendiin.</p>\n<p>Seuraavaksi herää kysymys miten saamme myös frontendin internettiin? Vaihtoehtoja on useita.</p>\n<h3>Frontendin tuotantoversio</h3>\n<p>Olemme toistaiseksi suorittaneet React-koodia <em>sovelluskehitysmoodissa</em>, missä sovellus on konfiguroitu antamaan havainnollisia virheilmoituksia, päivittämään koodiin tehdyt muutokset automaattisesti selaimeen ym.</p>\n<p>Kun sovellus viedään tuotantoon, täytyy siitä tehdä <a href=\"https://reactjs.org/docs/optimizing-performance.html#use-the-production-build\">production build</a>\neli tuotantoa varten optimoitu versio.</p>\n<p>create-react-app:in avulla tehdyistä sovelluksista saadaan muodostettua tuotantoversio komennolla <a href=\"https://github.com/facebookincubator/create-react-app#npm-run-build-or-yarn-build\">npm run build</a>.</p>\n<p>Suoritetaan nyt komento frontendin projektin juuressa.</p>\n<p>Komennon seurauksena syntyy hakemiston <em>build</em> (joka sisältää jo sovelluksen ainoan html-tiedoston <em>index.html</em>) sisään hakemisto <em>static</em>, minkä alle generoituu sovelluksen Javascript-koodin <a href=\"https://en.wikipedia.org/wiki/Minification_(programming)\">minifioitu</a> versio. Vaikka sovelluksen koodi on kirjoitettu useaan tiedostoon, generoituu kaikki Javascript yhteen tiedostoon, samaan tiedostoon tulee itseasiassa myös kaikkien sovelluksen koodin tarvitsemien riippuvuuksien koodi.</p>\n<p>Minifioitu koodi ei ole miellyttävää luettavaa. Koodin alku näyttää seuraavalta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">!</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">function</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> n<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">;</span><span class=\"token keyword\">var</span> o<span class=\"token operator\">=</span>n<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">:</span>r<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">:</span><span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>exports<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span> e<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">,</span>o<span class=\"token punctuation\">,</span>o<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>o<span class=\"token punctuation\">.</span>l<span class=\"token operator\">=</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>o<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">}</span><span class=\"token keyword\">var</span> n<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>t<span class=\"token punctuation\">.</span>m<span class=\"token operator\">=</span>e<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>c<span class=\"token operator\">=</span>n<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">d</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">o</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>configurable<span class=\"token punctuation\">:</span><span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>enumerable<span class=\"token punctuation\">:</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">:</span>r<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">n</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">var</span> n<span class=\"token operator\">=</span>e<span class=\"token operator\">&amp;&amp;</span>e<span class=\"token punctuation\">.</span>__esModule<span class=\"token operator\">?</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> e<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">o</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>hasOwnProperty<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>p<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>s<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">function</span> <span class=\"token function\">r</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span><span class=\"token string\">\"[object Array]\"</span><span class=\"token operator\">===</span><span class=\"token constant\">E</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token keyword\">function</span> <span class=\"token function\">o</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span><span class=\"token string\">\"[object ArrayBuffer]\"</span><span class=\"token operator\">===</span><span class=\"token constant\">E</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span><span class=\"token string\">\"undefined\"</span><span class=\"token operator\">!==</span><span class=\"token keyword\">typeof</span> FormData<span class=\"token operator\">&amp;&amp;</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">}</span><span class=\"token keyword\">function</span> <span class=\"token function\">i</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span><span class=\"token string\">\"undefined\"</span><span class=\"token operator\">!==</span><span class=\"token keyword\">typeof</span> ArrayBuffer<span class=\"token operator\">&amp;&amp;</span>ArrayBuffer<span class=\"token punctuation\">.</span>isView<span class=\"token operator\">?</span>ArrayBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">isView</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>e<span class=\"token operator\">&amp;&amp;</span>e<span class=\"token punctuation\">.</span>buffer<span class=\"token operator\">&amp;&amp;</span>e<span class=\"token punctuation\">.</span>buffer <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">}</span><span class=\"token keyword\">function</span> <span class=\"token function\">u</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span><span class=\"token string\">\"string\"</span><span class=\"token operator\">===</span><span class=\"token keyword\">typeof</span> e<span class=\"token punctuation\">}</span><span class=\"token keyword\">function</span> <span class=\"token function\">l</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span><span class=\"token string\">\"number\"</span><span class=\"token operator\">===</span><span class=\"token keyword\">typeof</span> e<span class=\"token punctuation\">}</span><span class=\"token keyword\">function</span> <span class=\"token function\">s</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span><span class=\"token string\">\"undefined\"</span><span class=\"token operator\">===</span><span class=\"token keyword\">typeof</span> e<span class=\"token punctuation\">}</span><span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token operator\">!==</span>e<span class=\"token operator\">&amp;&amp;</span><span class=\"token string\">\"object\"</span><span class=\"token operator\">===</span><span class=\"token keyword\">typeof</span></code></pre></div>\n<h3>Staattisten tiedostojen tarjoaminen backendistä</h3>\n<p>Eräs mahdollisuus frontendin tuotantoon viemiseen on kopioida tuotantokoodi, eli hakemisto <em>build</em> backendin repositorion juureen ja määritellä backend näyttämään pääsivunaan frontendin <em>pääsivu</em>, eli tiedosto <em>build/index.html</em>.</p>\n<p>Aloitetaan kopioimalla frontendin tuotantokoodi backendin alle, projektin juureen. Omalla koneellani kopiointi tapahtuu frontendin hakemistosta käsin komennolla</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> -r build <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/osa3/notebackend</code></pre></div>\n<p>Backendin sisältävän hakemiston tulee nyt näyttää seuraavalta:</p>\n<picture><img src=\"/static/0fdfb362679cfe19966d66984903af3f/14be6/11x.png\" srcset=\"/static/0fdfb362679cfe19966d66984903af3f/4cce7/11x.png 200w,\n/static/0fdfb362679cfe19966d66984903af3f/bae5f/11x.png 400w,\n/static/0fdfb362679cfe19966d66984903af3f/14be6/11x.png 800w,\n/static/0fdfb362679cfe19966d66984903af3f/1b35a/11x.png 1200w,\n/static/0fdfb362679cfe19966d66984903af3f/89b0a/11x.png 1490w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Jotta saamme expressin näyttämään <em>staattista sisältöä</em> eli sivun <em>index.html</em> ja sen lataaman Javascriptin ym. tarvitsemme expressiin sisäänrakennettua middlewarea <a href=\"http://expressjs.com/en/starter/static-files.html\">static</a>.</p>\n<p>Kun lisäämme muiden middlewarejen määrittelyn yhteyteen seuraavan</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">'build'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>tarkastaa express GET-tyyppisten HTTP-pyyntöjen yhteydessä ensin löytyykö pyynnön polkua vastaavan nimistä tiedostoa hakemistosta <em>build</em>. Jos löytyy, palauttaa express tiedoston.</p>\n<p>Nyt HTTP GET -pyyntö osoitteeseen <em>www.palvelimenosoite.com/index.html</em> tai <em>www.palvelimenosoite.com</em> näyttää Reactilla tehdyn frontendin. GET-pyynnön esim. osoitteeseen <em>www.palvelimenosoite.com/notes</em> hoitaa backendin koodi.</p>\n<p>Koska tässä tapauksessa sekä frontend että backend toimivat samassa osoitteessa, voidaan React-sovelluksessa tapahtuva backendin <em>baseUrl</em> määritellä <a href=\"https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2\">suhteellisena</a> URL:ina, eli ilman palvelinta yksilöivää osaa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'/notes'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>Muutoksen jälkeen on luotava uusi production build ja kopioitava se backendin repositorion juureen.</p>\n<p>Sovellusta voidaan käyttää nyt <em>backendin</em> osoitteesta <a href=\"http://localhost:3001\">http://localhost:3001</a>:</p>\n<picture><img src=\"/static/7c01d2173f16cbebb1265363a02da9cd/14be6/11f.png\" srcset=\"/static/7c01d2173f16cbebb1265363a02da9cd/4cce7/11f.png 200w,\n/static/7c01d2173f16cbebb1265363a02da9cd/bae5f/11f.png 400w,\n/static/7c01d2173f16cbebb1265363a02da9cd/14be6/11f.png 800w,\n/static/7c01d2173f16cbebb1265363a02da9cd/1b35a/11f.png 1200w,\n/static/7c01d2173f16cbebb1265363a02da9cd/9ee03/11f.png 1600w,\n/static/7c01d2173f16cbebb1265363a02da9cd/52d77/11f.png 1644w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Sovelluksemme toiminta vastaa nyt täysin osan 0 luvussa <a href=\"/osa0/#single-page-app\">Single page app</a> läpikäydyn esimerkkisovelluksen toimintaa.</p>\n<p>Kun mennään selaimella osoitteeseen <a href=\"http://localhost:3001\">http://localhost:3001</a> palauttaa palvelin hakemistossa <em>build</em> olevan tiedoston <em>index.html</em>, jonka sisältö hieman tiivistettynä on seuraava:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>React App<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/static/css/main.d2f2b65b.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/static/js/main.c18b620c.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Sivu sisältää ohjeen ladata sovelluksen tyylit määrittelevän CSS-tiedoston, sekä <em>script</em>-tagin, jonka ansiosta selain lataa sovelluksen Javascript-koodin, eli varsinaisen React-sovelluksen.</p>\n<p>React-koodi hakee palvelimelta muistiinpanot osoitteesta <a href=\"http://localhost:3001/notes\">http://localhost:3001/notes</a> ja renderöi ne ruudulle. Selaimen ja palvelimen kommunikaatio selviää tuttuun tapaan konsolin välilehdeltä <em>Network</em>:</p>\n<picture><img src=\"/static/0b4d9fcb494801b604583717bdbe63cb/14be6/11g.png\" srcset=\"/static/0b4d9fcb494801b604583717bdbe63cb/4cce7/11g.png 200w,\n/static/0b4d9fcb494801b604583717bdbe63cb/bae5f/11g.png 400w,\n/static/0b4d9fcb494801b604583717bdbe63cb/14be6/11g.png 800w,\n/static/0b4d9fcb494801b604583717bdbe63cb/1b35a/11g.png 1200w,\n/static/0b4d9fcb494801b604583717bdbe63cb/9ee03/11g.png 1600w,\n/static/0b4d9fcb494801b604583717bdbe63cb/4fcfa/11g.png 1706w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Kun sovelluksen \"internettiin vietävä\" versio todetaan toimivan paikalliseksi, commitoidaan frontendin tuotantoversio backendin repositorioon ja pushataan koodi uudelleen herokuun.</p>\n<p><a href=\"https://fullstack-notes.herokuapp.com\">Sovellus</a> toimii moitteettomasti lukuunottamatta vielä backendiin toteuttamatonta muistiinpanon tärkeyden muuttamista:</p>\n<picture><img src=\"/static/e137856780a091696fb2271718e0266b/14be6/11c.png\" srcset=\"/static/e137856780a091696fb2271718e0266b/4cce7/11c.png 200w,\n/static/e137856780a091696fb2271718e0266b/bae5f/11c.png 400w,\n/static/e137856780a091696fb2271718e0266b/14be6/11c.png 800w,\n/static/e137856780a091696fb2271718e0266b/1b35a/11c.png 1200w,\n/static/e137856780a091696fb2271718e0266b/1ee5b/11c.png 1344w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<blockquote>\n<p><strong>HUOM</strong> ennen pushaamista on tietysti muistettava lisätä hakemisto <em>build</em> repositorioon!</p>\n</blockquote>\n<p>Sovelluksemme tallettama tieto ei ole ikuisesti pysyvää, sillä sovellus tallettaa muistiinpanot muuttujaan. Jos sovellus kaatuu tai se uudelleenkäynnistetään, kaikki tiedot katoavat.</p>\n<p>Tarvitsemme sovelluksellemme tietokannan. Ennen tietokannan käyttöönottoa katsotaan kuitenkin vielä muutamaa asiaa.</p>\n<h2>Frontendin deployauksen suoraviivaistus</h2>\n<p>Jotta uuden frontendin version generointi onnistuisi jatkossa ilman turhia manuaalisia askelia, tehdään frontendin repositorion juureen yksinkertainen shell-scripti, joka suorittaa uuden tuotantoversion buildaamisen eli komennon <em>npm run build</em> ja sen siirron backendin alle. Annetaan skriptille nimeksi <em>deploy.sh</em>. Sisältö on seuraava</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n<span class=\"token function\">npm</span> run build\n<span class=\"token function\">rm</span> -rf <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/osa3/notebackend/build\n<span class=\"token function\">cp</span> -r build <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/osa3/notebackend/</code></pre></div>\n<p>Skriptille pitää antaa vielä suoritusoikeudet:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> u+x deploy.sh</code></pre></div>\n<p>Skripti voidaan suorittaa frontendin juuresta komennolla <em>./deploy.sh</em></p>\n<h3>Backendin urlit</h3>\n<p>Backendin tarjoama muistiinpanojen käsittelyn rajapinta on nyt suoraan sovelluksen URL:in <a href=\"https://fullstack-notes.herokuapp.com\">https://fullstack-notes.herokuapp.com</a> alla. Eli <a href=\"https://fullstack-notes.herokuapp.com/notes\">https://fullstack-notes.herokuapp.com/notes</a> on kaikkien mustiinpanojen lista ym. Koska backendin roolina on tarjota frontendille koneluettava rajapinta, eli API, olisi ehkä parempi erottaa API:n tarjoama osoitteisto selkeämmin, esim. aloittamalla kaikki sanalla <em>api</em>.</p>\n<p>Tehdään muutos ensin muuttamalla käsin <strong>kaikki backendin routet</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//...</span>\napp<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//...</span></code></pre></div>\n<p>Frontendin koodiin riittää seuraava muutos</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>Muutosten jälkeen esim. kaikki muistiinpanot tarjoavan API-endpointin osoite on <a href=\"https://fullstack-notes.herokuapp.com/api/notes\">https://fullstack-notes.herokuapp.com/api/notes</a></p>\n<picture><img src=\"/static/c0a8f9e273449668c4661aedd12f1b03/14be6/11d.png\" srcset=\"/static/c0a8f9e273449668c4661aedd12f1b03/4cce7/11d.png 200w,\n/static/c0a8f9e273449668c4661aedd12f1b03/bae5f/11d.png 400w,\n/static/c0a8f9e273449668c4661aedd12f1b03/14be6/11d.png 800w,\n/static/c0a8f9e273449668c4661aedd12f1b03/1b35a/11d.png 1200w,\n/static/c0a8f9e273449668c4661aedd12f1b03/9ee03/11d.png 1600w,\n/static/c0a8f9e273449668c4661aedd12f1b03/74c0f/11d.png 1664w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Frontend on edelleen sovelluksen juuressa eli osoitteessa <a href=\"https://fullstack-notes.herokuapp.com/\">https://fullstack-notes.herokuapp.com/</a>.</p>\n<blockquote>\n<p>Sivuhuomautus: API:en versiointi</p>\n<p>Joskus API:n urleissa ilmaistaan myös API:n versio. Eri versioita saatetaan tarvita, jos aikojen kuluessa API:in tehdään laajennuksia, jotka ilman versiointia hajoittaisivat olemassaolevia osia ohjelmista. Versioinnin avulla voidaan tuoda vanhojen rinnalle uusia, hieman eri tavalla toimivia versioita API:sta.</p>\n<p>API:n version ilmaiseminen URL:issa ei kuitenkaan ole välttämättä, ainakaan kaikkien mielestä järkevää vaikka tapaa paljon käytetäänkin. Oikeasta tavasta API:n versiointiin <a href=\"https://stackoverflow.com/questions/389169/best-practices-for-api-versioning\">kiistellään ympäri internettiä</a>.</p>\n</blockquote>\n<h3>Proxy</h3>\n<p>Frontendiin tehtyjen muutosten seurauksena on nyt se, että kun suoritamme frontendiä sovelluskehitysmoodissa, eli käynnistämällä sen komennolla <em>npm start</em>, yhteys backendiin ei toimi:</p>\n<picture><img src=\"/static/abc8ec10f3ef912cd52c42074d442dc9/14be6/11e.png\" srcset=\"/static/abc8ec10f3ef912cd52c42074d442dc9/4cce7/11e.png 200w,\n/static/abc8ec10f3ef912cd52c42074d442dc9/bae5f/11e.png 400w,\n/static/abc8ec10f3ef912cd52c42074d442dc9/14be6/11e.png 800w,\n/static/abc8ec10f3ef912cd52c42074d442dc9/1b35a/11e.png 1200w,\n/static/abc8ec10f3ef912cd52c42074d442dc9/9ee03/11e.png 1600w,\n/static/abc8ec10f3ef912cd52c42074d442dc9/895c5/11e.png 1650w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Syynä tälle on se, että backendin osoite muutettiin suhteellisesti määritellyksi:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Koska frontend toimii osoitteessa <em>localhost:3000</em>, menevät backendiin tehtävät pyynnöt väärään osoitteeseen <em>localhost:3000/api/notes</em>. Backend toimii kuitenkin osoitteessa <em>localhost:3001</em></p>\n<p>create-react-app:illa luoduissa projekteissa ongelma on helppo ratkaista. Riittää, että frontendin repositorion tiedostoon <em>package.json</em> lisätään seuraava määritelmä:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"dependencies\"</span><span class=\"token keyword\">:</span> <span class=\"token punctuation\">{</span>\n    // <span class=\"token punctuation\">..</span>.\n  <span class=\"token punctuation\">}</span>,\n  <span class=\"token string\">\"scripts\"</span><span class=\"token keyword\">:</span> <span class=\"token punctuation\">{</span>\n    // <span class=\"token punctuation\">..</span>.\n  <span class=\"token punctuation\">}</span>,\n  <span class=\"token string\">\"proxy\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"http://localhost:3001\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Uudelleenkäynnistyksen jälkeen Reactin sovelluskehitysympäristö toimii <a href=\"https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#proxying-api-requests-in-development\">proxynä</a> ja jos React-koodi tekee HTTP-pyynnön palvelimen <em><a href=\"http://localhost:3000\">http://localhost:3000</a></em> johonkin osoitteeseen joka ei ole React-sovelluksen vastuulla (eli kyse ei ole esim. sovelluksen Javascript-koodin tai CSS:n lataamisesta), lähetetään pyyntö edelleen osoitteessa <em><a href=\"http://localhost:3001\">http://localhost:3001</a></em> olevalle palvelimelle.</p>\n<p>Nyt myös frontend on kunnossa, se toimii sekä sovelluskehitysmoodissa että tuotannossa yhdessä palvelimen kanssa.</p>\n<p>Eräs negatiivinen puoli käyttämässämme lähestymistavassa on se, että sovelluksen uuden version tuotantoon vieminen edellyttää frontendin koodin tuotantoversion generoinnista ja sen backendin repositorion kopioimisesta huolehtivan skriptin <em>delpoy.sh</em> suorittamisen. Tämä taas hankaloittaa automatisoidun <a href=\"https://martinfowler.com/bliki/DeploymentPipeline.html\">deployment pipelinen</a> toteuttamista. Deployment pipelinellä tarkoitetaan automatisoitua ja hallittua tapaa viedä koodi sovelluskehittäjän koneelta erilaisten testien ja laadunhallinnallisten vaiheiden kautta tuotantoympäristöön.</p>\n<p>Tähänkin on useita erilaisia ratkaisuja (esim. sekä frontendin että backendin <a href=\"https://github.com/mars/heroku-cra-node\">sijoittaminen samaan repositorioon</a>), emme kuitenkaan nyt mene niihin.</p>\n<p>Myös frontendin koodin deployaaminen omana sovelluksenaan voi joissain tilanteissa olla järkevää. create-react-app:in avulla luotujen sovellusten osalta se on <a href=\"https://github.com/mars/create-react-app-buildpack\">suoraviivaista</a>.</p>\n<p>Sovelluksen tämänhetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/FullStack-HY/part3-notes-backend/tree/part3-2\">githubissa</a>, tagissa <em>part3-2</em>.</p>\n<h2>Tehtäviä</h2>\n<p>Tee nyt tehtävät <a href=\"/teht%C3%A4v%C3%A4t#yhteys-frontendiin-ja-vienti-tuotantoon\">3.9-3.11</a></p>\n<h2>Node-sovellusten debuggaaminen</h2>\n<p>Node-sovellusten debuggaaminen on jossain määrin hankalampaa kuin selaimessa toimivan Javascriptin.</p>\n<p>Vanha hyvä keino on tietysti konsoliin tulostelu. Se kannattaa aina. On mielipiteitä, joiden mukaan konsoliin tulostelun sijaan olisi syytä suosia jotain kehittyneempää menetelmää, mutta en ole ollenkaan samaa mieltä. Jopa maailman aivan eliittiin kuuluvat open source -kehittäjät <a href=\"https://tenderlovemaking.com/2016/02/05/i-am-a-puts-debuggerer.html\">käyttävät</a> tätä <a href=\"https://swizec.com/blog/javascript-debugging-slightly-beyond-console-log/swizec/6633\">menetelmää</a>.</p>\n<h3>Visual Studio Code</h3>\n<p>Visual Studio Coden debuggeri voi olla hyödyksi joissain tapauksissa. Seuraavassa screenshot, missä koodi on pysäytetty kesken uuden muistiinpanon lisäyksen</p>\n<picture><img src=\"/static/b8cc37e48ad79de6621505cc46e058c5/14be6/17a.png\" srcset=\"/static/b8cc37e48ad79de6621505cc46e058c5/4cce7/17a.png 200w,\n/static/b8cc37e48ad79de6621505cc46e058c5/bae5f/17a.png 400w,\n/static/b8cc37e48ad79de6621505cc46e058c5/14be6/17a.png 800w,\n/static/b8cc37e48ad79de6621505cc46e058c5/1b35a/17a.png 1200w,\n/static/b8cc37e48ad79de6621505cc46e058c5/9ee03/17a.png 1600w,\n/static/b8cc37e48ad79de6621505cc46e058c5/88050/17a.png 2180w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Koodi on pysähtynyt nuolen osoittaman <em>breakpointin</em> kohdalle ja konsoliin on evaluoitu muuttujan <em>request.params</em> arvo. Vasemmalla olevassa ikkunassa on nähtävillä myös muuta ohjelman tilaan liittyvää.</p>\n<p>Ylhäällä olevista nuolista yms. voidaan kontrolloida debuggauksen etenemistä.</p>\n<p>Itse en juurikaan käytä Visual Studio Code debuggeria.</p>\n<h3>Chromen dev tools</h3>\n<p>Debuggaus onnisuu myös Chromen developer-konsolilla, käynnistämällä sovellus komennolla:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node --inspect index.js</code></pre></div>\n<p>Debuggeriin pääsee käsiksi kirjoittamalla chromen osoiteriville</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">chrome://inspect</code></pre></div>\n<p>Avautuvasta näkymästä valitaan debugattava sovellus:</p>\n<picture><img src=\"/static/67df178f0d6c7afea179ca0065f54e29/14be6/18.png\" srcset=\"/static/67df178f0d6c7afea179ca0065f54e29/4cce7/18.png 200w,\n/static/67df178f0d6c7afea179ca0065f54e29/bae5f/18.png 400w,\n/static/67df178f0d6c7afea179ca0065f54e29/14be6/18.png 800w,\n/static/67df178f0d6c7afea179ca0065f54e29/1b35a/18.png 1200w,\n/static/67df178f0d6c7afea179ca0065f54e29/9ee03/18.png 1600w,\n/static/67df178f0d6c7afea179ca0065f54e29/dd788/18.png 1632w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Debuggausnäkymä toimii kuten React-koodia debugattaessa, <em>Sources</em>-välilehdelle voidaan esim. asettaa breakpointeja, eli kohtia joihin suoritus pysähtyy:</p>\n<picture><img src=\"/static/1b2d617ab5c699116d01d4cbd1ab3300/14be6/19a.png\" srcset=\"/static/1b2d617ab5c699116d01d4cbd1ab3300/4cce7/19a.png 200w,\n/static/1b2d617ab5c699116d01d4cbd1ab3300/bae5f/19a.png 400w,\n/static/1b2d617ab5c699116d01d4cbd1ab3300/14be6/19a.png 800w,\n/static/1b2d617ab5c699116d01d4cbd1ab3300/1b35a/19a.png 1200w,\n/static/1b2d617ab5c699116d01d4cbd1ab3300/9ee03/19a.png 1600w,\n/static/1b2d617ab5c699116d01d4cbd1ab3300/ca306/19a.png 1954w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Kaikki sovelluksen console.log-tulostukset tulevat debuggerin <em>Console</em>-välilehdelle. Voit myös tutkia siellä muuttujien arvoja ja suorittaa mielivaltaista Javascript-koodia:</p>\n<picture><img src=\"/static/41fbd33d9a8afc6c1fa5baf89e23b139/14be6/20a.png\" srcset=\"/static/41fbd33d9a8afc6c1fa5baf89e23b139/4cce7/20a.png 200w,\n/static/41fbd33d9a8afc6c1fa5baf89e23b139/bae5f/20a.png 400w,\n/static/41fbd33d9a8afc6c1fa5baf89e23b139/14be6/20a.png 800w,\n/static/41fbd33d9a8afc6c1fa5baf89e23b139/1b35a/20a.png 1200w,\n/static/41fbd33d9a8afc6c1fa5baf89e23b139/9ee03/20a.png 1600w,\n/static/41fbd33d9a8afc6c1fa5baf89e23b139/cf044/20a.png 1806w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Epäile kaikkea</h3>\n<p>Full Stack -sovellusten debuggaaminen vaikuttaa alussa erittäin hankalalta. Kun kohta kuvaan tulee myös tietokanta ja frontend on yhdistetty backendiin, on potentiaalisia virhelähteitä todella paljon.</p>\n<p>Kun sovellus \"ei toimi\", onkin selvitettävä missä vika on. On erittäin yleistä, että vika on sellaisessa paikassa, mitä ei osaa ollenkaan epäillä, ja menee minuutti-, tunti- tai jopa päiväkausia ennen kuin oikea ongelmien lähde löytyy.</p>\n<p>Avainasemassa onkin systemaattisuus. Koska virhe voi olla melkein missä vaan, kaikkea pitää epäillä, ja tulee pyrkiä poissulkemaan ne osat tarkastelusta, missä virhe ei ainakaan ole. Konsoliin kirjoitus, Postman, debuggeri ja kokemus auttavat.</p>\n<p>Virheiden ilmaantuessa ylivoimaisesti huonoin strategia on jatkaa koodin kirjoittamista. Se on tae siitä, että koodissa on pian kymmenen ongelmaa lisää ja niiden syyn selvittäminen on entistäkin vaikeampaa. Toyota Production Systemin periaate <a href=\"http://gettingtolean.com/toyota-principle-5-build-culture-stopping-fix/#.Wjv9axP1WCQ\">Stop and fix</a> toimii tässäkin yhteydessä paremmin kuin hyvin.</p>","frontmatter":{"mainImage":{"publicURL":"/static/part-3-6502baf3ac1171cebf38f6bc8b3a36dc.svg"},"part":3,"letter":"b"}}},"pageContext":{"part":3,"letter":"b"}}