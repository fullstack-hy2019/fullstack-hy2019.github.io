{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Palataan osan 6 jälkeen jälleen Reduxittoman Reactin pariin.</p>\n<p>On erittäin tyypillistä, että web-sovelluksissa on navigaatiopalkki, jonka avulla on mahdollista vaihtaa sovelluksen näkymää. Muistiinpanosovelluksemme voisi sisältää pääsivun:</p>\n<picture><img src=\"/static/9dede0061c8eac733e37e2e60d2717b6/14be6/6.png\" srcset=\"/static/9dede0061c8eac733e37e2e60d2717b6/4cce7/6.png 200w,\n/static/9dede0061c8eac733e37e2e60d2717b6/bae5f/6.png 400w,\n/static/9dede0061c8eac733e37e2e60d2717b6/14be6/6.png 800w,\n/static/9dede0061c8eac733e37e2e60d2717b6/1b35a/6.png 1200w,\n/static/9dede0061c8eac733e37e2e60d2717b6/7db0f/6.png 1240w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>ja omat sivunsa muistiinpanojen ja käyttäjien tietojen näyttämiseen:</p>\n<picture><img src=\"/static/5b335e01f8915d3c3cab42be7f78460c/14be6/7.png\" srcset=\"/static/5b335e01f8915d3c3cab42be7f78460c/4cce7/7.png 200w,\n/static/5b335e01f8915d3c3cab42be7f78460c/bae5f/7.png 400w,\n/static/5b335e01f8915d3c3cab42be7f78460c/14be6/7.png 800w,\n/static/5b335e01f8915d3c3cab42be7f78460c/1b35a/7.png 1200w,\n/static/5b335e01f8915d3c3cab42be7f78460c/7db0f/7.png 1240w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><a href=\"/osa0#perinteinen-web-sovellus\">Vanhan koulukunnan websovelluksessa</a> sovelluksen näyttämän sivun vaihto tapahtui siten että selain teki palvelimelle uuden HTTP GET -pyynnön ja renderöi sitten palvelimen palauttaman näkymää vastaavan HTML-koodin.</p>\n<p>Single page appeissa taas ollaan todellisuudessa koko ajan samalla sivulla, ja selaimessa suoritettava Javascript-koodi luo illuusion eri \"sivuista\". Jos näkymää vaihdettaessa tehdään HTTP-kutsuja, niiden avulla haetaan ainoastaan JSON-muotoista dataa jota uuden näkymän näyttäminen ehkä edellyttää.</p>\n<p>Navigaatiopalkki ja useita näkymiä sisältävä sovellus on erittäin helppo toteuttaa Reactilla.</p>\n<p>Seuraavassa on eräs tapa:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const Home = () =&gt; (\n  &lt;div&gt; &lt;h2&gt;TKTL notes app&lt;/h2&gt; &lt;/div&gt;\n)\n\nconst Notes = () =&gt; (\n  &lt;div&gt; &lt;h2&gt;Notes&lt;/h2&gt; &lt;/div&gt;\n)\n\nconst Users = () =&gt; (\n  &lt;div&gt; &lt;h2&gt;Users&lt;/h2&gt; &lt;/div&gt;\n)\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      page: &#39;home&#39;\n    }\n  }\n\n  toPage = (page) =&gt; (event) =&gt; {\n    event.preventDefault()\n    this.setState({ page })\n  }\n\n  render() {\n    const content = () =&gt; {\n      if (this.state.page === &#39;home&#39;) {\n        return &lt;Home /&gt;\n      } else if (this.state.page === &#39;notes&#39;) {\n        return &lt;Notes /&gt;\n      } else if (this.state.page === &#39;users&#39;) {\n        return &lt;Users /&gt;\n      }\n    }\n\n    return (\n      &lt;div&gt;\n        &lt;div&gt;\n          &lt;a href=&quot;&quot; onClick={ this.toPage(&#39;home&#39;) }&gt;home&lt;/a&gt; &amp;nbsp;\n          &lt;a href=&quot;&quot; onClick={ this.toPage(&#39;notes&#39;) }&gt;notes&lt;/a&gt; &amp;nbsp;\n          &lt;a href=&quot;&quot; onClick={ this.toPage(&#39;users&#39;) }&gt;users&lt;/a&gt;\n        &lt;/div&gt;\n\n        {content()}\n      &lt;/div&gt;\n    )\n  }\n}</code></pre></div>\n<p>Eli jokainen näkymä on toteutettu omana komponenttinaan ja sovelluksen tilassa pidetään tieto siitä, minkä näkymää vastaava komponentti menupalkin alla näytetään.</p>\n<p><strong>Huom:</strong> navigointivalikossa oleva <em>&#x26;nbsp;</em> tarkoittaa <em>a</em>-tagien väliin sjijoitettavaa välilyöntiä. CSS:n käyttö olisi luonnollisesti parempi tapa sivun ulkoasun muotoilulle mutta nyt tyydymme quick'n'dirty-ratkaisuun.</p>\n<p>Menetelmä ei kuitenkaan ole optimaalinen. Kuten kuvista näkyy, sivuston osoite pysyy samana vaikka välillä ollaankin eri näkymässä. Jokaisella näkymällä tulisi kuitenkin olla oma osoitteensa, jotta esim. bookmarkien tekeminen olisi mahdollista. Sovelluksessamme ei myöskään selaimen <em>back</em>-painike toimi loogisesti, eli <em>back</em> ei vie edelliseksi katsottuun sovelluksen näkymään vaan jonnekin ihan muualle. Jos sovellus kasvaisi suuremmaksi ja sinne haluttaisiin esim. jokaiselle käyttäjälle sekä muistiinpanolle oma yksittäinen näkymänsä, itse koodattu <em>reititys</em> eli sivuston navigaationhallinta menisi turhan monimutkaiseksi.</p>\n<p>Reactissa on onneksi valmis komponentti <a href=\"https://github.com/ReactTraining/react-router\">React router</a> joka tarjoaa erinomaisen ratkaisun React-sovelluksen navigaation hallintaan.</p>\n<p>Muutetaan ylläoleva sovellus käyttämään React routeria. Asennetaan React router komennolla</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save react-router-dom</code></pre></div>\n<p>React routerin tarjoama reititys saadaan käyttöön muuttamalla sovellusta seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import { BrowserRouter as Router, Route, Link } from &#39;react-router-dom&#39;\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;Router&gt;\n          &lt;div&gt;\n            &lt;div&gt;\n              &lt;Link to=&quot;/&quot;&gt;home&lt;/Link&gt; &amp;nbsp;\n              &lt;Link to=&quot;/notes&quot;&gt;notes&lt;/Link&gt; &amp;nbsp;\n              &lt;Link to=&quot;/users&quot;&gt;users&lt;/Link&gt;\n            &lt;/div&gt;\n            &lt;Route exact path=&quot;/&quot; render={() =&gt; &lt;Home /&gt;} /&gt;\n            &lt;Route path=&quot;/notes&quot; render={() =&gt; &lt;Notes /&gt;} /&gt;\n            &lt;Route path=&quot;/users&quot; render={() =&gt; &lt;Users /&gt;} /&gt;\n          &lt;/div&gt;\n        &lt;/Router&gt;\n      &lt;/div&gt;\n    )\n  }\n}</code></pre></div>\n<p>Reititys, eli komponenttien ehdollinen, selaimen <em>urliin perustuva</em> renderöinti otetaan käyttöön sijoittamalla komponentteja <em>Router</em>-komponentin lapsiksi, eli <em>Router</em>-tagien sisälle.</p>\n<p>Huomaa, että vaikka komponenttiin viitataan nimellä <em>Router</em> kyseessä on <a href=\"https://reacttraining.com/react-router/web/api/BrowserRouter\">BrowserRouter</a>, sillä\nimporttaus tapahtuu siten, että importattava olio uudelleennimetään:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BrowserRouter <span class=\"token keyword\">as</span> Router <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span></code></pre></div>\n<p>Manuaalin mukaan</p>\n<blockquote>\n<p><em>BrowserRouter</em> is a <em>Router</em> that uses the HTML5 history API (pushState, replaceState and the popstate event) to keep your UI in sync with the URL.</p>\n</blockquote>\n<p>Normaalisti selain lataa uuden sivun osoiterivillä olevan urlin muuttuessa. <a href=\"https://css-tricks.com/using-the-html5-history-api/\">HTML5 history API</a>:n avulla <em>BrowserRouter</em> kuitenkin mahdollistaa sen, että selaimen osoiterivillä olevaa urlia voidaan käyttää React-sovelluksen sisäiseen \"reitittämiseen\", eli vaikka osoiterivillä oleva url muuttuu, sivun sisältöä manipuloidaan ainoastaan Javascriptillä ja selain ei lataa uutta sisältöä palvelimelta. Selaimen toiminta back- ja forward-toimintojen ja bookmarkien tekemisen suhteen on kuitenkin loogista, eli toimii kuten perinteisillä web-sivuilla.</p>\n<p>Routerin sisälle määritellään selaimen osoiteriviä muokkaavia <em>linkkejä</em> komponentin <a href=\"https://reacttraining.com/react-router/web/api/Link\">Link</a> avulla. Esim.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/notes\"</span><span class=\"token operator\">></span>notes<span class=\"token operator\">&lt;</span>/Link<span class=\"token operator\">></span></code></pre></div>\n<p>luo sovellukseen linkin, jonka teksti on <em>notes</em> ja jonka klikkaaminen vaihtaa selaimen osoiteriville urliksi <em>/notes</em>.</p>\n<p>Selaimen urliin perustuen renderöitävät komponentit määritellään komponentin <a href=\"https://reacttraining.com/react-router/web/api/Route\">Route</a> avulla. Esim.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/notes\"</span> render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Notes /<span class=\"token operator\">></span><span class=\"token punctuation\">}</span> /<span class=\"token operator\">></span></code></pre></div>\n<p>määrittelee, että jos selaimen osoiteena on <em>/notes</em>, renderöidään komponentti <em>Notes</em>.</p>\n<p>Sovelluksen juuren, eli osoitteen <em>/</em> määritellään renderöivän komponentti <em>Home</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Home /<span class=\"token operator\">></span><span class=\"token punctuation\">}</span> /<span class=\"token operator\">></span></code></pre></div>\n<p>joudumme käyttämään routen <em>path</em> attribuutin edessä määrettä <em>exact</em>, muuten <em>Home</em> renderöityy kaikilla muillakin poluilla, sillä juuri <em>/</em> on kaikkien muiden polkujen <em>alkuosa</em>.</p>\n<h3>parametroitu route</h3>\n<p>Tarkastellaan sitten hieman modifioitua versiota edellisestä esimerkistä. Esimerkin koodi kokonaisuudessaan on <a href=\"https://github.com/FullStack-HY/FullStack-Hy.github.io/wiki/router-esimerkki\">täällä</a>.</p>\n<p>Sovellus sisältää nyt viisi eri näkymää, joiden näkyvyyttä kontrolloidaan routerin avulla. Edellisestä esimerkistä tuttujen komponenttien <em>Home</em>, <em>Notes</em> ja <em>Users</em> lisäksi mukana on kirjautumisnäkymää vastaava <em>Login</em> ja yksittäisen muistiinpanon näkymää vastaava <em>Note</em>.</p>\n<p><em>Home</em> ja <em>Users</em> ovat kuten aiemmassa esimerkissä. <em>Notes</em> on hieman monimutkaisempi, se renderöi propseina saamansa muistiinpanojen listan siten, että jokaisen muistiinpanon nimi on klikattavissa</p>\n<picture><img src=\"/static/c734eb7d3963d927a2849f6d2967e9e1/14be6/8.png\" srcset=\"/static/c734eb7d3963d927a2849f6d2967e9e1/4cce7/8.png 200w,\n/static/c734eb7d3963d927a2849f6d2967e9e1/bae5f/8.png 400w,\n/static/c734eb7d3963d927a2849f6d2967e9e1/14be6/8.png 800w,\n/static/c734eb7d3963d927a2849f6d2967e9e1/1b35a/8.png 1200w,\n/static/c734eb7d3963d927a2849f6d2967e9e1/b03d6/8.png 1330w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Nimen klikattavuus on toteutettu komponentilla <em>Link</em> ja esim. muistiinpanon, jonka id on 3 nimen klikkaaminen aiheuttaa selaimen osoitteen arvon päivittymisen muotoon <em>notes/3</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const Notes = ({notes}) =&gt; (\n  &lt;div&gt;\n    &lt;h2&gt;Notes&lt;/h2&gt;\n    &lt;ul&gt;\n      {notes.map(note=&gt;\n        &lt;li key={note.id}&gt;\n          &lt;Link to={`/notes/${note.id}`}&gt;{note.content}&lt;/Link&gt;\n        &lt;/li&gt;\n      )}\n    &lt;/ul&gt;\n  &lt;/div&gt;\n)</code></pre></div>\n<p>Kun selain siirtyy muistiinpanon yksilöivään osoitteeseen, esim. <em>notes/3</em>, renderöidään komponentti <em>Note</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const Note = ({note}) =&gt; {\n  return(\n  &lt;div&gt;\n    &lt;h2&gt;{note.content}&lt;/h2&gt;\n    &lt;div&gt;{note.user}&lt;/div&gt;\n    &lt;div&gt;&lt;strong&gt;{note.important ? &#39;tärkeä&#39; : &#39;&#39;}&lt;/strong&gt;&lt;/div&gt;\n  &lt;/div&gt;\n)}</code></pre></div>\n<p>Tämä tapahtuu laajentamalla komponentissa <em>App</em> olevaa reititystä seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>home<span class=\"token operator\">&lt;</span>/Link<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/notes\"</span><span class=\"token operator\">></span>notes<span class=\"token operator\">&lt;</span>/Link<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/users\"</span><span class=\"token operator\">></span>users<span class=\"token operator\">&lt;</span>/Link<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span>\n      <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n\n      <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Home /<span class=\"token operator\">></span><span class=\"token punctuation\">}</span> /<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/notes\"</span> render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Notes notes<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>this.state.notes<span class=\"token punctuation\">}</span> /<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n      /<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/notes/:id\"</span> render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>match<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Note note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>noteById<span class=\"token punctuation\">(</span>match.params.id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> /<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n      /<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>/Router<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span></code></pre></div>\n<p>Kaikki muistiinpanon renderöivään routeen on lisätty määre <em>exact path=\"/notes\"</em> sillä muuten se renderöityisi myös <em>/notes/3</em>-muotoisten polkujen yhteydessä.</p>\n<p>Yksittäisen muistiinpanon näkymän renderöivä route määritellään \"expressin tyyliin\" merkkaamalla reitin parametrina oleva osa merkinnällä <em>:id</em></p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">&lt;Route exact path=&quot;/notes/:id&quot; /&gt;</code></pre></div>\n<p>Renderöityvän komponentin määrittävä <em>render</em>-attribuutti pääsee käsiksi id:hen parametrinsa <a href=\"https://reacttraining.com/react-router/web/api/match\">match</a> avulla seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">render={({match}) =&gt; &lt;Note note={noteById(match.params.id)} /&gt;}</code></pre></div>\n<p>Muuttujassa <em>match.params.id</em> olevaa id:tä vastaava muistiinpano selvitetään apufunktion <em>noteById</em> avulla</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const noteById = (id) =&gt;\n  this.state.notes.find(note =&gt; note.id === Number(id))</code></pre></div>\n<p>renderöityvä <em>Note</em>-komponentti saa siis propsina urlin yksilöivää osaa vastaavan muistiinpanon.</p>\n<h3>history</h3>\n<p>Sovellukseen on myös toteutettu erittäin yksinkertainen kirjautumistoiminto. Jos sovellukseen ollaan kirjautuneena, talletetaan tieto kirjautuneesta käyttäjästä komponentin <em>App</em> tilaan <em>this.state.user</em>.</p>\n<p>Mahdollisuus <em>Login</em>-näkymään navigointiin renderöidään menuun ehdollisesti</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>home<span class=\"token operator\">&lt;</span>/Link<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span>\n      <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/notes\"</span><span class=\"token operator\">></span>notes<span class=\"token operator\">&lt;</span>/Link<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span>\n      <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/users\"</span><span class=\"token operator\">></span>users<span class=\"token operator\">&lt;</span>/Link<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">{</span>this.state.user\n        ? <span class=\"token operator\">&lt;</span>em<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>this.state.user<span class=\"token punctuation\">}</span> logged in<span class=\"token operator\">&lt;</span>/em<span class=\"token operator\">></span>\n        <span class=\"token keyword\">:</span> <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/login\"</span><span class=\"token operator\">></span>login<span class=\"token operator\">&lt;</span>/Link<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">..</span>.\n  <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>/Router<span class=\"token operator\">></span></code></pre></div>\n<p>eli jos käyttäjä on kirjaantunut, renderöidäänkin linkin <em>Login</em> sijaan kirjautuneen käyttäjän käyttäjätunnus:</p>\n<picture><img src=\"/static/9d8e5389508c4a3415ca5140d00ad25b/14be6/9.png\" srcset=\"/static/9d8e5389508c4a3415ca5140d00ad25b/4cce7/9.png 200w,\n/static/9d8e5389508c4a3415ca5140d00ad25b/bae5f/9.png 400w,\n/static/9d8e5389508c4a3415ca5140d00ad25b/14be6/9.png 800w,\n/static/9d8e5389508c4a3415ca5140d00ad25b/1b35a/9.png 1200w,\n/static/9d8e5389508c4a3415ca5140d00ad25b/b7120/9.png 1566w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Kirjautumisen toteuttamiseen liittyy eräs mielenkiintoinen seikka. Kirjaantumislomakkeelle mennään selaimen osoitteen ollessa <em>/login</em>. Toiminnallisuuden määrittelevä Route on seuraavassa</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/login\"</span> render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>history<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>Login history<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>history<span class=\"token punctuation\">}</span> onLogin<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>this.login<span class=\"token punctuation\">}</span> /<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n/<span class=\"token operator\">></span></code></pre></div>\n<p>Routen render-attribuutissa määritelty metodi ottaa nyt vastaan olion <a href=\"https://reacttraining.com/react-router/web/api/history\">history</a>, joka tarjoaa mm. mahdollisuuden manipuloida selaimen osoiterivin arvoa ohjelmallisesti.</p>\n<p>Renderöitävälle <em>Login</em>-näkymälle annetaan parametriksi <em>history</em>-olio ja kirjautumisen komponentin <em>App</em> tilaan synkronoiva funktio <em>this.login</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>Login history<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>history<span class=\"token punctuation\">}</span> onLogin<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>this.login<span class=\"token punctuation\">}</span>/<span class=\"token operator\">></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Komponentin koodi seuraavassa</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const Login = ({onLogin, history}) =&gt; {\n  const onSubmit = (event) =&gt; {\n    event.preventDefault()\n    onLogin(event.target.username.value)\n    history.push(&#39;/&#39;)\n  }\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;login&lt;/h2&gt;\n      &lt;form onSubmit={onSubmit}&gt;\n        &lt;div&gt;\n          username: &lt;input /&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n          password: &lt;input type=&quot;password&quot; /&gt;\n        &lt;/div&gt;\n        &lt;button type=&quot;submit&quot;&gt;login&lt;/button&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Kirjautumisen yhteydessä funktiossa <em>onSubmit</em> kutsutaan <a href=\"https://reacttraining.com/react-router/web/api/history\">history</a>-olion metodia <em>push</em>. Käytetty komento <code>history.push('/')</code> saa aikaan sen, että selaimen osoiteriville tulee osoitteeksi <em>/</em> ja sovellus renderöi osoitetta vastaavan komponentin <em>Home</em>.</p>\n<h3>redirect</h3>\n<p>Näkymän <em>Users</em> routeen liittyy vielä eräs mielenkiintoinen detalji:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/users\"</span> render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  this.state.user\n    ? <span class=\"token operator\">&lt;</span>Users /<span class=\"token operator\">></span>\n    <span class=\"token keyword\">:</span> <span class=\"token operator\">&lt;</span>Redirect to<span class=\"token operator\">=</span><span class=\"token string\">\"/login\"</span> /<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>/<span class=\"token operator\">></span></code></pre></div>\n<p>Jos käyttäjä ei ole kirjautuneena, ei renderöidäkään näkymää <em>Users</em> vaan sen sijaan <em>uudelleenohjataan</em> käyttäjä <em>Redirect</em>-komponentin avulla kirjautumisnäkymään</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">&lt;Redirect to=&quot;/login&quot; /&gt;</code></pre></div>\n<p>Todellisessa sovelluksessa olisi kenties parempi olla kokonaan näyttämättä navigaatiovalikossa kirjautumista edellyttäviä näkymiä jos käyttäjä ei ole kirjautunut sovellukseen.</p>\n<p>Seuraavassa vielä komponentin <em>App</em> koodi kokonaisuudessaan:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">class App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      notes: [\n        {\n          id: 1,\n          content: &#39;HTML on helppoa&#39;,\n          important: true,\n          user: &#39;Matti Luukkainen&#39;\n        },\n        // ...\n      ],\n      user: null\n    }\n  }\n\n  login = (user) =&gt; {\n    this.setState({user})\n  }\n\n  render() {\n    const noteById = (id) =&gt;\n      this.state.notes.find(note =&gt; note.id === Number(id))\n\n    return (\n      &lt;div&gt;\n        &lt;Router&gt;\n          &lt;div&gt;\n            &lt;div&gt;\n              &lt;Link to=&quot;/&quot;&gt;home&lt;/Link&gt; &amp;nbsp;\n              &lt;Link to=&quot;/notes&quot;&gt;notes&lt;/Link&gt; &amp;nbsp;\n              &lt;Link to=&quot;/users&quot;&gt;users&lt;/Link&gt; &amp;nbsp;\n              {this.state.user\n                ? &lt;em&gt;{this.state.user} logged in&lt;/em&gt;\n                : &lt;Link to=&quot;/login&quot;&gt;login&lt;/Link&gt;\n              }\n            &lt;/div&gt;\n\n            &lt;Route exact path=&quot;/&quot; render={() =&gt; &lt;Home /&gt;} /&gt;\n            &lt;Route exact path=&quot;/notes&quot; render={() =&gt; &lt;Notes notes={this.state.notes}/&gt;} /&gt;\n            &lt;Route exact path=&quot;/notes/:id&quot; render={({match}) =&gt;\n              &lt;Note note={noteById(match.params.id)} /&gt;}\n            /&gt;\n            &lt;Route path=&quot;/users&quot; render={() =&gt;\n              this.state.user\n                ? &lt;Users /&gt;\n                : &lt;Redirect to=&quot;/login&quot; /&gt;\n              }/&gt;\n            &lt;Route path=&quot;/login&quot; render={({history}) =&gt;\n              &lt;Login history={history} onLogin={this.login} /&gt;}\n            /&gt;\n          &lt;/div&gt;\n        &lt;/Router&gt;\n        &lt;div&gt;\n          &lt;em&gt;Note app, Department of Computer Science 2018&lt;/em&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    )\n  }\n}</code></pre></div>\n<p>Render-metodissa määritellään myös kokonaan <em>Router</em>:in ulkopuolella oleva nykyisille web-sovelluksille tyypillinen <em>footer</em>-elementti, eli sivuston pohjalla oleva osa, joka on näkyvillä riippumatta siitä mikä komponentti sovelluksen reititetyssä osassa näytetään.</p>\n<p><strong>Huom:</strong> edellä olevassa esimerkissä käytetään React Routerin versiota 4.2.6. Jos ja kun etsit esimerkkejä internetistä, kannattaa varmistaa, että niissä käytetään Routerista vähintään versiota 4.0. Nelosversio ei ole ollenkaan alaspäinyhteensopiva kolmosen kanssa, eli vanhaa React Routeria käyttävä koodi on täysin käyttökelvotonta Routerin versiota 4 käytettäessä.</p>\n<h2>tehtäviä</h2>\n<p>Tee nyt tehtävät <a href=\"/teht%C3%A4v%C3%A4t#router\">6.16-6.18</a></p>","frontmatter":{"mainImage":{"publicURL":"/static/part-7-e86c21108367fe9d9c833e8905547e9c.svg"},"part":7,"letter":"a"}}},"pageContext":{"part":7,"letter":"a"}}