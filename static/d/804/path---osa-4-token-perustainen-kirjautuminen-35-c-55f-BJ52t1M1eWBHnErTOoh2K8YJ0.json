{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Käyttäjien tulee pystyä kirjautumaan sovellukseemme ja muistiinpanot pitää automaattisesti liittää kirjautuneen käyttäjän tekemiksi.</p>\n<p>Toteutamme nyt backendiin tuen <a href=\"https://scotch.io/tutorials/the-ins-and-outs-of-token-based-authentication#toc-how-token-based-works\">token-perustaiselle</a> autentikoinnille.</p>\n<p>Token-autentikaation periaatetta kuvaa seuraava sekvenssikaavio:</p>\n<picture><img src=\"/static/aa45dab9a471193ff50483ec625ac48d/14be6/16.png\" srcset=\"/static/aa45dab9a471193ff50483ec625ac48d/4cce7/16.png 200w,\n/static/aa45dab9a471193ff50483ec625ac48d/bae5f/16.png 400w,\n/static/aa45dab9a471193ff50483ec625ac48d/14be6/16.png 800w,\n/static/aa45dab9a471193ff50483ec625ac48d/1b35a/16.png 1200w,\n/static/aa45dab9a471193ff50483ec625ac48d/136ae/16.png 1598w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<ul>\n<li>\n<p>Alussa käyttäjä kirjautuu Reactilla toteutettua kirjautumislomaketta käyttäen</p>\n<ul>\n<li>lisäämme kirjautumislomakkeen frontendiin <a href=\"/osa5\">osassa 5</a></li>\n</ul>\n</li>\n<li>Tämän seurauksena selaimen React-koodi lähettää käyttäjätunnuksen ja salasanan HTTP POST -pyynnöllä palvelimen osoitteeseen <i>/api/login</i></li>\n<li>\n<p>Jos käyttäjätunnus ja salasana ovat oikein, generoi palvelin <i>tokenin</i>, joka yksilöi jollain tavalla kirjautumisen tehneen käyttäjän</p>\n<ul>\n<li>token on digitaalisesti allekirjoitettu, joten sen väärentäminen on (kryptografisesti) mahdotonta</li>\n</ul>\n</li>\n<li>backend vastaa selaimelle onnistumisesta kertovalla statuskoodilla ja palauttaa Tokenin vastauksen mukana</li>\n<li>Selain tallentaa tokenin esimerkiksi React-sovelluksen tilaan</li>\n<li>Kun käyttäjä luo uuden muistiinpanon (tai tekee jonkin operaation, joka edellyttää tunnistautumista), lähettää React-koodi Tokenin pyynnön mukana palvelimelle</li>\n<li>Palvelin tunnistaa pyynnön tekijän tokenin perusteella</li>\n</ul>\n<p>Tehdään ensin kirjautumistoiminto. Asennetaan <a href=\"https://github.com/auth0/node-jsonwebtoken\">jsonwebtoken</a>-kirjasto, jonka avulla koodimme pystyy generoimaan <a href=\"https://jwt.io/\">JSON web token</a> -muotoisia tokeneja.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> jsonwebtoken --save</code></pre></div>\n<p>Tehdään kirjautumisesta vastaava koodi tiedostoon <em>controllers/login.js</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsonwebtoken'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bcrypt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bcrypt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> loginRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nloginRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">:</span> body<span class=\"token punctuation\">.</span>username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> passwordCorrect <span class=\"token operator\">=</span>\n    user <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span>\n      <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">:</span> <span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;&amp;</span> passwordCorrect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'invalid username or password'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n    id<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>userForToken<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  response\n    <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> loginRouter<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Koodi aloittaa etsimällä pyynnön mukana olevaa <em>username</em>:a vastaavan käyttäjän tietokannasta. Seuraavaksi katsotaan onko pyynnön mukana oleva <em>password</em> oikea. Koska tietokantaan ei ole talletettu salasanaa, vaan salasanasta laskettu <em>hash</em>, tehdään vertailu metodilla <em>bcrypt.compare</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>passwordHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Jos käyttäjää ei ole olemassa tai salasana on väärä, vastataan kyselyyn statuskoodilla <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2\">401 unauthorized</a> ja kerrotaan syy vastauksen bodyssä.</p>\n<p>Jos salasana on oikein, luodaan metodin <em>jwt.sign</em> avulla token, joka sisältää kryptatussa muodossa käyttäjätunnuksen ja käyttäjän id:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  username<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n  id<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>userForToken<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Token on digitaalisesti allekirjoitettu käyttämällä <em>salaisuutena</em> ympäristömuuttujassa <em>SECRET</em> olevaa merkkijonoa. Digitaalinen allekirjoitus varmistaa sen, että ainoastaan salaisuuden tuntevilla on mahdollisuus generoida validi token. Ympäristömuuttujalle pitää muistaa asettaa arvo tiedostoon .env.</p>\n<p>Onnistuneeseen pyyntöön vastataan statuskoodilla <em>200 ok</em> ja generoitu token sekä kirjautuneen käyttäjän käyttäjätunnus ja nimi lähetetään vastauksen bodyssä pyynnön tekijälle.</p>\n<p>Kirjautumisesta huolehtiva koodi on vielä liitettävä sovellukseen lisäämällä tiedostoon <em>index.js</em> muiden routejen käyttöönoton yhteyteen</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> loginRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./controllers/login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//...</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/login'</span><span class=\"token punctuation\">,</span> loginRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Kokeillaan kirjautumista, käytetään VS Coden REST-clientiä:</p>\n<picture><img src=\"/static/03a306005b711bf48ab85efb74524f87/14be6/1.png\" srcset=\"/static/03a306005b711bf48ab85efb74524f87/4cce7/1.png 200w,\n/static/03a306005b711bf48ab85efb74524f87/bae5f/1.png 400w,\n/static/03a306005b711bf48ab85efb74524f87/14be6/1.png 800w,\n/static/03a306005b711bf48ab85efb74524f87/1b35a/1.png 1200w,\n/static/03a306005b711bf48ab85efb74524f87/fb510/1.png 1520w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Kirjautuminen ei kuitenkaan toimi, konsoli näyttää seuraavalta:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Method: POST\nPath:   /api/login\nBody:   <span class=\"token punctuation\">{</span> username: <span class=\"token string\">'mluukkai'</span>, password: <span class=\"token string\">'salainen'</span> <span class=\"token punctuation\">}</span>\n---\n<span class=\"token punctuation\">(</span>node:17486<span class=\"token punctuation\">)</span> UnhandledPromiseRejectionWarning: Unhandled promise rejection <span class=\"token punctuation\">(</span>rejection id: 2<span class=\"token punctuation\">)</span>: Error: secretOrPrivateKey must have a value</code></pre></div>\n<p>Ongelman aiheuttaa komento <em>jwt.sign(userForToken, process.env.SECRET)</em> sillä ympäristömuuttujalle <em>SECRET</em> on unohtunut määritellä arvo. Kun arvo määritellään tiedostoon <em>.env</em>, alkaa kirjautuminen toimia.</p>\n<p>Onnistunut kirjautuminen palauttaa kirjautuneen käyttäjän tiedot ja tokenin:</p>\n<picture><img src=\"/static/03a306005b711bf48ab85efb74524f87/14be6/1.png\" srcset=\"/static/03a306005b711bf48ab85efb74524f87/4cce7/1.png 200w,\n/static/03a306005b711bf48ab85efb74524f87/bae5f/1.png 400w,\n/static/03a306005b711bf48ab85efb74524f87/14be6/1.png 800w,\n/static/03a306005b711bf48ab85efb74524f87/1b35a/1.png 1200w,\n/static/03a306005b711bf48ab85efb74524f87/fb510/1.png 1520w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Virheellisellä käyttäjätunnuksella tai salasanalla kirjautuessa annetaan asianmukaisella statuskoodilla varustettu virheilmoitus</p>\n<picture><img src=\"/static/03a306005b711bf48ab85efb74524f87/14be6/1.png\" srcset=\"/static/03a306005b711bf48ab85efb74524f87/4cce7/1.png 200w,\n/static/03a306005b711bf48ab85efb74524f87/bae5f/1.png 400w,\n/static/03a306005b711bf48ab85efb74524f87/14be6/1.png 800w,\n/static/03a306005b711bf48ab85efb74524f87/1b35a/1.png 1200w,\n/static/03a306005b711bf48ab85efb74524f87/fb510/1.png 1520w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Muistiinpanojen luominen vain kirjautuneille</h3>\n<p>Muutetaan vielä muistiinpanojen luomista, siten että luominen onnistuu ainoastaan jos luomista vastaavan pyynnön mukana on validi token. Muistiinpano talletetaan tokenin identifioiman käyttäjän tekemien muistiinpanojen listaan.</p>\n<p>Tapoja tokenin välittämiseen selaimesta backendiin on useita. Käytämme ratkaisussamme <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization\">Authorization</a>-headeria. Tokenin lisäksi headerin avulla kerrotaan mistä <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#Authentication_schemes\">autentikointiskeemasta</a> on kyse. Tämä voi olla tarpeen, jos palvelin tarjoaa useita eri tapoja autentikointiin. Skeeman ilmaiseminen kertoo näissä tapauksissa palvelimelle, miten mukana olevat kredentiaalit tulee tulkita.\nMeidän käyttöömme sopii <em>Bearer</em>-skeema.</p>\n<p>Käytännössä tämä tarkoittaa, että jos token on esimerkiksi merkkijono <em>eyJhbGciOiJIUzI1NiIsInR5c2VybmFtZSI6Im1sdXVra2FpIiwiaW</em>, laitetaan pyynnöissä headerin Authorization arvoksi merkkijono</p>\n<pre>\nBearer eyJhbGciOiJIUzI1NiIsInR5c2VybmFtZSI6Im1sdXVra2FpIiwiaW\n</pre>\n<p>Modifioitu muistiinpanojen luomisesta huolehtiva koodi seuraavassa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsonwebtoken'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTokenFrom</span> <span class=\"token operator\">=</span> request <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> authorization <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'authorization'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authorization <span class=\"token operator\">&amp;&amp;</span> authorization<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bearer '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> authorization<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nnotesRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> <span class=\"token function\">getTokenFrom</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>token <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'token missing or invalid'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>content <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'content missing'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      content<span class=\"token punctuation\">:</span> body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n      important<span class=\"token punctuation\">:</span> body<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> undefined <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">:</span> body<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">,</span>\n      date<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      user<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> savedNote <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    user<span class=\"token punctuation\">.</span>notes <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>Note<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">exception</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'JsonWebTokenError'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> exception<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'something went wrong...'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Apufunktio <em>getTokenFrom</em> eristää tokenin headerista <em>authorization</em>. Tokenin oikeellisuus varmistetaan metodilla <em>jwt.verify</em>. Metodi myös dekoodaa tokenin, eli palauttaa olion, jonka perusteella token on laadittu:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tokenista dekoodatun olion sisällä on kentät <em>username</em> ja <em>id</em> eli se kertoo palvelimelle kuka pyynnön on tehnyt.</p>\n<p>Jos tokenia ei ole tai tokenista dekoodattu olio ei sisällä käyttäjän identiteettiä (eli <em>decodedToken.id</em> ei ole määritelty), palautetaan virheestä kertova statuskoodi <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2\">401 unauthorized</a> ja kerrotaan syy vastauksen bodyssä:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>token <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'token missing or invalid'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kun pyynnön tekijän identiteetti on selvillä, jatkuu suoritus entiseen tapaan.</p>\n<p>Tokenin verifiointi voi myös aiheuttaa poikkeuksen <em>JsonWebTokenError</em>. Syynä tälle voi olla viallinen, väärennetty tai eliniältään vanhentunut token. Poikkeusten käsittelyssä haaraudutaan virheen tyypin perusteella ja vastataan 401 jos poikkeus johtuu tokenista, ja muuten vastataan <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1\">500 internal server error</a>.</p>\n<p>Uuden muistiinpanon luominen onnistuu nyt postmanilla jos <em>authorization</em>-headerille asetetaan oikeanlainen arvo, eli merkkijono <em>bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ</em>, missä osa on <em>login</em>-operaation palauttama token.</p>\n<p>Postmanilla luominen näyttää seuraavalta</p>\n<picture><img src=\"/static/03a306005b711bf48ab85efb74524f87/14be6/1.png\" srcset=\"/static/03a306005b711bf48ab85efb74524f87/4cce7/1.png 200w,\n/static/03a306005b711bf48ab85efb74524f87/bae5f/1.png 400w,\n/static/03a306005b711bf48ab85efb74524f87/14be6/1.png 800w,\n/static/03a306005b711bf48ab85efb74524f87/1b35a/1.png 1200w,\n/static/03a306005b711bf48ab85efb74524f87/fb510/1.png 1520w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>ja Visual Studio Coden REST clientillä</p>\n<picture><img src=\"/static/03a306005b711bf48ab85efb74524f87/14be6/1.png\" srcset=\"/static/03a306005b711bf48ab85efb74524f87/4cce7/1.png 200w,\n/static/03a306005b711bf48ab85efb74524f87/bae5f/1.png 400w,\n/static/03a306005b711bf48ab85efb74524f87/14be6/1.png 800w,\n/static/03a306005b711bf48ab85efb74524f87/1b35a/1.png 1200w,\n/static/03a306005b711bf48ab85efb74524f87/fb510/1.png 1520w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Sovelluksen tämänhetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/fullstack-hy2019/part3-notes-backend/tree/part4-6\">githubissa</a>, tagissa <em>part4-6</em>.</p>\n<p>Jos sovelluksessa on useampia rajapintoja jotka vaativat kirjautumisen kannattaa JWT:n validointi eriyttää omaksi middlewarekseen, tai käyttää jotain jo olemassa olevaa kirjastoa kuten <a href=\"https://www.npmjs.com/package/express-jwt\">express-jwt</a>.</p>\n<h3>Loppuhuomioita</h3>\n<p>Koodissa on tapahtunut paljon muutoksia ja matkan varrella on tapahtunut tyypillinen kiivaasti etenevän ohjelmistoprojektin ilmiö: suuri osa testeistä on hajonnut. Koska kurssin tämä osa on jo muutenkin täynnä uutta asiaa, jätämme testien korjailun harjoitustehtäväksi.</p>\n<p>Käyttäjätunnuksia, salasanoja ja tokenautentikaatiota hyödyntäviä sovelluksia tulee aina käyttää salatun <a href=\"https://en.wikipedia.org/wiki/HTTPS\">HTTPS</a>-yhteyden yli. Voimme käyttää sovelluksissamme Noden <a href=\"https://nodejs.org/docs/latest-v8.x/api/http.html\">HTTP</a>-serverin sijaan <a href=\"https://nodejs.org/api/https.html\">HTTPS</a>-serveriä (se vaatii lisää konfiguraatiota). Toisaalta koska sovelluksemme tuotantoversio on Herokussa, sovelluksemme pysyy käyttäjien kannalta suojattuna sen ansiosta, että Heroku reitittää kaiken liikenteen selaimen ja Herokun palvelimien välillä HTTPS:n yli.</p>\n<p>Toteutamme kirjautumisen frontendin puolelle kurssin <a href=\"/osa5\">seuraavassa osassa</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Tehtäviä</h3>\n<p>Seuraavien tehtävien myötä Blogilistalle luodaan käyttäjienhallinnan perusteet. Varminta on seurata melko tarkkaan osan 4 luvusta <a href=\"/osa4#k%C3%A4ytt%C3%A4jien-hallinta-ja-monimutkaisempi-tietokantaskeema\">Käyttäjien hallinta ja monimutkaisempi tietokantaskeema</a> alkavaa tarinaa. Toki luovuus on sallittua.</p>\n<p><strong>Varoitus vielä kerran:</strong> jos huomaat kirjoittavasi sekaisin async/awaitia ja <em>then</em>-kutsuja, on 99% varmaa, että teet jotain väärin. Käytä siis jompaa kumpaa tapaa, älä missään tapauksessa \"varalta\" molempia.</p>\n<h4>4.15: blogilistan laajennus, osa 4</h4>\n<p>Tee sovellukseen mahdollisuus luoda käyttäjiä tekemällä HTTP POST -pyyntö osoitteeseen <em>api/users</em>. Käyttäjillä on käyttäjätunnus, salasana ja nimi sekä totuusarvoinen kenttä, joka kertoo onko käyttäjä täysi-ikäinen.</p>\n<p>Älä talleta tietokantaan salasanoja selväkielisenä vaan käytä osan 4 luvun <a href=\"/osa4#k%C3%A4ytt%C3%A4jien-luominen\">Käyttäjien luominen</a> tapaan <em>bcrypt</em>-kirjastoa.</p>\n<p><strong>HUOM</strong> joillain windows-käyttäjillä on ollut ongelmia <em>bcrypt</em>:in kanssa. Jos törmäät ongelmiin, poista kirjasto komennolla</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> uninstall bcrypt --save </code></pre></div>\n<p>ja asenna sen sijaan <a href=\"https://www.npmjs.com/package/bcryptjs\">bcryptjs</a></p>\n<p>Tee järjestelmään myös mahdollisuus katsoa kaikkien käyttäjien tiedot sopivalla HTTP-pyynnöllä.</p>\n<p>Käyttäjien lista voi näyttää esim. seuraavalta:</p>\n<picture><img src=\"/static/03a306005b711bf48ab85efb74524f87/14be6/1.png\" srcset=\"/static/03a306005b711bf48ab85efb74524f87/4cce7/1.png 200w,\n/static/03a306005b711bf48ab85efb74524f87/bae5f/1.png 400w,\n/static/03a306005b711bf48ab85efb74524f87/14be6/1.png 800w,\n/static/03a306005b711bf48ab85efb74524f87/1b35a/1.png 1200w,\n/static/03a306005b711bf48ab85efb74524f87/fb510/1.png 1520w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>4.16*: blogilistan laajennus, osa 5</h4>\n<p>Laajenna käyttäjätunnusten luomista siten, että salasanan tulee olla vähintään 3 merkkiä pitkä ja käyttäjätunnus on järjestelmässä uniikki. Jos täysi-ikäisyydelle ei määritellä luotaessa arvoa, on se oletusarvoisesti true.</p>\n<p>Luomisoperaation tulee palauttaa sopiva statuskoodi ja kuvaava virheilmoitus, jos yritetään luoda epävalidi käyttäjä.</p>\n<p>Tee testit, jotka varmistavat, että virheellisiä käyttäjiä ei luoda, ja että virheellisen käyttäjän luomisoperaatioon vastaus on järkevä statuskoodin ja virheilmoituksen osalta.</p>\n<h4>4.17: blogilistan laajennus, osa 6</h4>\n<p>Laajenna blogia siten, että blogiin tulee tieto sen lisänneestä käyttäjästä.</p>\n<p>Muokkaa blogien lisäystä osan 4 luvun <a href=\"/osa4/#populate\">populate</a> tapaan siten, että blogin lisäämisen yhteydessä määritellään blogin lisääjäksi <em>joku</em> järjestelmän tietokannassa olevista käyttäjistä (esim. ensimmäisenä löytyvä). Tässä vaiheessa ei ole väliä kuka käyttäjistä määritellään lisääväksi. Toiminnallisuus viimeistellään tehtävässä 4.19.</p>\n<p>Muokaa kaikkien blogien listausta siten, että blogien yhteydessä näytetään lisääjän tiedot:</p>\n<picture><img src=\"/static/03a306005b711bf48ab85efb74524f87/14be6/1.png\" srcset=\"/static/03a306005b711bf48ab85efb74524f87/4cce7/1.png 200w,\n/static/03a306005b711bf48ab85efb74524f87/bae5f/1.png 400w,\n/static/03a306005b711bf48ab85efb74524f87/14be6/1.png 800w,\n/static/03a306005b711bf48ab85efb74524f87/1b35a/1.png 1200w,\n/static/03a306005b711bf48ab85efb74524f87/fb510/1.png 1520w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>ja käyttäjien listausta siten että käyttäjien lisäämät blogit ovat näkyvillä</p>\n<picture><img src=\"/static/03a306005b711bf48ab85efb74524f87/14be6/1.png\" srcset=\"/static/03a306005b711bf48ab85efb74524f87/4cce7/1.png 200w,\n/static/03a306005b711bf48ab85efb74524f87/bae5f/1.png 400w,\n/static/03a306005b711bf48ab85efb74524f87/14be6/1.png 800w,\n/static/03a306005b711bf48ab85efb74524f87/1b35a/1.png 1200w,\n/static/03a306005b711bf48ab85efb74524f87/fb510/1.png 1520w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>4.18: blogilistan laajennus, osa 7</h4>\n<p>Toteuta osan 4 luvun <a href=\"/osa4#kirjautuminen\">Kirjautuminen</a> tapaan järjestelmään token-perustainen autentikointi.</p>\n<h4>4.19: blogilistan laajennus, osa 8</h4>\n<p>Muuta blogien lisäämistä siten, että se on mahdollista vain, jos lisäyksen tekevässä HTTP POST -pyynnössä on mukana validi token. Tokenin haltija määritellään blogin lisääjäksi.</p>\n<h4>4.20*: blogilistan laajennus, osa 9</h4>\n<p>Osan 4 <a href=\"/osa4#kirjautuminen\">esimerkissä</a> token otetaan headereista apufunktion <em>getTokenFrom</em> avulla.</p>\n<p>Jos käytit samaa ratkaisua, refaktoroi tokenin erottaminen <a href=\"/osa3#middlewaret\">middlewareksi</a>, joka ottaa tokenin <em>Authorization</em>-headerista ja sijoittaa sen <em>request</em>-olion kenttään <em>token</em>.</p>\n<p>Eli kun rekisteröit middlewaren ennen routeja tiedostossa <em>index.js</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">.</span>tokenExtractor<span class=\"token punctuation\">)</span></code></pre></div>\n<p>pääsevät routet tokeniin käsiksi suoraan viittaamalla <em>request.token</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">blogsRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n  <span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SECRET</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>4.21*: blogilistan laajennus, osa 10</h4>\n<p>Muuta blogin poistavaa operaatiota siten, että poisto onnistuu ainoastaan jos poisto-operaation tekijä (eli se kenen token on pyynnön mukana) on sama kuin blogin lisääjä.</p>\n<p>Jos poistoa yritetään ilman tokenia tai väärän käyttäjän toimesta, tulee operaation palauttaa asiaan kuuluva statuskoodi.</p>\n<p>Huomaa, että jos haet blogin tietokannasta</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> blog <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Blog<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ei kenttä <em>blog.user</em> ole tyypiltään merkkijono vaan <em>object</em>. Eli jos haluat verrata kannasta haetun olion id:tä merkkijonomuodossa olevaan id:hen, ei normaali vertailu toimi. Kannasta haettu id tulee muuttaa vertailua varten merkkijonoksi:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> blog<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> userid<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">...</span></code></pre></div>\n<!---\nnote left of kayttaja\n  käyttäjä täyttää kirjautumislomakkeelle\n  käyttäjätunnuksen ja salasanan\nend note\nkayttaja -> selain: painetaan login-nappia\n\nselain -> backend: HTTP POST /api/login {username, password}\nnote left of backend\n  backend generoi käyttäjän identifioivan TOKENin\nend note\nbackend -> selain: TOKEN palautetaan vastauksen bodyssä\nnote left of selain\n  selain tallettaa TOKENin\nend note\nnote left of kayttaja\n  käyttäjä luo uden muistiinpanon\nend note\nkayttaja -> selain: painetaan create note -nappia\nselain -> backend: HTTP POST /api/notes {content} headereissa TOKEN\nnote left of backend\n  backend tunnistaa TOKENin perusteella kuka käyttää kyseessä\nend note\n\nbackend -> selain: 201 created\n\nkayttaja -> kayttaja:\n-->\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/part-4-5c308a7f2485495a6c24db46e9910185.svg"},"part":4,"letter":"d"}}},"pageContext":{"part":4,"letter":"d"}}