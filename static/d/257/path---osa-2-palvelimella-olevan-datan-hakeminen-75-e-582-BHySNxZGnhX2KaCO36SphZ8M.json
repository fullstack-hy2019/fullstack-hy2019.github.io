{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Olemme nyt viipyneet tovin keskittyen pelkkään \"frontendiin\", eli selainpuolen toiminnallisuuteen. Rupeamme itse toteuttamaan \"backendin\", eli palvelinpuolen toiminnallisuutta vasta kurssin kolmannessa osassa, mutta otamme nyt jo askeleen sinne suuntaan tutustumalla siihen, miten selaimessa suoritettava koodi kommunikoi backendin kanssa.</p>\n<pre><code class=\"language-js\">         10        20        30        40        50        60        70        80\n</code></pre>\n<p>Käytetään nyt palvelimena sovelluskehitykseen tarkoitettua <a href=\"https://github.com/typicode/json-server\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JSON Serveriä</a>.</p>\n<p>Tehdään projektin juurihakemistoon tiedosto <em>db.json</em>, jolla on seuraava sisältö:</p>\n<pre><code class=\"language-json\">{\n  \"notes\": [\n    {\n      \"id\": 1,\n      \"content\": \"HTML on helppoa\",\n      \"date\": \"2019-01-10T17:30:31.098Z\",\n      \"important\": true\n    },\n    {\n      \"id\": 2,\n      \"content\": \"Selain pystyy suorittamaan vain javascriptiä\",\n      \"date\": \"2019-01-10T18:39:34.091Z\",\n      \"important\": false\n    },\n    {\n      \"id\": 3,\n      \"content\": \"HTTP-protokollan tärkeimmät metodit ovat GET ja POST\",\n      \"date\": \"2019-01-10T19:20:14.298Z\",\n      \"important\": true\n    }\n  ]\n}\n</code></pre>\n<p>JSON server on mahdollista <a href=\"https://github.com/typicode/json-server#install\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">asentaa</a> koneelle ns. globaalisti komennolla <em>npm install -g json-server</em>. Globaali asennus edellyttää kuitenkin pääkäyttäjän oikeuksia, eli se ei ole mahdollista laitoksen koneilla tai uusilla fuksiläppäreillä.</p>\n<p>Globaali asennus ei kuitenkaan ole tarpeen, voimme käynnistää <em>json-serverin</em> komennon <em>npx</em> avulla:</p>\n<pre><code class=\"language-js\">npx json-server --port=3001 --watch db.json\n</code></pre>\n<p>Oletusarvoisesti <em>json-server</em> käynnistyy porttiin 3000, mutta create-react-app:illa luodut projektit varaavat portin 3000, joten joudumme nyt määrittelemään json-server:ille vaihtoehtoisen portin 3001.</p>\n<p>Mennään selaimella osoitteeseen <a href=\"http://localhost:3001/notes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:3001/notes</a>. Kuten huomaamme, <em>json-server</em> tarjoaa osoitteessa tiedostoon tallentamamme muistiinpanot JSON-muodossa:</p>\n<p><img src=\"../images/2/14b.png\"></p>\n<p>Jos selaimesi ei osaa näyttää JSON-muotoista dataa formatoituna, asenna jokin sopiva plugin, esim. <a href=\"https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JSONView</a>\nhelpottamaan elämääsi.</p>\n<p>Ideana jatkossa onkin se, että muistiinpanot talletetaan palvelimelle, eli tässä vaiheessa <em>json-server</em>:ille. React-koodi lataa muistiinpanot palvelimelta ja renderöi ne ruudulle. Kun sovellukseen lisätään uusi muistiinpano, React-koodi lähettää sen myös palvelimelle, jotta uudet muistiinpanot jäävät pysyvästi \"muistiin\".</p>\n<p>json-server tallettaa kaiken datan palvelimella sijaitsevaan tiedostoon <em>db.json</em>. Todellisuudessa data tullaan tallentamaan johonkin tietokantaan. json-server on kuitenkin käyttökelpoinen apuväline, joka mahdollistaa palvelinpuolen toiminnallisuuden käyttämisen kehitysvaiheessa ilman tarvetta itse ohjelmoida mitään.</p>\n<p>Tutustumme palvelinpuolen toteuttamisen periaatteisiin tarkemmin kurssin <a href=\"/osa3\">osassa 3</a>.</p>\n<h3>Selain suoritusympäristönä</h3>\n<p>Ensimmäisenä tehtävänämme on siis hakea React-sovellukseen jo olemassaolevat mustiinpanot osoitteesta <a href=\"http://localhost:3001/notes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:3001/notes</a>.</p>\n<p>Osan 0 <a href=\"/osa0#selaimessa-suoritettava-sovelluslogiikka\">esimerkkiprojektissa</a> nähtiin jo eräs tapa hakea Javascript-koodista palvelimella olevaa dataa. Esimerkin koodissa data haettiin <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">XMLHttpRequest</a>- eli XHR-olion avulla muodostetulla HTTP-pyynnöllä. Kyseessä on vuonna 1999 lanseerattu tekniikka, jota kaikki web-selaimet ovat jo pitkään tukeneet.</p>\n<p>Nykyään XHR:ää ei kuitenkaan kannata käyttää ja selaimet tukevatkin jo laajasti <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fetch</a>-metodia, joka perustuu XHR:n käyttämän tapahtumapohjaisen mallin sijaan ns. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">promiseihin</a>.</p>\n<p>Muistutuksena edellisestä osasta (oikeastaan tätä tapaa pitää lähinnä <i>muistaa olla käyttämättä</i> ilman painavaa syytä), XHR:llä haettiin dataa seuraavasti</p>\n<pre><code class=\"language-js\">const xhttp = new XMLHttpRequest();\n\nxhttp.onreadystatechange = function() {\n  if (this.readyState == 4 &#x26;&#x26; this.status == 200) {\n    const data = JSON.parse(this.responseText);\n    // käsittele muuttujaan data sijoitettu kyselyn tulos\n  }\n};\n\nxhttp.open('GET', '/data.json', true);\nxhttp.send();\n</code></pre>\n<p>Heti alussa HTTP-pyyntöä vastaavalle <code>xhttp</code>-oliolle rekisteröidään <i>tapahtumankäsittelijä</i>, jota Javascript runtime kutsuu kun <code>xhttp</code>-olion tila muuttuu. Jos tilanmuutos tarkoittaa että pyynnön vastaus on saapunut, käsitellään data halutulla tavalla.</p>\n<p>Huomionarvoista on se, että tapahtumankäsittelijän koodi on määritelty jo ennen kun itse pyyntö lähetetään palvelimelle. Tapahtumankäsittelijäfunktio tullaan kuitenkin suorittamaan vasta jossain myöhäisemmässä vaiheessa. Koodin suoritus ei siis etene synkronisesti \"ylhäältä alas\", vaan <i>asynkronisesti</i>, Javascript kutsuu sille rekisteröityä tapahtumankäsittelijäfunktiota jossain vaiheessa.</p>\n<p>Esim. Java-ohjelmoinnista tuttu synkroninen tapa tehdä kyselyjä etenisi seuraavaan tapaan (huomaa että kyse ei ole oikeasti toimivasta Java-koodista):</p>\n<pre><code class=\"language-java\">HTTPRequest request = new HTTPRequest()\n\nString url = \"https://fullstack-exampleapp.herokuapp.com/data.json\";\nList&#x3C;Muistiinpano> muistiinpanot = request.get(url);\n\nmuistiinpanot.forEach(m => {\n  System.out.println(m.content);\n})\n</code></pre>\n<p>Javassa koodi etenee nyt rivi riviltä ja koodi pysähtyy odottamaan HTTP-pyynnön, eli komennon <em>request.get(...)</em> valmistumista. Komennon palauttama data, eli muistiinpanot talletetaan muuttujaan ja dataa aletaan käsittelemään halutulla tavalla.</p>\n<p>Javascript-enginet eli suoritusympäristöt kuitenkin noudattavat <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">asynkronista mallia</a>, eli periaatteena on se, että kaikki <a href=\"https://en.wikipedia.org/wiki/Input/output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IO-operaatiot</a> (poislukien muutama poikkeus) suoritetaan ei-blokkaavana, eli operaatioiden tulosta ei jäädä odottamaan vaan koodin suoritusta jatketaan heti eteenpäin.</p>\n<p>Siinä vaiheessa kun operaatio valmistuu tai tarkemmin sanoen jonain valmistumisen jälkeisenä ajanhetkenä, kutsuu Javascript-engine operaatiolle rekisteröityjä tapahtumankäsittelijöitä.</p>\n<p>Nykyisellään Javascript-moottorit ovat <i>yksisäikeisiä</i> eli ne eivät voi suorittaa rinnakkaista koodia. Tämän takia on käytännössä pakko käyttää ei-blokkaavaa mallia IO-operaatioiden suorittamiseen, sillä muuten selain 'jäätyisi' siksi aikaa kun esim. palvelimelta haetaan dataa.</p>\n<p>Javascript-moottoreiden yksisäikeisyydellä on myös sellainen seuraus, että jos koodin suoritus kestää erittäin pitkään, menee selain jumiin suorituksen ajaksi. Jos lisätään sovelluksen alkuun seuraava koodi:</p>\n<pre><code class=\"language-js\">setTimeout(() => {\n  console.log('loop..');\n  let i = 0;\n  while (i &#x3C; 50000000000) {\n    i++;\n  }\n  console.log('end');\n}, 5000);\n</code></pre>\n<p>Kaikki toimii 5 sekunnin ajan normaalisti. Kun <code>setTimeout</code>:in parametrina määritelty funktio suoritetaan, menee selaimen sivu jumiin pitkän loopin suorituksen ajaksi. Ainakaan Chromessa selaimen tabia ei pysty edes sulkemaan luupin suorituksen aikana.</p>\n<p>Eli jotta selain säilyy <i>responsiivisena</i>, eli että se reagoi koko ajan riittävän nopeasti käyttäjän haluamiin toimenpiteisiin, koodin logiikan tulee olla sellainen, että yksittäinen laskenta ei saa kestää liian kauaa.</p>\n<p>Aiheesta löytyy paljon lisämateriaalia internetistä, eräs varsin havainnollinen esitys aiheesta Philip Robertsin esitelmä <a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">What the heck is the event loop anyway?</a></p>\n<p>Nykyään selaimissa on mahdollisuus suorittaa myös rinnakkaista koodia ns. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">web workerien</a> avulla. Yksittäisen selainikkunan koodin ns. event loopista huolehtii kuitenkin edelleen <a href=\"https://medium.com/techtrument/multithreading-javascript-46156179cf9a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vain yksi säie</a>.</p>\n<h3>npm</h3>\n<p>Palaamme jälleen asiaan, eli datan hakemiseen palvelimelta.</p>\n<p>Voisimme käyttää datan palvelimelta hakemiseen aiemmin mainittua promiseihin perustuvaa funktiota <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fetch</a>. Fetch on hyvä työkalu, se on standardoitu ja kaikkien modernien selaimien (poislukien IE) tukema.</p>\n<p>Käytetään selaimen ja palvelimen väliseen kommunikaatioon kuitenkin <a href=\"https://github.com/axios/axios\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">axios</a>-kirjastoa, joka toimii samaan tapaan kuin fetch, mutta on hieman mukavampikäyttöinen. Hyvä syy axios:in käytölle on myös se, että pääsemme tutustumaan siihen miten ulkopuolisia kirjastoja eli <i>npm-paketteja</i> liitetään React-projektiin.</p>\n<p>Nykyään lähes kaikki Javascript-projektit määritellään node \"pakkausmanagerin\" eli <a href=\"https://docs.npmjs.com/getting-started/what-is-npm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">npm</a>:n avulla. Myös create-react-app:in avulla generoidut projektit ovat npm-muotoisia projekteja. Varma tuntomerkki siitä on projektin juuressa oleva tiedosto <code>package.json:</code></p>\n<pre><code class=\"language-json\">{\n  \"name\": \"notes\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"^16.7.0-alpha.2\",\n    \"react-dom\": \"^16.7.0-alpha.2\",\n    \"react-scripts\": \"2.1.3\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": \"react-app\"\n  },\n  \"browserslist\": [\n    \">0.2%\",\n    \"not dead\",\n    \"not ie &#x3C;= 11\",\n    \"not op_mini all\"\n  ]\n}\n</code></pre>\n<p>Tässä vaiheessa meitä kiinnostaa osa <code>dependencies</code>, joka määrittelee mitä <i>riippuvuuksia</i> eli ulkoisia kirjastoja projektilla on.</p>\n<p>Haluamme nyt käyttöömme axioksen. Voisimme määritellä kirjaston suoraan tiedostoon <i>package.json</i>, mutta on parempi asentaa se komentoriviltä</p>\n<pre><code class=\"language-js\">npm install axios --save\n</code></pre>\n<p><strong>Huomaa, että <em>npm</em>-komennot tulee antaa aina projektin juurihakemistossa</strong>, eli siinä minkä sisältä tiedosto <em>package.json</em> löytyy.</p>\n<p>Nyt axios on mukana riippuvuuksien joukossa:</p>\n<pre><code class=\"language-json\">{\n  \"dependencies\": {\n    \"axios\": \"^0.18.0\", // highlight-line\n    \"json-server\": \"^0.14.2\",\n    \"react\": \"^16.7.0-alpha.2\",\n    \"react-dom\": \"^16.7.0-alpha.2\",\n    \"react-scripts\": \"2.1.3\"\n  },\n  // ...\n}\n</code></pre>\n<p>Sen lisäksi, että komento <code>npm install</code> lisäsi axiosin riippuvuuksien joukkoon, se myös <i>latasi</i> kirjaston koodin. Koodi löytyy muiden riippuvuuksien tapaan projektin juuren hakemistosta <code>node_modules</code>, mikä kuten huomata saattaa sisältääkin runsaasti kaikenlaista.</p>\n<p>Tehdään toinenkin pieni lisäys. Asennetaan myös <code>json-server</code> projektin riippuvuudeksi komennolla</p>\n<pre><code class=\"language-js\">npm install json-server --save\n</code></pre>\n<p>ja tehdään tiedoston <code>package.json</code> osaan <code>scripts</code> pieni lisäys</p>\n<pre><code class=\"language-json\">{\n  // ... \n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\",\n    \"server\": \"json-server -p3001 db.json\"  // highlight-line\n  }\n}\n</code></pre>\n<p>Nyt voimme käynnistää  json-serverin projektin hakemistosta mukavasti ilman tarvetta parametrien määrittelylle komennolla</p>\n<pre><code class=\"language-js\">npm run server\n</code></pre>\n<p>Tutustumme <em>npm</em>-työkaluun tarkemmin kurssin <a href=\"/osa3\">kolmannessa osassa</a>.</p>\n<p>Huomaa, että aiemmin käynnistetty json-server tulee olla sammutettuna, muuten seuraa ongelmia</p>\n<p><img src=\"../images/2/15b.png\"></p>\n<p>Virheilmoituksen punaisella oleva teksti kertoo mistä on kyse: </p>\n<p><i>Cannot bind to the port 3001. Please specify another port number either through --port argument or through the json-server.json configuration file</i> </p>\n<p>eli sovellus ei onnistu käynnistyessään kytkemään itseään <a href=\"https://en.wikipedia.org/wiki/Port_(computer_networking)\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">porttiin</a>, syy tälle on se, että portti 3001 on jo aiemmin käynnistetyn json-serverin varaama.</p>\n<h3>Axios ja promiset</h3>\n<p>Olemme nyt valmiina käyttämään axiosia. Jatkossa oletetaan että <em>json-server</em> on käynnissä portissa 3001.</p>\n<p>Kirjaston voi ottaa käyttöön samaan tapaan kuin esim. React otetaan käyttöön, eli sopivalla <code>import</code>-lauseella.</p>\n<p>Lisätään seuraava tiedostoon <code>index.js</code></p>\n<pre><code class=\"language-js\">import axios from 'axios'\n\nconst promise = axios.get('http://localhost:3001/notes')\nconsole.log(promise)\n\nconst promise2 = axios.get('http://localhost:3001/foobar')\nconsole.log(promise2)\n</code></pre>\n<p>Konsoliin tulostuu seuraavaa</p>\n<p><img src=\"../images/2/16b.png\"></p>\n<p>Axiosin metodi <em>get</em> palauttaa <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">promisen</a>.</p>\n<p>Mozillan dokumentaatio sanoo promisesta seuraavaa:</p>\n<blockquote>\n<p>A Promise is an object representing the eventual completion or failure of an asynchronous operation.</p>\n</blockquote>\n<p>Promise siis edustaa asynkronista operaatiota. Promise voi olla kolmessa eri tilassa:</p>\n<ul>\n<li>aluksi promise on <i>pending</i>, eli promisea vastaava asynkroninen operaatio ei ole vielä tapahtunut</li>\n<li>jos operaatio päättyy onnistuneesti, menee promise tilaan <i>fulfilled</i>, josta joskus käytetään nimitystä <i>resolved</i></li>\n<li>kolmas mahdollinen tila on <i>rejected</i>, joka edustaa epäonnistunutta operaatiota</li>\n</ul>\n<p>Esimerkkimme ensimmäinen promise on <i>fulfilled</i>, eli vastaa onnistunutta <code>axios.get('<a href=\"http://localhost:3001/notes&#x27;\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:3001/notes'</a>)</code> pyyntöä. Promiseista toinen taas on <i>rejected</i>, syy selviää konsolista, eli yritettiin tehdä HTTP GET -pyyntöä osoitteeseen, jota ei ole olemassa.</p>\n<p>Jos ja kun haluamme tietoon promisea vastaavan operaation tuloksen, tulee promiselle rekisteröidä tapahtumankuuntelija. Tämä tapahtuu metodilla <code>then</code>:</p>\n<pre><code class=\"language-js\">const promise = axios.get('http://localhost:3001/notes')\n\npromise.then(response => {\n  console.log(response)\n})\n</code></pre>\n<p>Konsoliin tulostuu seuraavaa</p>\n<p><img src=\"../images/2/17b.png\"></p>\n<p>Javascriptin suoritusympäristö kutsuu <code>then</code>_-metodin avulla rekisteröityä takaisinkutsufunktiota antaen sille parametriksi olion <code>result</code>, joka sisältää kaiken oleellisen HTTP GET -pyynnön vastaukseen liittyvän, eli palautetun <i>datan</i>, <i>statuskoodin</i> ja <i>headerit</i>.</p>\n<p>Promise-olioa ei ole yleensä tarvetta tallettaa muuttujaan, ja onkin tapana ketjuttaa metodin <code>then</code> kutsu suoraan axiosin metodin kutsun perään:</p>\n<pre><code class=\"language-js\">axios.get('http://localhost:3001/notes').then(response => {\n  const notes = response.data\n  console.log(notes)\n})\n</code></pre>\n<p>Takaisinkutsufunktio ottaa nyt vastauksen sisällä olevan datan muuttujaan ja tulostaa muistiinpanot konsoliin.</p>\n<p>Luettavampi tapa formatoida <i>ketjutettuja</i> metodikutsuja on sijoittaa jokainen kutsu omalle rivilleen:</p>\n<pre><code class=\"language-js\">axios\n  .get('http://localhost:3001/notes')\n  .then(response => {\n    const notes = response.data\n    console.log(notes)\n  })\n</code></pre>\n<p>näin jo nopea, ruudun vasempaan laitaan kohdistunut vilkaisu kertoo mistä on kyse.</p>\n<p>Palvelimen palauttama data on pelkkää tekstiä, käytännössä yksi iso merkkijono.\nAxios-kirjasto osaa kuitenkin parsia datan Javascript-taulukoksi, sillä palvelin on kertonut headerin <code>content-type</code> avulla että datan muoto on <code>application/json; charset=utf-8</code> (ks. edellinen kuva).</p>\n<p>Voimme vihdoin siirtyä käyttämään sovelluksessamme palvelimelta haettavaa dataa.</p>\n<p>Tehdään se aluksi \"huonosti\", eli lisätään sovellusta vastaavan komponentin <code>App</code> renderöinti takaisinkutsufunktion sisälle muuttamalla <code>index.js</code> seuraavaan muotoon:</p>\n<pre><code class=\"language-js\">import ReactDOM from 'react-dom'\nimport React from 'react'\nimport App from './App'\n\nimport axios from 'axios'\n\naxios.get('http://localhost:3001/notes').then(response => {\n  const notes = response.data\n  ReactDOM.render(\n    &#x3C;App notes={notes} />,\n    document.getElementById('root')\n  )\n})\n</code></pre>\n<p>Joissain tilanteissa tämäkin tapa voisi olla ok, mutta se on hieman ongelmallinen ja päätetäänkin siirtää datan hakeminen komponenttiin <code>App</code>.</p>\n<p>Ei ole kuitenkaan ihan selvää, mihin kohtaan komponentin koodia komento <code>axios.get</code> olisi hyvä sijoittaa.</p>\n<h3>Effect-hookit</h3>\n<p>Olemme jo käyttäneet Reactin version <a href=\"https://www.npmjs.com/package/react/v/16.7.0-alpha.2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">16.7.0-alpha.2</a> mukanaan tuomia <a href=\"https://reactjs.org/docs/hooks-state.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">state hookeja</a> tuomaan funktioina määriteltyihin React-komponentteihin tilan. Versio 16.7.0-alpha.2 tarjoaa myös\n<a href=\"https://reactjs.org/docs/hooks-effect.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">effect hookit</a>, dokumentaation sanoin</p>\n<blockquote>\n<p>The Effect Hook lets you perform side effects in function components\nData fetching, setting up a subscription, and manually changing the DOM in React components are all examples of side effects. </p>\n</blockquote>\n<p>Eli effect hookit ovat juuri oikea tapa hakea dataa palvelimelta.</p>\n<p>Poistetaan nyt datan hakeminen tiedostosta <code>index.js</code>. Komponentille <code>App</code> ei ole enää tarvetta välittää dataa propseina. Eli  <code>index.js</code> pelkistyy seuraavaan muotoon</p>\n<pre><code class=\"language-js\">ReactDOM.render(&#x3C;App />, document.getElementById('root'))\n</code></pre>\n<p>Komponentti <code>App</code> muuttuu seuraavasti:</p>\n<pre><code class=\"language-js\">import React, { useState, useEffect } from 'react' // highlight-line\nimport axios from 'axios' // highlight-line\nimport Note from './components/Note'\n\nconst App = () => {\n  const [notes, setNotes] = useState([]) \n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n\n// highlight-start\n  useEffect(() => {\n    console.log('effect')\n    axios.get('http://localhost:3001/notes').then(response => {\n      console.log('promise fulfilled')\n      setNotes(response.data)\n    })\n  }, [])\n\n  console.log('render', notes.length, 'notes')\n// highlight-end\n\n  // ...\n}\n</code></pre>\n<p>Koodiin on myös lisätty muutama aputulostus, jotka auttavat hahmottamaan miten suoritus etenee.</p>\n<p>Konsoliin tulostuu</p>\n<pre>\nrender 0 notes\neffect\npromise fulfilled\nrender 3 notes\n</pre>\n<p>Ensin siis suoritetaan komponentin määrittelevan funktion runko ja renderöidään komponentti ensimmäistä kertaa. Tässä vaiheessa tulostuu <i>render 0 notes</i> eli dataa ei ole vielä haettu palvelimelta.</p>\n<p>Efekti, eli funktio </p>\n<pre><code class=\"language-js\">() => {\n  console.log('effect')\n  axios.get('http://localhost:3001/notes').then(response => {\n    console.log('promise fulfilled')\n    setNotes(response.data)\n  })\n}\n</code></pre>\n<p>suoritetaan heti renderöinnin jälkeen. Funktion suoritus saa aikaan sen, että konsoliin tulostuu <i>effect</i> ja että komento <code>axios.get</code> aloittaa datan hakemisen palvelimelta ja rekisteröi operaatiolle <i>tapahtumankäsittelijksi</i> funktion</p>\n<pre><code class=\"language-js\">response => {\n  console.log('promise fulfilled')\n  setNotes(response.data)\n})\n</code></pre>\n<p>Siinä vaiheessa kun data saapuu palvelimelta Javascriptin runtime kutsuu rekisteröityä tapahtumankäsittelijäfunktiota, joka tulostaa konsoliin <i>promise fulfilled</i> sekä tallettaa tilaan palvelimen palauttamat muistiinpanot funktiolla <code>setNotes(response.data)</code>.</p>\n<p>Kuten aina tilan päivittävän funktion kutsu aiheuttaa funktion uudelleen renderöitymisen. Tämän seurauksena konsoliin tulostuu <i>render 3 notes</i>.</p>\n<p>Tarkastellaan vielä efektihookin määrittelyä kokonaisuudessaan</p>\n<pre><code class=\"language-js\">useEffect(() => {\n  console.log('effect')\n  axios.get('http://localhost:3001/notes').then(response => {\n    console.log('promise fulfilled')\n    setNotes(response.data)\n  })\n}, [])\n</code></pre>\n<p>Kirjotetaan koodi hieman toisella tavalla. </p>\n<pre><code class=\"language-js\">const hook = () => {\n  console.log('effect')\n  axios.get('http://localhost:3001/notes').then(response => {\n    console.log('promise fulfilled')\n    setNotes(response.data)\n  })\n}\n\nuseEffect(hook, [])\n</code></pre>\n<p>Nyt huomaamme selvemmin, että funktiolle <a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">useEffect</a> annetaan kaksi parametria. Näistä ensimmäinen on funktio, eli itse <i>efekti</i>. Dokumentaation mukaan</p>\n<blockquote>\n<p>By default, effects run after every completed render, but you can choose to fire it only when certain values have changed.</p>\n</blockquote>\n<p>Eli oletusarvoisesti efekti suoritetaan <i>aina</i> kun komponentti renderöidään. Meidän tapauksessamme emme kuitenkaan halua suorittaa efektin kuin ensimmäisen renderöinnin yhteydessä. </p>\n<p>Funktion <code>useEffect</code> toista parametria käytetään <a href=\"https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tarkentamaan sitä miten usein efekti suoritetaan</a>. Jos toisena parametrina on tyhjä taulukko <code>[]</code>, suoritetaanefekti ainoastaan komponentin ensimmäisen renderöinnin aikana.</p>\n<p>Efektihookien avulla on mahdollisuus tehdä paljon muutakin kuin hakea dataa palvelimelta, tämä riittää kuitenkin meille tässä vaiheessa.</p>\n<p>Mieti vielä tarkasti äsken läpikäytyä tapahtumasarjaa, eli mitä kaikkea koodista suoritetaan, missä järjetyksessä ja kuinka monta kertaa kun komponentin renderöinti alkaa, sen ymmärtäminen on erittäin tärkeää!</p>\n<p>Huomaa, että olisimme voineet kirjoittaa koodin myös seuraavasti:</p>\n<pre><code class=\"language-js\">useEffect(() => {\n  console.log('effect')\n\n  const eventHandler = response => {\n    console.log('promise fulfilled')\n    setNotes(response.data)\n  }\n\n  const promise = axios.get('http://localhost:3001/notes')\n  promise.then(eventHandler)\n}, [])\n</code></pre>\n<p>Muuttujaan <code>eventHandler</code> on sijoitettu viite funktioon. Axiosin metodin get palauttama promise on talletettu muuttujaan <code>promise</code>. Takaisinkutsun rekisteröinti tapahtuu antamalla promisen then-metodin parametrina muuttuja <code>eventHandler</code>, joka viittaa käsittelijäfunktioon.</p>\n<p>Sovelluksessa on tällä hetkellä vielä se ongelma, että jos lisäämme uusia muisiinpanoja, ne eivät tallennu palvelimelle asti. Eli kun uudelleenlataamme sovelluksen, kaikki lisäykset katoavat. Korjaus asiaan tulee pian.</p>\n<p>Sovelluksen tämän hetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/FullStack-HY/part2-notes/tree/part2-4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">githubissa</a>, branchissa <em>part2-4</em>.</p>\n<h3>Sovelluskehityksen suoritusympäristö</h3>\n<p>Sovelluksemme kokonaisuuden konfiguraatiosta on pikkuhiljaa muodostunut melko kompleksinen. Käydään vielä läpi mitä tapahtuu missäkin. Seuraava diagrammi kuvaa asetelmaa</p>\n<p><img src=\"../images/2/18c.png\"></p>\n<p>React-sovelluksen muodostavaa Javascript-koodia siis suoritetaan selaimessa. Selain hakee Javascriptin, joka luonnollisesti sijaitsee koneen kiintolevyllä, <i>React dev serveriltä</i>, joka on se ohjelma, mikä käynnistyy kun suoritetaan komento <code>npm run</code>. Dev-serveri muokkaa tiedostossa olevan Javascriptin selainta varten sopivaan muotoon, se mm. yhdistellee eri tiedostoissa olevan Javascript-koodin yhdeksi tiedostoksi. Puhumme enemmän dev-serveristä kurssin osassa 7.</p>\n<p>JSON-modossa olevan datan selaimessa pyörivä React-sovellus siis hakee koneella portissa 3001 käynnissä olevalta <i>json-serveriltä</i>, joka taas saa JSON-datan tiedostosta <i>db.json</i>.</p>\n<p>Kaikki sovelluksen osat ovat näin sovelluskehitysvaiheessa ohjelmoijan koneella eli <i>localhostissa</i>. Tilanne muuttuu sitten kun sovellus viedään internettiin. Teemme näin osassa 3.</p>\n</div>\n<div class=\"tasks\">\n<h3>Tehtäviä</h3>\n<h4>2.11: puhelinluettelo osa 6</h4>\n<p>Jatketaan puhelinluettelon kehittämistä. Talleta sovelluksen alkutila projektin juureen sijoitettavaan tiedostoon <em>db.json</em>:</p>\n<pre><code class=\"language-json\">{\n  \"persons\": [\n    {\n      \"name\": \"Arto Hellas\",\n      \"number\": \"040-123456\",\n      \"id\": 1\n    },\n    {\n      \"name\": \"Martti Tienari\",\n      \"number\": \"040-123456\",\n      \"id\": 2\n    },\n    {\n      \"name\": \"Arto Järvinen\",\n      \"number\": \"040-123456\",\n      \"id\": 3\n    },\n    {\n      \"name\": \"Lea Kutvonen\",\n      \"number\": \"040-123456\",\n      \"id\": 4\n    }\n  ]\n}\n</code></pre>\n<p>Käynnistä json-server porttiin 3001 ja varmista selaimella osoitteesta <a href=\"http://localhost:3001/persons\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:3001/persons</a>, että palvelin palauttaa henkilölistan.</p>\n<p>Jos saat virheilmoituksen:</p>\n<pre><code class=\"language-js\">events.js:182\n      throw er; // Unhandled 'error' event\n      ^\n\nError: listen EADDRINUSE 0.0.0.0:3001\n    at Object._errnoException (util.js:1019:11)\n    at _exceptionWithHostPort (util.js:1041:20)\n</code></pre>\n<p>on portti 3001 jo jonkin muun sovelluksen, esim. jo käynnissä olevan json-serverin käytössä. Sulje toinen sovellus tai jos se ei onnistu, vaihda porttia.</p>\n<p>Muuta sovellusta siten, että datan alkutila haetaan <em>axios</em>-kirjaston avulla palvelimelta. Hoida datan hakeminen <a href=\"https://reactjs.org/docs/hooks-effect.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Effect hookilla</a>).</p>\n<h4>2.12* maiden tiedot, osa 1</h4>\n<p>Rajapinta <a href=\"https://restcountries.eu\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://restcountries.eu</a> tarjoaa paljon eri maihin liittyvää tietoa koneluettavassa muodossa REST-apina.</p>\n<p>Tee sovellus, jonka avulla voit tarkastella eri maiden tietoja. Sovelluksen kannattaa hakea tiedot endpointista <a href=\"https://restcountries.eu/#api-endpoints-all\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">all</a>.</p>\n<p>Sovelluksen käyttöliittymä on yksinkertainen. Näytettävä maa haetaan kirjoittamalla hakuehto etsintäkenttään.</p>\n<p>Jos ehdon täyttäviä maita on liikaa (yli 10), kehoitetaan tarkentamaan hakuehtoa:</p>\n<p><img src=\"../images/2/19b1.png\"></p>\n<p>Jos maita on alle kymmenen, mutta yli 1 näytetään hakuehdon täyttävät maat:</p>\n<p><img src=\"../images/2/19b2.png\"></p>\n<p>Kun ehdon täyttäviä maita on enää yksi, näytetään maan perustiedot, lippu sekä siellä puhutut kielet:</p>\n<p><img src=\"../images/2/19b3.png\"></p>\n<p><strong>Huom:</strong> riittää että sovelluksesi toimii suurimmalle osalle maista. Jotkut maat kuten <em>Sudan</em> voivat tuottaa ongelmia, sillä maan nimi on toisen maan <em>South Sudan</em> osa. Näistä corner caseista ei tarvitse välittää.</p>\n<h4>2.13*: maiden tiedot, osa 2</h4>\n<p><strong>Tässä osassa on vielä paljon tekemistä, joten älä juutu tähän tehtävään!</strong></p>\n<p>Paranna edellisen tehtävän maasovellusta siten, että kun sivulla näkyy useiden maiden nimiä, tulee maan nimen viereen nappi, mitä klikkaamalla pääsee suoraan maan näkymään:</p>\n<p><img src=\"../images/2/19b4.png\"></p>\n<p>Tässäkin tehtävässä riittää, että ohjelmasi toimii suurella osalla maita ja maat joiden nimi sisältyy johonkin muuhun maahan, kuten <em>Sudan</em> voit unohtaa. </p>\n<h4>2.14*: maiden tiedot, osa 3</h4>\n<p><strong>Tässä osassa on vielä paljon tekemistä, joten älä juutu tähän tehtävään!</strong></p>\n<p>Lisää yksittäisen maan näkymään pääkaupungin säätiedotus. Säätiedoituksen tarjoavia palveluita on kymmeniä. Itse käytin <a href=\"https://www.apixu.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.apixu.com</a>:ia. </p>\n<p><img src=\"../images/2/19b5.png\"></p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/part-2-2c709798e38da8a809241016507d8154.svg"},"part":2,"letter":"c"}}},"pageContext":{"part":2,"letter":"c"}}