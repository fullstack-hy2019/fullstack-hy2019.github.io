{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<h2>Lomakkeet</h2>\n<p>Jatketaan sovelluksen laajentamista siten, että se mahdollistaa uusien muistiinpanojen lisäämisen.</p>\n<p>Jotta saisimme sivun päivittymään uusien muistiinpanojen lisäyksen yhteydessä, on parasta sijoittaa muistiinpanot komponentin <em>App</em> tilaan. Eli importataan funktio <a href=\"https://reactjs.org/docs/hooks-state.html\">useState</a> ja määritellään sen avulla komponentille tila joka saa aluksi arvokseen propsina välitettävän muistiinpanot alustavan taulukon: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></span><span class=\"token keyword\">import</span> Note <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Note'</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rows</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span>\n    <span class=\"token operator\">&lt;</span>Note\n      key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n      note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Muistiinpanot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token function\">rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>Komponentti siis alustaa funktion <code>useState</code> avulla tilan  <code>notes</code> arvoksi propseina välitettävän alustavan muistiinpanojen listan:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">)</span> \n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Jos haluaisimme lähteä liikkeelle tyhjästä muistiinpanojen listasta, annettaisiin tilan alkuarvoksi tyhjä taulukko, ja koska komponentti ei käyttäisi ollenkaan propseja, voitaisiin parametri <code>props</code> jättää kokonaan määrittelemättä:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>  </code></pre></div>\n<p>Jätetään kuitenkin toistaiseksi tilalle alkuarvon asettava määrittely voimaan.</p>\n<p>Lisätään seuraavaksi komponenttiin lomake eli HTML <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms\">form</a> uuden muistiinpanon lisäämistä varten:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">)</span> \n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rows</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nappia painettu'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Muistiinpanot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token function\">rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addNote<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>input <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>tallenna<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>   </span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Lomakkeelle on lisätty myös tapahtumankäsittelijäksi metodi <em>funktio</em> reagoimaan sen \"lähettämiseen\", eli napin painamiseen.</p>\n<p>Tapahtumankäsittelijä on <a href=\"/osa1#tapahtumank%C3%A4sittely\">osasta 1</a> tuttuun tapaan määritelty seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nappia painettu'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Parametrin <em>event</em> arvona on metodin kutsun aiheuttama <a href=\"https://reactjs.org/docs/handling-events.html\">tapahtuma</a>.</p>\n<p>Tapahtumankäsittelijä kutsuu heti tapahtuman metodia <code>event.preventDefault()</code> jolla se estää lomakkeen lähetyksen oletusarvoisen toiminnan, joka aiheuttaisi mm. sivun uudelleenlatautumisen.</p>\n<p>Tapahtuman kohde, eli <em>event.target</em> on tulostettu konsoliin</p>\n<picture><img src=\"/static/402afeb2ecdcbfb536289f933caa11aa/14be6/2.png\" srcset=\"/static/402afeb2ecdcbfb536289f933caa11aa/4cce7/2.png 200w,\n/static/402afeb2ecdcbfb536289f933caa11aa/bae5f/2.png 400w,\n/static/402afeb2ecdcbfb536289f933caa11aa/14be6/2.png 800w,\n/static/402afeb2ecdcbfb536289f933caa11aa/1b35a/2.png 1200w,\n/static/402afeb2ecdcbfb536289f933caa11aa/95b18/2.png 1530w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Kohteena on siis komponentin määrittelemä lomake.</p>\n<p>Miten pääsemme käsiksi lomakkeen <em>input</em>-komponenttiin syötettyyn dataan?</p>\n<p>Tapoja on useampia, tutustumme ensin ns. <a href=\"https://reactjs.org/docs/forms.html#controlled-components\">kontrolloituina komponentteina</a> toteutettuihin lomakkeisiin.</p>\n<p>Lisätään komponentin <em>App</em> tilaan kenttä <em>newNote</em> lomakkeen syötettä varten:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      notes<span class=\"token punctuation\">:</span> props<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">,</span>\n      newNote<span class=\"token punctuation\">:</span> <span class=\"token string\">'uusi muistiinpano...'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Määritellään tilaan lisätty kenttä <em>input</em>-komponentin attribuutin <em>value</em> arvoksi:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;form onSubmit=&quot;{this.addNote}&quot;&gt;\n  &lt;input value=&quot;{this.state.newNote}&quot; /&gt; &lt;button type=&quot;submit&quot;&gt;tallenna&lt;/button&gt;\n&lt;/form&gt;</code></pre></div>\n<p>Tilaan määritelty \"placeholder\"-teksti <em>uusi muistiinpano...</em> ilmestyy syötekomponenttiin, tekstiä ei kuitenkaan voi muuttaa. Konsoliin tuleekin ikävä varoitus joka kertoo mistä on kyse</p>\n<picture><img src=\"/static/9c8e6d08ec7b853179f16d7a8ff4604e/14be6/4.png\" srcset=\"/static/9c8e6d08ec7b853179f16d7a8ff4604e/4cce7/4.png 200w,\n/static/9c8e6d08ec7b853179f16d7a8ff4604e/bae5f/4.png 400w,\n/static/9c8e6d08ec7b853179f16d7a8ff4604e/14be6/4.png 800w,\n/static/9c8e6d08ec7b853179f16d7a8ff4604e/1b35a/4.png 1200w,\n/static/9c8e6d08ec7b853179f16d7a8ff4604e/9ee03/4.png 1600w,\n/static/9c8e6d08ec7b853179f16d7a8ff4604e/15613/4.png 1710w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Koska määrittelimme syötekomponentille <em>value</em>-attribuutiksi komponentin <em>App</em> tilassa olevan kentän, alkaa <em>App</em> <a href=\"https://reactjs.org/docs/forms.html#controlled-components\">kontrolloimaan</a> syötekomponentin toimintaa.</p>\n<p>Jotta kontrolloidun syötekomponentin editoiminen olisi mahdollista, täytyy sille rekisteröidä <em>tapahtumankäsittelijä</em>, joka synkronoi syötekenttään tehdyt muutokset komponentin <em>App</em> tilaan:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class App extends React.Component {\n  // ...\n\n  handleNoteChange = (event) =&gt; {\n    console.log(event.target.value)\n    this.setState({ newNote: event.target.value })\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;Muistiinpanot&lt;/h1&gt;\n        &lt;ul&gt;\n          {this.state.notes.map(note =&gt; &lt;Note key={note.id} note={note} /&gt;)}\n        &lt;/ul&gt;\n        &lt;form onSubmit={this.addNote}&gt;\n          &lt;input\n            value={this.state.newNote}\n            onChange={this.handleNoteChange}\n          /&gt;\n          &lt;button type=&quot;submit&quot;&gt;tallenna&lt;/button&gt;\n        &lt;/form&gt;\n      &lt;/div&gt;\n    )\n  }\n}</code></pre></div>\n<p>Lomakkeen <em>input</em>-komponentille on nyt rekisteröity tapahtumankäsittelijä tilanteeseen <em>onChange</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;input value=&quot;{this.state.newNote}&quot; onChange=&quot;{this.handleNoteChange}&quot; /&gt;</code></pre></div>\n<p>Tapahtumankäsittelijää kutsutaan <em>aina kun syötekomponentissa tapahtuu jotain</em>. Tapahtumankäsittelijämetodi saa parametriksi tapahtumaolion <em>event</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">handleNoteChange</span> <span class=\"token operator\">=</span> event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> newNote<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tapahtumaolion kenttä <em>target</em> vastaa nyt kontrolloitua <em>input</em>-kenttää ja <em>event.target.value</em> viittaa inputin syötekentän arvoon.</p>\n<p>Huomaa, että toisin kuin tapahtuman <em>onSubmit</em> käsittelijässä, nyt oletusarvoisen toiminnan estävää metodikutusua <em>event.preventDefault()</em> ei tarvita sillä syötekentän muutoksella ei ole oletusarvoista toimintaa toisin kuin lomakkeen lähettämisellä.</p>\n<p>Voit seurata konsolista miten tapahtumankäsittelijää kutsutaan:</p>\n<picture><img src=\"/static/b5f424c1a27a758a88c8bba86dc78aaf/14be6/5.png\" srcset=\"/static/b5f424c1a27a758a88c8bba86dc78aaf/4cce7/5.png 200w,\n/static/b5f424c1a27a758a88c8bba86dc78aaf/bae5f/5.png 400w,\n/static/b5f424c1a27a758a88c8bba86dc78aaf/14be6/5.png 800w,\n/static/b5f424c1a27a758a88c8bba86dc78aaf/1b35a/5.png 1200w,\n/static/b5f424c1a27a758a88c8bba86dc78aaf/9ee03/5.png 1600w,\n/static/b5f424c1a27a758a88c8bba86dc78aaf/a39b6/5.png 1686w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Muistithan jo asentaa <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">React devtoolsin</a>? Devtoolsista näet, miten tila muuttuu syötekenttään kirjoitettaessa:</p>\n<picture><img src=\"/static/de515c2b2e73fed381f6b4182773ac99/14be6/5a.png\" srcset=\"/static/de515c2b2e73fed381f6b4182773ac99/4cce7/5a.png 200w,\n/static/de515c2b2e73fed381f6b4182773ac99/bae5f/5a.png 400w,\n/static/de515c2b2e73fed381f6b4182773ac99/14be6/5a.png 800w,\n/static/de515c2b2e73fed381f6b4182773ac99/1b35a/5a.png 1200w,\n/static/de515c2b2e73fed381f6b4182773ac99/3d1fa/5a.png 1408w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Nyt komponentin <em>App</em> tilan kenttä <em>newNote</em> heijastaa koko ajan syötekentän arvoa, joten voimme viimeistellä uuden muistiinpanon lisäämisestä huolehtivan metodin <em>addNote</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> noteObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    content<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>newNote<span class=\"token punctuation\">,</span>\n    date<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>noteObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    notes<span class=\"token punctuation\">:</span> notes<span class=\"token punctuation\">,</span>\n    newNote<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ensin luodaan uutta muistiinpanoa vastaava olio <em>noteObject</em>, jonka sisältökentän arvo saadaan komponentin tilasta <em>this.state.newNote</em>. Yksikäsitteinen tunnus eli <em>id</em> generoidaan kaikkien muistiinpanojen lukumäärän perusteella. Koska muistiinpanoja ei poisteta, menetelmä toimii sovelluksessamme. Komennon <code>Math.random()</code> avulla muistiinpanosta tulee 50% todennäköisyydellä tärkeä.</p>\n<p>Uusi muistiinpano lisätään vanhojen joukkoon oikeaoppisesti käyttämällä <a href=\"/osa1#taulukon-k%C3%A4sittely%C3%A4\">osasta 1</a> tuttua taulukon metodia <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">concat</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>noteObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Metodi ei muuta alkuperäistä taulukkoa <em>this.state.notes</em> vaan luo uuden taulukon, joka sisältää myös lisättävän alkion. Tämä on tärkeää, sillä Reactin tilaa <a href=\"https://reactjs.org/docs/state-and-lifecycle.html#using-state-correctly\">ei saa muuttaa suoraan</a>!</p>\n<p>Lopussa komponentin tila päivitetään uusilla muistiinpanoilla ja tyhjentämällä syötekomponentin arvoa kontrolloiva kenttä:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  notes<span class=\"token punctuation\">:</span> notes<span class=\"token punctuation\">,</span>\n  newNote<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Kehittyneempi tapa olioliteraalien kirjoittamiseen</h3>\n<p>Voimme muuttaa tilan päivittämän koodin</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  notes<span class=\"token punctuation\">:</span> notes<span class=\"token punctuation\">,</span>\n  newNote<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>muotoon</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  notes<span class=\"token punctuation\">,</span>\n  newNote<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tämä johtuu siitä, että ES6:n myötä (ks. kohta <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\">property definitions</a>) Javascriptiin on tullut uusi ominaisuus, joka mahdollistaa hieman tiiviimmän tavan muuttujien avulla tapahtuvaan olioiden määrittelyyn.</p>\n<p>Tarkastellaan tilannetta, jossa meillä on muuttujissa arvoja</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Leevi'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ja haluamme määritellä näiden perusteella olion, jolla on kentät <em>name</em> ja <em>age</em>.</p>\n<p>Vanhassa Javascriptissä olio täytyi määritellä seuraavaan tyyliin</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span>\n  age<span class=\"token punctuation\">:</span> age<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>koska muuttujien ja luotavan olion kenttien nimi nyt on sama, riittää ES6:ssa kirjoittaa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>lopputulos molemmilla tavoilla luotuun olioon on täsmälleen sama.</p>\n<p>Sovelluksen tämän hetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/FullStack-HY/part2-notes/tree/part2-2\">githubissa</a>, tagissa <em>part2-2</em>.</p>\n<h2>Näytettävien elementtien filtteröinti</h2>\n<p>Tehdään sovellukseen toiminto, joka mahdollistaa ainoastaan tärkeiden muistiinpanojen näyttämisen.</p>\n<p>Lisätään komponentin <em>App</em> tilaan tieto siitä näytetäänkö muistiinpanoista kaikki vai ainoastaan tärkeät:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      notes: props.notes ,\n      newNote: &#39;&#39;,\n      showAll: true\n    }\n  }\n  // ...\n}</code></pre></div>\n<p>Muutetaan metodia <em>render</em> siten, että se tallettaa muuttujaan <em>notesToShow</em> näytettävien muistiinpanojen listan riippuen siitä tuleeko näyttää kaikki vai vain tärkeät:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">render() {\n  const notesToShow =\n    this.state.showAll ?\n      this.state.notes :\n      this.state.notes.filter(note =&gt; note.important === true)\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Muistiinpanot&lt;/h1&gt;\n      &lt;ul&gt;\n        {notesToShow.map(note =&gt; &lt;Note key={note.id} note={note} /&gt;)}\n      &lt;/ul&gt;\n      &lt;form onSubmit={this.addNote}&gt;\n        &lt;input\n          value={this.state.newNote}\n          onChange={this.handleNoteChange}\n        /&gt;\n        &lt;button type=&quot;submit&quot;&gt;tallenna&lt;/button&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Muuttujan <em>notesToShow</em> määrittely on melko kompakti</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> notesToShow <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>showAll\n  <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>notes\n  <span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Käytössä on monissa muissakin kielissä oleva <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">ehdollinen</a> operaatio.</p>\n<p>Operaatio toimii seuraavasti. Jos meillä on esim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> tulos <span class=\"token operator\">=</span> ehto <span class=\"token operator\">?</span> val1 <span class=\"token punctuation\">:</span> val2<span class=\"token punctuation\">;</span></code></pre></div>\n<p>muuttujan <em>tulos</em> arvoksi asetetaan <em>val1</em>:n arvo jos <em>ehto</em> on tosi. Jos <em>ehto</em> ei ole tosi, muuttujan <em>tulos</em> arvoksi tulee <em>val2</em>:n arvo.</p>\n<p>Jos ehto <em>this.state.showAll</em> on epätosi, muuttuja <em>notesToShow</em> saa arvokseen vaan ne muistiinpanot, joiden <em>important</em>-kentän arvo on tosi. Filtteröinti tapahtuu taulukon metodilla <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">filter</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>vertailu-operaatio on oikeastaan turha koska <em>note.important</em> on arvoltaan joko <em>true</em> tai <em>false</em>, eli riittää kirjoittaa</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tässä käytettiin kuitenkin ensin vertailuoperaattoria, mm. korostamaan erästä tärkeää seikkaa: Javascriptissa <code>arvo1 == arvo2</code> ei toimi kaikissa tilanteissa loogisesti ja onkin varmempi käyttää aina vertailuissa muotoa <code>arvo1 === arvo2</code>. Enemmän aiheesta <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\">täällä</a>.</p>\n<p>Filtteröinnin toimivuutta voi jo nyt kokeilla vaihtelemalla sitä, miten tilan kentän <em>showAll</em> alkuarvo määritelään konstruktorissa.</p>\n<p>Lisätään sitten toiminnallisuus, mikä mahdollistaa <em>showAll</em>:in tilan muuttamisen sovelluksesta.</p>\n<p>Oleelliset muutokset ovat seuraavassa:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class App extends React.Component {\n  // ...\n\n  toggleVisible = () =&gt; {\n    this.setState({showAll: !this.state.showAll})\n  }\n\n  render() {\n    const notesToShow =\n      this.state.showAll ?\n        this.state.notes :\n        this.state.notes.filter(note =&gt; note.important === true)\n\n    const label = this.state.showAll ? &#39;vain tärkeät&#39; : &#39;kaikki&#39;\n\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;Muistiinpanot&lt;/h1&gt;\n\n        &lt;div&gt;\n          &lt;button onClick={this.toggleVisible}&gt;\n            näytä {label}\n          &lt;/button&gt;\n        &lt;/div&gt;\n\n        &lt;ul&gt;\n          {notesToShow.map(note =&gt; &lt;Note key={note.id} note={note} /&gt;)}\n        &lt;/ul&gt;\n        &lt;form onSubmit={this.addNote}&gt;\n          &lt;input\n            value={this.state.newNote}\n            onChange={this.handleNoteChange}\n          /&gt;\n          &lt;button type=&quot;submit&quot;&gt;tallenna&lt;/button&gt;\n        &lt;/form&gt;\n      &lt;/div&gt;\n    )\n  }\n}</code></pre></div>\n<p>Näkyviä muistiinpanoja (kaikki vai ainoastaan tärkeät) siis kontrolloidaan napin avulla. Napin tapahtumankäsittelijä on yksinkertainen, se muuttaa <em>this.state.showAll</em>:n arvon truesta falseksi ja päinvastoin:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">toggleVisible</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> showAll<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>showAll <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Napin teksti määritellään muuttujaan, jonka arvo määräytyy tilan perusteella:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> label <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>showAll <span class=\"token operator\">?</span> <span class=\"token string\">'vain tärkeät'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'kaikki'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sovelluksen tämän hetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/FullStack-HY/part2-notes/tree/part2-3\">githubissa</a>, tagissa <em>part2-3</em>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Tehtävät 2.6</h3>\n<h4>puhelinluettelo osa 1</h4>\n<p>Toteutetaan yksinkertainen puhelinluettelo. <strong>Aluksi luetteloon lisätään vaan nimiä.</strong></p>\n<p>Voit ottaa sovelluksesi pohjaksi seuraavan:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from &#39;react&#39;;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      persons: [\n        { name: &#39;Arto Hellas&#39; }\n      ],\n      newName: &#39;&#39;\n    }\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h2&gt;Puhelinluettelo&lt;/h2&gt;\n        &lt;form&gt;\n          &lt;div&gt;\n            nimi: &lt;input /&gt;\n          &lt;/div&gt;\n          &lt;div&gt;\n            &lt;button type=&quot;submit&quot;&gt;lisää&lt;/button&gt;\n          &lt;/div&gt;\n        &lt;/form&gt;\n        &lt;h2&gt;Numerot&lt;/h2&gt;\n        ...\n      &lt;/div&gt;\n    )\n  }\n}\n\nexport default App</code></pre></div>\n<p>Tilassa oleva kenttä <em>newName</em> on tarkoitettu lomakkeen kentän kontrollointiin.</p>\n<p>Joskus tilan muuttujia ja tarvittaessa muitakin voi olla hyödyllistä renderöidä debugatessa komponenttiin, eli voi tilapäisesti lisätä komponentin metodin <em>render</em> palauttamaan koodiin esim. seuraavan:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div&gt;debug: {this.state.newName}&lt;/div&gt;</code></pre></div>\n<p>Muista myös osan 1 luku <a href=\"#react-sovellusten-debuggaus\">React-sovellusten debuggaus</a>, erityisesti <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">react developer tools</a> on välillä todella kätevä komponentin tilan muutosten seuraamisessa.</p>\n<p>Sovellus voi näyttää tässä vaiheessa seuraavalta:</p>\n<picture><img src=\"/static/60446030ea8355a3fb52e43afb9b73b4/14be6/11.png\" srcset=\"/static/60446030ea8355a3fb52e43afb9b73b4/4cce7/11.png 200w,\n/static/60446030ea8355a3fb52e43afb9b73b4/bae5f/11.png 400w,\n/static/60446030ea8355a3fb52e43afb9b73b4/14be6/11.png 800w,\n/static/60446030ea8355a3fb52e43afb9b73b4/1b35a/11.png 1200w,\n/static/60446030ea8355a3fb52e43afb9b73b4/c9ac2/11.png 1410w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Huomaa, React developer toolsin käyttö!</p>\n<p><strong>Huom:</strong></p>\n<ul>\n<li>voit käyttää kentän <em>key</em> arvona henkilön nimeä</li>\n<li>muista estää lomakkeen lähetyksen oletusarvoinen toiminta!</li>\n</ul>\n<h3>Tehtävät 2.7</h3>\n<h4>puhelinluettelo osa 2</h4>\n<p>Jos lisättävä nimi on jo sovelluksen tiedossa, estä lisäys. Taulukolla on lukuisia sopivia <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">metodeja</a> tehtävän tekemiseen.</p>\n<p>Voit antaa halutessasi virheilmoituksen esim. komennolla <em>alert()</em>. Se ei kuitenkaan ole tarpeen.</p>\n<h3>Tehtävät 2.8</h3>\n<h4>puhlelinluettelo osa 3</h4>\n<p>Lisää sovellukseen mahdollisuus antaa henkilöille puhelinnumero. Tarvitset siis lomakkeeseen myös toisen <em>input</em>-elementin (ja sille oman muutoksenkäsittelijän):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;form&gt;\n  &lt;div&gt;nimi: &lt;input /&gt;&lt;/div&gt;\n  &lt;div&gt;numero: &lt;input /&gt;&lt;/div&gt;\n  &lt;div&gt;&lt;button type=&quot;submit&quot;&gt;lisää&lt;/button&gt;&lt;/div&gt;\n&lt;/form&gt;</code></pre></div>\n<p>Sovellus voi näyttää tässä vaiheessa seuraavalta. Kuvassa myös <a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi\">react developer tools</a>:in tarjoama näkymä komponentin <em>App</em> tilaan:</p>\n<picture><img src=\"/static/dd6fe4b6d9f8013fd1244ecd77b3010d/14be6/12.png\" srcset=\"/static/dd6fe4b6d9f8013fd1244ecd77b3010d/4cce7/12.png 200w,\n/static/dd6fe4b6d9f8013fd1244ecd77b3010d/bae5f/12.png 400w,\n/static/dd6fe4b6d9f8013fd1244ecd77b3010d/14be6/12.png 800w,\n/static/dd6fe4b6d9f8013fd1244ecd77b3010d/1b35a/12.png 1200w,\n/static/dd6fe4b6d9f8013fd1244ecd77b3010d/9ee03/12.png 1600w,\n/static/dd6fe4b6d9f8013fd1244ecd77b3010d/6869b/12.png 1848w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Tehtävät 2.9*</h3>\n<h4>puhelinluettelo osa 4</h4>\n<p>Tee lomakkeeseen hakukenttä, jonka avulla näytettävien nimien listaa voidaan rajata:</p>\n<picture><img src=\"/static/3257039afad6bed5eec6657bd4a3b484/14be6/12c.png\" srcset=\"/static/3257039afad6bed5eec6657bd4a3b484/4cce7/12c.png 200w,\n/static/3257039afad6bed5eec6657bd4a3b484/bae5f/12c.png 400w,\n/static/3257039afad6bed5eec6657bd4a3b484/14be6/12c.png 800w,\n/static/3257039afad6bed5eec6657bd4a3b484/1b35a/12c.png 1200w,\n/static/3257039afad6bed5eec6657bd4a3b484/e5b6a/12c.png 1556w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Rajausehdon syöttämisen voi hoitaa omana lomakkeeseen kuulumattomana <em>input</em>-elementtinä. Kuvassa rajausehdosta on tehty <em>caseinsensitiivinen</em> eli ehto <em>arto</em> löytää isolla kirjaimella kirjoitetun Arton.</p>\n<p><strong>Huom:</strong> Kun toteutat jotain uutta toiminnallisuutta, on usein hyötyä 'kovakoodata' sovellukseen jotain sisältöä, esim.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    persons<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Arto Hellas'</span><span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">:</span> <span class=\"token string\">'040-123456'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Martti Tienari'</span><span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">:</span> <span class=\"token string\">'040-123456'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Arto Järvinen'</span><span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">:</span> <span class=\"token string\">'040-123456'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Lea Kutvonen'</span><span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">:</span> <span class=\"token string\">'040-123456'</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    newName<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    newNumber<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    filter<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Näin vältytään turhalta manuaaliselta työltä, missä testaaminen edellyttäisi myös testiaineiston syöttämistä käsin soveluksen lomakkeen kautta.</p>\n<p>Kurssin seuraavasta osasta alkaen alamme määrittelemään sovelluksemme <em>testejä</em> jotka tietyissä tapauksissa hoitavat kovakoodatun apusyötteen roolia.</p>\n<h3>Tehtävät 2.10</h3>\n<h4>puhelinluettelo osa 5</h4>\n<p>Jos koko sovelluksesi on tehty yhteen komponenttiin, refaktoroi sitä eriyttämällä sopivia komponentteja. Pidä kuitenkin edelleen kaikki tila juurikomponentissa.</p>\n<p>Riittää että erotat sovelluksesta kaksi komponenttia. Hyviä kandidaatteja ovat esim. filtteröintilomake, yksittäisten henkilön tietojen esittäminen ja uuden henkilön lisäävä lomake.</p>\n</div>","frontmatter":{"title":"osa 2","subTitle":"Lomakkeiden käsittely","path":"/osa2/lomakkeet","mainImage":{"publicURL":"/static/part-2-2c709798e38da8a809241016507d8154.svg"},"partColor":"dark-orange","part":2,"letter":"b"}}},"pageContext":{}}