{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Ennen kun menemme uuteen asiaan, nostetaan esiin muutama edellisen osan huomiota herättänyt seikka.</p>\n<h3>console.log</h3>\n<p><strong>Mikä erottaa kokeneen ja kokemattoman Javascript-ohjelmoijan? Kokeneet käyttävät 10-100 kertaa enemmän console.logia</strong>.</p>\n<p>Paradoksaalista kyllä tämä näyttää olevan tilanne, vaikka kokematon ohjelmoija oikeastaan tarvitsisi console.logia (tai jotain muita debuggaustapoja) huomattavissa määrin kokenutta enemmän. </p>\n<p>Eli kun joku ei toimi, älä arvaile vaan logaa tai käytä jotain muita debuggauskeinoja.</p>\n<p><strong>HUOM</strong> kun käytät komentoa <em>console.log</em> debuggaukseen, älä yhdistele asioita \"javamaisesti\" plussalla, eli sen sijaan että kirjoittaisit</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'propsin arvo on'</span> <span class=\"token operator\">+</span> props<span class=\"token punctuation\">)</span></code></pre></div>\n<p>erottele tulostettavat asiat pilkulla:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'propsin arvo on'</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Jos yhdistät merkkijonoon olion, tuloksena on suhteellisen hyödytön tulostusmuoto</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">propsin arvo on <span class=\"token punctuation\">[</span>Object object<span class=\"token punctuation\">]</span></code></pre></div>\n<p>kun taas pilkulla erotellessa saat tulostettavat asiat developer-konsoliin oliona, jonka sisältöä on mahdollista tarkastella.</p>\n<h3>Tapahtumankäsittely revisited</h3>\n<p>Pajan ja telegrammin havaintojen perusteella tapahtumankäsittely on osoittautunut haastavaksi.</p>\n<p>Osasan loppussa oleva kertaava osa <a href=\"/osa1#tapahtumank%C3%A4sittely-revisited\">tapahtumankäsittely revisited</a> kannattaa käydä läpi jos osaaminen on vielä häilyvällä pohjalla.</p>\n<h3>Visual Studio Coden snippetit</h3>\n<p>Visual studio codeen on helppo määritellä \"snippettejä\", eli Netbeansin \"sout\":in tapaisia oikoteitä yleisesti käytettyjen koodinpätkien generointiin. Ohje snippetien luomiseen <a href=\"https://code.visualstudio.com/docs/editor/userdefinedsnippets#_creating-your-own-snippets\">täällä</a></p>\n<p>VS Code -plugineina löytyy myös hyödyllisiä valmiiksi määriteltyjä snippettejä, esim.\n<a href=\"https://marketplace.visualstudio.com/items?itemName=xabikos.ReactSnippets\">tämä</a></p>\n<p>Tärkein kaikista snippeteistä on komennon <code>console.log()</code> nopeasti ruudulle tekevä snippet, esim. <code>clog</code>, jonka voi määritellä seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"console.log\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"prefix\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"clog\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"body\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"console.log('$1')\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"description\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Log output to console\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Taulukkojen käyttö Javascriptissä</h2>\n<p>Tästä osasta lähtien käytämme runsaasti Javascriptin <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">taulukkojen</a> funktionaalisia käsittelymetodeja, kuten <em>find</em>, <em>filter</em> ja <em>map</em>. Periaate niissä on täysin sama kuin Java 8:sta tutuissa streameissa, joita on käytetty jo parin vuoden ajan laitoksen Ohjelmoinnin perusteissa ja jatkokurssilla.</p>\n<p>Jos taulukon funktionaalinen käsittely tuntuu vielä vieraalta, kannattaa katsoa Youtubessa olevasta videosarjasta <em>Functional Programming in JavaScript</em> ainakin kolme ensimmäistä osaa</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=BMUiFMZr7vk&#x26;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84\">Higher-order functions</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=bCqtb-Z5YGQ&#x26;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84&#x26;index=2\">Map</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=Wl98eZpkp-c&#x26;t=31s\">Reduce basics</a></li>\n</ul>\n<h2>Kokoelmien renderöiminen</h2>\n<p>Tehdään nyt Reactilla <a href=\"/osa1\">ensimmäisen osan</a> alussa käytettyä esimerkkisovelluksen <a href=\"https://fullstack-exampleapp.herokuapp.com/spa\">Single page app -versiota</a> vastaavan sovelluksen 'frontend' eli selainpuolen sovelluslogiikka.</p>\n<p>Aloitetaan seuraavasta:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\nimport ReactDOM from &#39;react-dom&#39;\n\nconst notes = [\n  {\n    id: 1,\n    content: &#39;HTML on helppoa&#39;,\n    date: &#39;2017-12-10T17:30:31.098Z&#39;,\n    important: true\n  },\n  {\n    id: 2,\n    content: &#39;Selain pystyy suorittamaan vain javascriptiä&#39;,\n    date: &#39;2017-12-10T18:39:34.091Z&#39;,\n    important: false\n  },\n  {\n    id: 3,\n    content: &#39;HTTP-protokollan tärkeimmät metodit ovat GET ja POST&#39;,\n    date: &#39;2017-12-10T19:20:14.298Z&#39;,\n    important: true\n  }\n]\n\nconst App = (props) =&gt; {\n  const { notes } = props;\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Muistiinpanot&lt;/h1&gt;\n      &lt;ul&gt;\n        &lt;li&gt;{notes[0].content}&lt;/li&gt;\n        &lt;li&gt;{notes[1].content}&lt;/li&gt;\n        &lt;li&gt;{notes[2].content}&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  )\n}\n\nReactDOM.render(\n  &lt;App notes={notes} /&gt;,\n  document.getElementById(&#39;root&#39;)\n)</code></pre></div>\n<p>Jokaiseen muistiinpanoon on merkitty tekstuaalisen sisällön ja aikaleiman lisäksi myös <em>boolean</em>-arvo, joka kertoo onko muistiinpano luokiteltu tärkeäksi, sekä yksikäsitteinen tunniste <em>id</em>.</p>\n<p>Koodin toiminta perustuu siihen, että taulukossa on tasan kolme muistiinpanoa, yksittäiset muistiinpanot renderöidään 'kovakoodatusti' viittaamalla suoraan taulukossa oleviin olioihin:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>{note[1].content}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Tämä ei tietenkään ole järkevää. Ratkaisu voidaan yleistää generoimalla taulukon perusteella joukko React-elementtejä käyttäen <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">map</a>-funktiota:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">notes.map<span class=\"token punctuation\">(</span>note <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>note.content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span>/li<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>nyt tuloksena on taulukko, jonka sisältö on joukko <em>li</em>-elementtejä</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'&lt;li>HTML on helppoa&lt;/li>'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'&lt;li>Selain pystyy suorittamaan vain javascriptiä&lt;/li>'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'&lt;li>HTTP-protokollan tärkeimmät metodit ovat GET ja POST&lt;/li>'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>jotka voidaan sijoittaa <em>ul</em>-tagien sisälle:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const App = (props) =&gt; {\n  const { notes } = props;\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Muistiinpanot&lt;/h1&gt;\n      &lt;ul&gt;\n        {notes.map(note =&gt; &lt;li&gt;{note.content}&lt;/li&gt;)}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Koska li-tagit generoiva koodi on Javascriptia, tulee se sijoittaa JSX-templatessa aaltosulkujen sisälle kaiken muun Javascript-koodin tapaan.</p>\n<p>Usein vastaavissa tilanteissa dynaamisesti generoitava sisältö eristetään omaan metodiin, jota JSX-template kutsuu:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const App = (props) =&gt; {\n  const { notes } = props;\n  const rivit = () =&gt; notes.map(note =&gt; &lt;li&gt;{note.content}&lt;/li&gt;)\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Muistiinpanot&lt;/h1&gt;\n      &lt;ul&gt;\n        {rivit()}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Vaikka sovellus näyttää toimivan, tulee konsoliin ikävä varoitus</p>\n<picture><img src=\"/static/3f32af5a03d1fea93cfc8faa68fbcee5/14be6/1.png\" srcset=\"/static/3f32af5a03d1fea93cfc8faa68fbcee5/4cce7/1.png 200w,\n/static/3f32af5a03d1fea93cfc8faa68fbcee5/bae5f/1.png 400w,\n/static/3f32af5a03d1fea93cfc8faa68fbcee5/14be6/1.png 800w,\n/static/3f32af5a03d1fea93cfc8faa68fbcee5/1b35a/1.png 1200w,\n/static/3f32af5a03d1fea93cfc8faa68fbcee5/9ee03/1.png 1600w,\n/static/3f32af5a03d1fea93cfc8faa68fbcee5/fa119/1.png 1750w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Kuten virheilmoituksen linkittämä <a href=\"https://reactjs.org/docs/lists-and-keys.html#keys\">sivu</a> kertoo, tulee taulukossa olevilla, eli käytännössä <em>map</em>-metodilla muodostetuilla elementeillä olla uniikki avain, eli kenttä nimeltään <em>key</em>.</p>\n<p>Lisätään avaimet:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const App = (props) =&gt; {\n  const { notes } = props;\n  const rivit = () =&gt; notes.map(note =&gt; &lt;li key={note.id}&gt;{note.content}&lt;/li&gt;)\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Muistiinpanot&lt;/h1&gt;\n      &lt;ul&gt;\n        {rivit()}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Virheilmoitus katoaa.</p>\n<p>React käyttää taulukossa olevien elementtien key-kenttiä päätellessään miten sen tulee päivittää komponentin generoimaa näkymää silloin kun komponentti uudelleenrenderöidään. Lisää aiheesta <a href=\"https://reactjs.org/docs/reconciliation.html#recursing-on-children\">täällä</a>.</p>\n<h3>Map</h3>\n<p>Taulukoiden metodin <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">map</a> toiminnan sisäistäminen on jatkon kannalta äärimmäisen tärkeää.</p>\n<p>Sovellus siis sisältää taulukon <em>notes</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token punctuation\">:</span> <span class=\"token string\">'HTML on helppoa'</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token punctuation\">:</span> <span class=\"token string\">'2017-12-10T17:30:31.098Z'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token punctuation\">:</span> <span class=\"token string\">'Selain pystyy suorittamaan vain javascriptiä'</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token punctuation\">:</span> <span class=\"token string\">'2017-12-10T18:39:34.091Z'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token punctuation\">:</span> <span class=\"token string\">'HTTP-protokollan tärkeimmät metodit ovat GET ja POST'</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token punctuation\">:</span> <span class=\"token string\">'2017-12-10T19:20:14.298Z'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Pysähdytään hetkeksi tarkastelemaan miten <em>map</em> toimii.</p>\n<p>Jos esim. tiedoston loppuun lisätään seuraava koodi</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>tulostuu konsoliin <em>[1, 2, 3]</em> eli <em>map</em> muodostaa uuden taulukon, jonka jokainen alkio on saatu alkuperäisen taulukon <em>notes</em> alkioista <em>mappaamalla</em> komennon parametrina olevan funktion avulla.</p>\n<p>Funktio on</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">note <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span></code></pre></div>\n<p>eli kompaktissa muodossa kirjoitettu nuolifunktio, joka on täydelliseltä kirjoitustavaltaan seuraava</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">note <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> note<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>eli funktio saa parametrikseen muistiinpano-olion ja <em>palauttaa</em> sen kentän <em>id</em> arvon.</p>\n<p>Muuttamalla komento muotoon</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>tuloksena on taulukko, joka koostuu muistiinpanojen sisällöistä.</p>\n<p>Tämä on jo lähellä käyttämäämme React-koodia:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">notes.map<span class=\"token punctuation\">(</span>note <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note.id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>note.content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span>/li<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>joka muodostaa jokaista muistiinpano-olioa vastaavan <em>li</em>-tagin, jonka sisään tulee muistiinpanon sisältö.</p>\n<p>Koska metodin <em>map</em> parametrina olevan funktion</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">note <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note.id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>note.content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span>/li<span class=\"token operator\">></span></code></pre></div>\n<p>käyttötarkoitus on näkymäelementtien muodostaminen, tulee muuttujan arvo renderöidä aaltosulkeiden sisällä. Kokeile mitä koodi tekee, jos poistat aaltosulkeet.</p>\n<p>Aaltosulkeiden käyttö tulee varmaan aiheuttamaan alussa pientä päänvaivaa, mutta totut niihin pian. Reactin antama visuaalinen feedback on välitön.</p>\n<p>Tarkastellaan vielä erästä bugien lähdettä. Lisää koodiin seuraava</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">const result <span class=\"token operator\">=</span> notes.map<span class=\"token punctuation\">(</span>note <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>note.content<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\nconsole.log<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Tulostuu</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>undefined, undefined, undefined<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Missä on vika? Koodihan on ihan sama kun äsken toiminut koodi. Paitsi ei ihan. Metodin <em>map</em> parametrina on nyt seuraava funktio</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">note <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  note<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Koska funktio koostuu nyt <em>koodilohkosta</em> on funktion paluuarvo määrittelemätön eli <em>undefined</em>. Nuolifunktiot siis palauttavat ainoan komentonsa arvon, ainoastaan jos nuolifunktio on määritelty kompaktissa muodossaan, ilman koodilohkoa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">note <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">;</span></code></pre></div>\n<p>huomaa, että 'oneliner'-nuolifunktioissa kaikkea ei tarvitse eikä aina kannatakaan kirjoittaa samalle riville.</p>\n<p>Parempi muotoilu ohjelmamme muistiinpanorivit tuottavalle apufunktiolle saattaakin olla seuraava useille riveille jaoteltu versio:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">const rivit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> notes.map<span class=\"token punctuation\">(</span>note <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note.id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>note.content<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span>/li<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Kyse on kuitenkin edelleen yhden komennon sisältävästä nuolifunktiosta, komento vain sattuu olemaan hieman monimutkaisempi.</p>\n<h3>Antipattern: taulukon indeksit avaimina</h3>\n<p>Olisimme saaneet konsolissa olevan varoituksen katoamaan myös käyttämällä avaimina taulukon indeksejä. Indeksit selviävät käyttämällä map-metodissa myös toista parametria:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>näin kutsuttaessa <em>i</em> saa arvokseen sen paikan indeksin taulukossa, missä <em>note</em> sijaitsee.</p>\n<p>Eli virheetön tapa määritellä rivien generointi on</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">const rivit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> notes.map<span class=\"token punctuation\">((</span>note, i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>note.content<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span>/li<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Tämä <strong>ei kuitenkaan ole suositeltavaa</strong> ja voi näennäisestä toimimisestaan aiheuttaa joissakin tilanteissa pahoja ongelmia. Lue lisää esim. <a href=\"https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318\">täältä</a>.</p>\n<h3>Refaktorointia - moduulit</h3>\n<p>Siistitään koodia hiukan. Koska olemme kiinnostuneita ainoastaan propsien kentästä <em>notes</em>, otetaan se vastaan suoraan <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">destrukturointia</a> hyödyntäen:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const App = ({ notes }) =&gt; {\n  // ...\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Muistiinpanot&lt;/h1&gt;\n      &lt;ul&gt;\n        {rivit()}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Erotetaan yksittäisen muistiinpanon esittäminen oman komponenttinsa <em>Note</em> vastuulle:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const Note = ({ note }) =&gt; {\n  return (\n    &lt;li&gt;{note.content}&lt;/li&gt;\n  )\n}\n\nconst App = ({ notes }) =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Muistiinpanot&lt;/h1&gt;\n      &lt;ul&gt;\n        {notes.map(note=&gt;&lt;Note key={note.id} note={note}/&gt;)}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Huomaa, että <em>key</em>-attribuutti täytyy nyt määritellä <em>Note</em>-komponenteille, eikä <em>li</em>-tageille kuten ennen muutosta.</p>\n<p>Koko React-sovellus on mahdollista määritellä samassa tiedostossa, mutta se ei luonnollisesti ole järkevää. Usein käytäntönä on määritellä yksittäiset komponentit omassa tiedostossaan <em>ES6-moduuleina</em>.</p>\n<p>Koodissamme on käytetty koko ajan moduuleja. Tiedoston ensimmäiset rivit</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\">importtaavat</a> eli ottavat käyttöönsä kaksi moduulia. Moduuli <em>react</em> sijoitetaan muuttujaan <em>React</em> ja <em>react-dom</em> muuttujaan <em>ReactDOM</em>.</p>\n<p>Siirretään nyt komponentti <em>Note</em> omaan moduuliinsa.</p>\n<p>Pienissä sovelluksissa komponentit sijoitetaan yleensä <em>src</em>-hakemiston alle sijoitettavaan hakemistoon <em>components</em>. Konventiona on nimetä tiedosto komponentin mukaan, eli tehdään hakemisto <em>components</em> ja sinne tiedosto <em>Note.js</em> jonka sisältö on seuraava:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\n\nconst Note = ({ note }) =&gt; {\n  return (\n    &lt;li&gt;{note.content}&lt;/li&gt;\n  )\n}\n\nexport default Note</code></pre></div>\n<p>Koska kyseessä on React-komponentti, tulee React importata komponentissa.</p>\n<p>Moduulin viimeisenä rivinä <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export\">eksportataan</a> määritelty komponentti, eli muuttuja <em>Note</em>.</p>\n<p>Nyt komponenttia käyttävä tiedosto <em>index.js</em> voi <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\">importata</a> moduulin:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\nimport ReactDOM from &#39;react-dom&#39;\nimport Note from &#39;./components/Note&#39;</code></pre></div>\n<p>Moduulin eksporttaama komponentti on nyt käytettävissä muuttujassa <em>Note</em> täysin samalla tavalla kuin aiemmin.</p>\n<p>Huomaa, että itse määriteltyä komponenttia importatessa komponentin sijainti tulee ilmaista <em>suhteessa importtaavaan tiedostoon</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">&#39;./components/Note&#39;</code></pre></div>\n<p>Piste alussa viittaa nykyiseen hakemistoon, eli kyseessä on nykyisen hakemiston alihakemisto <em>components</em> ja sen sisällä tiedosto <em>Note.js</em>. Tiedoston päätteen voi jättää pois.</p>\n<p>Koska myös <em>App</em> on komponentti, eristetään sekin omaan moduuliinsa. Koska kyseessä on sovelluksen juurikomponentti, sijoitetaan se suoraan hakemistoon <em>src</em>. Tiedoston sisältö on seuraava:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\nimport Note from &#39;./components/Note&#39;\n\nconst App = ({ notes }) =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Muistiinpanot&lt;/h1&gt;\n      &lt;ul&gt;\n        {notes.map(note =&gt; &lt;Note key={note.id} note={note} /&gt;)}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App</code></pre></div>\n<p>Tiedoston <em>index.js</em> sisällöksi jää:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\nimport ReactDOM from &#39;react-dom&#39;\nimport App from &#39;./App&#39;\n\nconst notes = [\n  ...\n]\n\nReactDOM.render(\n  &lt;App notes={notes} /&gt;,\n  document.getElementById(&#39;root&#39;)\n)</code></pre></div>\n<p>Moduuleilla on paljon muutakin käyttöä kuin mahdollistaa komponenttien määritteleminen omissa tiedostoissaan, palaamme moduuleihin tarkemmin myöhemmin kurssilla.</p>\n<p>Sovelluksen tämänhetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/FullStack-HY/part2-notes/tree/part2-1\">githubissa</a></p>\n<p>Huomaa, että repositorion master-haarassa on myöhemmän vaiheen koodi, tämän hetken koodi on tagissa <a href=\"https://github.com/FullStack-HY/part2-notes/tree/part2-1\">part2-1</a>:</p>\n<picture><img src=\"/static/923772eecec018fc9fa017a858fd8e35/14be6/1b.png\" srcset=\"/static/923772eecec018fc9fa017a858fd8e35/4cce7/1b.png 200w,\n/static/923772eecec018fc9fa017a858fd8e35/bae5f/1b.png 400w,\n/static/923772eecec018fc9fa017a858fd8e35/14be6/1b.png 800w,\n/static/923772eecec018fc9fa017a858fd8e35/1b35a/1b.png 1200w,\n/static/923772eecec018fc9fa017a858fd8e35/9ee03/1b.png 1600w,\n/static/923772eecec018fc9fa017a858fd8e35/00da9/1b.png 1672w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Jos kloonaat projektin itsellesi, suorita komento <em>npm install</em> ennen käynnistämistä eli komentoa <em>npm start</em>.</p>\n<h3>Tehtäviä kokoelmien renderöinnistä</h3>\n</div>\n<div class=\"tasks\">\n<h3>Tehtävät 2.1</h3>\n<h4>kurssien sisältö</h4>\n<p>Viimeistellään nyt tehtävien 1.1-1.5 kurssin sisältöjä renderöivän ohjelman koodi. Voit ottaa tarvittaessa pohjaksi mallivastauksen koodin.</p>\n<p>Muutetaan komponentti <em>App</em> seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const App = () =&gt; {\n  const kurssi = {\n    nimi: &#39;Half Stack -sovelluskehitys&#39;,\n    osat: [\n      {\n        nimi: &#39;Reactin perusteet&#39;,\n        tehtavia: 10,\n        id: 1\n      },\n      {\n        nimi: &#39;Tiedonvälitys propseilla&#39;,\n        tehtavia: 7,\n        id: 2\n      },\n      {\n        nimi: &#39;Komponenttien tila&#39;,\n        tehtavia: 14,\n        id: 3\n      }\n    ]\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;Kurssi kurssi={kurssi} /&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Määrittele sovellukseen yksittäisen kurssin muotoilusta huolehtiva komponentti <em>Kurssi</em>.</p>\n<p>Sovelluksen komponenttirakenne voi olla esim. seuraava:</p>\n<pre>\nApp\n  Kurssi\n    Otsikko\n    Sisalto\n      Osa\n      Osa\n      ...\n</pre>\n<p>ja renderöityvä sivu voi näyttää esim. seuraavalta:</p>\n<picture><img src=\"/static/649b77631e24c268ac9aa2c363a1c666/14be6/8.png\" srcset=\"/static/649b77631e24c268ac9aa2c363a1c666/4cce7/8.png 200w,\n/static/649b77631e24c268ac9aa2c363a1c666/bae5f/8.png 400w,\n/static/649b77631e24c268ac9aa2c363a1c666/14be6/8.png 800w,\n/static/649b77631e24c268ac9aa2c363a1c666/1b35a/8.png 1200w,\n/static/649b77631e24c268ac9aa2c363a1c666/3daab/8.png 1348w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Tässä vaiheessa siis tehtävien yhteenlaskettua lukumäärää ei vielä tarvita.</p>\n<p>Sovelluksen täytyy luonnollisesti toimia <em>riippumatta kurssissa olevien osien määrästä</em>, eli varmista että sovellus toimii jos lisäät tai poistat kurssin osia.</p>\n<p>Varmista, että konsolissa ei näy mitään virheilmoituksia!</p>\n<h3>Tehtävät 2.2</h3>\n<h4>tehtävien määrä</h4>\n<p>Ilmoita myös kurssin yhteenlaskettu tehtävien lukumäärä:</p>\n<picture><img src=\"/static/2bcadc83ab65d725be7cb32629210702/14be6/9.png\" srcset=\"/static/2bcadc83ab65d725be7cb32629210702/4cce7/9.png 200w,\n/static/2bcadc83ab65d725be7cb32629210702/bae5f/9.png 400w,\n/static/2bcadc83ab65d725be7cb32629210702/14be6/9.png 800w,\n/static/2bcadc83ab65d725be7cb32629210702/1b35a/9.png 1200w,\n/static/2bcadc83ab65d725be7cb32629210702/81f21/9.png 1324w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Tehtävät 2.3*</h3>\n<h4>reduce</h4>\n<p>Jos et jo niin tehnyt, laske koodissasi tehtävien määrä taulukon metodilla <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\">reduce</a>.</p>\n<h3>Tehtävät 2.4</h3>\n<h4>monta kurssia</h4>\n<p>Laajennetaan sovellusta siten, että kursseja voi olla <em>mielivaltainen määrä</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const App = () =&gt; {\n  const kurssit = [\n    {\n      nimi: &#39;Half Stack -sovelluskehitys&#39;,\n      id: 1,\n      osat: [\n        {\n          nimi: &#39;Reactin perusteet&#39;,\n          tehtavia: 10,\n          id: 1\n        },\n        {\n          nimi: &#39;Tiedonvälitys propseilla&#39;,\n          tehtavia: 7,\n          id: 2\n        },\n        {\n          nimi: &#39;Komponenttien tila&#39;,\n          tehtavia: 14,\n          id: 3\n        }\n      ]\n    },\n    {\n      nimi: &#39;Node.js&#39;,\n      id: 2,\n      osat: [\n        {\n          nimi: &#39;Routing&#39;,\n          tehtavia: 3,\n          id: 1\n        },\n        {\n          nimi: &#39;Middlewaret&#39;,\n          tehtavia: 7,\n          id: 2\n        }\n      ]\n    }\n  ]\n\n  return (\n    &lt;div&gt;\n      // ...\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Sovelluksen ulkoasu voi olla esim seuraava:</p>\n<picture><img src=\"/static/5594d574622b8b8c7373f2cbc4af74a0/14be6/10.png\" srcset=\"/static/5594d574622b8b8c7373f2cbc4af74a0/4cce7/10.png 200w,\n/static/5594d574622b8b8c7373f2cbc4af74a0/bae5f/10.png 400w,\n/static/5594d574622b8b8c7373f2cbc4af74a0/14be6/10.png 800w,\n/static/5594d574622b8b8c7373f2cbc4af74a0/1b35a/10.png 1200w,\n/static/5594d574622b8b8c7373f2cbc4af74a0/ee6bc/10.png 1318w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Tehtävät 2.5</h3>\n<h4>erillinen moduuli</h4>\n<p>Määrittele komponentti <em>Kurssi</em> omana moduulinaan, jonka komponentti <em>App</em> importtaa. Voit sisällyttää kaikki kurssin alikomponentit samaan moduuliin.</p>\n</div>\n<div class=\"content\">\n</div>","frontmatter":{"title":"osa 2","subTitle":"Kokoelmien renderöinti ja moduulit","path":"/osa2/kokoelmat_ja_moduulit","mainImage":{"publicURL":"/static/part-2-2c709798e38da8a809241016507d8154.svg"},"partColor":"dark-orange","part":2,"letter":"a"}}},"pageContext":{}}