{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<h2>Muistiinpano-sovelluksen refaktorointia</h2>\n<p>Jatketaan osan 5 loppupuolella tehdyn muistiinpanosovelluksen yksinkertaistetun <a href=\"/osa5#redux-muistiinpanot\">redux-version</a> laajentamista.</p>\n<p>Sovelluksen tämänhetkinen koodi on <a href=\"https://github.com/FullStack-HY/redux-notes/tree/part5-6\">githubissa</a> tagissa <em>part5-6</em>.</p>\n<p>Tehdään koodiin muutamia rakenteellisia muutoksia. Siirretään reducerin määrittelevä tiedosto <em>noteReducer.js</em> hakemistoon <em>src/reducers</em>.</p>\n<p>Sovelluskehitystä helpottaaksemme laajennetaan reduceria siten, että storelle määritellään alkutila, jossa on pari muistiinpanoa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    content<span class=\"token punctuation\">:</span> <span class=\"token string\">'reduxin storen toiminnan määrittelee reduceri'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    content<span class=\"token punctuation\">:</span> <span class=\"token string\">'storen tilassa voi olla mielivaltaista dataa'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> noteReducer<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Siirretään <a href=\"https://redux.js.org/advanced/async-actions#synchronous-action-creators\">action creatorit</a>, eli sopivia <a href=\"https://redux.js.org/basics/actions\">action</a>-olioita generoivat apufunktiot reducerin kanssa samaan moduuliin:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    content<span class=\"token punctuation\">:</span> <span class=\"token string\">'reduxin storen toiminnan määrittelee reduceri'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    content<span class=\"token punctuation\">:</span> <span class=\"token string\">'storen tilassa voi olla mielivaltaista dataa'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'NEW_NOTE'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'TOGGLE_IMPORTANCE'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> noteToChange <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> changedNote <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>noteToChange<span class=\"token punctuation\">,</span>\n        important<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>noteToChange<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id <span class=\"token operator\">?</span> note <span class=\"token punctuation\">:</span> changedNote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateId</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteCreation</span> <span class=\"token operator\">=</span> content <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'NEW_NOTE'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      content<span class=\"token punctuation\">,</span>\n      important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      id<span class=\"token punctuation\">:</span> <span class=\"token function\">generateId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">importanceToggling</span> <span class=\"token operator\">=</span> id <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'TOGGLE_IMPORTANCE'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> noteReducer<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Moduulissa on nyt useita <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export\">export</a>-komentoja.</p>\n<p>Reducer-funktio palautetaan edelleen komennolla <em>export default</em>. Tämän ansiosta reducer importataan (tiedostossa <em>index.js</em>) tuttuun tapaan:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> noteReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducers/noteReducer'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Moduulilla voi olla vain <em>yksi default export</em>, mutta useita \"normaaleja\" exporteja, kuten <em>Action creator</em> -funktiot esimerkissämme</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteCreation</span> <span class=\"token operator\">=</span> content <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">importanceToggling</span> <span class=\"token operator\">=</span> id <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Normaalisti exportattujen funktioiden käyttöönotto tapahtuu aaltosulkusyntaksilla:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> noteCreation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./../reducers/noteReducer'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sovelluksen tämänhetkinen koodi on <a href=\"https://github.com/FullStack-HY/redux-notes/tree/part6-1\">githubissa</a> tagissä <em>part6-1</em>.</p>\n<h2>Monimutkaisempi tila storessa</h2>\n<p>Toteutetaan sovellukseen näytettävien muistiinpanojen filtteröinti, jonka avulla näytettäviä muistiinpanoja voidaan rajata. Filtterin toteutus tapahtuu <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio\">radiobuttoneiden</a> avulla:</p>\n<picture><img src=\"/static/e3c779c1ee086430ef1ca18b298a87f1/14be6/1.png\" srcset=\"/static/e3c779c1ee086430ef1ca18b298a87f1/4cce7/1.png 200w,\n/static/e3c779c1ee086430ef1ca18b298a87f1/bae5f/1.png 400w,\n/static/e3c779c1ee086430ef1ca18b298a87f1/14be6/1.png 800w,\n/static/e3c779c1ee086430ef1ca18b298a87f1/1b35a/1.png 1200w,\n/static/e3c779c1ee086430ef1ca18b298a87f1/2c91e/1.png 1548w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Aloitetaan todella suoraviivaisella toteutuksella:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">class App extends React.Component {\n  filterSelected = (value) =&gt; () =&gt; {\n    console.log(value)\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;NoteForm /&gt;\n        &lt;div&gt;\n          kaikki    &lt;input type=&quot;radio&quot; name=&quot;filter&quot;\n                      onChange={this.filterSelected(&#39;ALL&#39;)}/&gt;\n          tärkeät   &lt;input type=&quot;radio&quot; name=&quot;filter&quot;\n                      onChange={this.filterSelected(&#39;IMPORTANT&#39;)}/&gt;\n          eitärkeät &lt;input type=&quot;radio&quot; name=&quot;filter&quot;\n                      onChange={this.filterSelected(&#39;NONIMPORTANT&#39;)}/&gt;\n        &lt;/div&gt;\n        &lt;NoteList /&gt;\n      &lt;/div&gt;\n    )\n  }\n}</code></pre></div>\n<p>Koska painikkeiden attribuutin <em>name</em> arvo on kaikilla sama, muodostavat ne <em>nappiryhmän</em>, joista ainoastaan yksi voi olla kerrallaan valittuna.</p>\n<p>Napeille on määritelty muutoksenkäsittelijä, joka tällä hetkellä ainoastaan tulostaa painettua nappia vastaavan merkkijonon konsoliin.</p>\n<p>Päätämme toteuttaa filtteröinnin siten, että talletamme muistiinpanojen lisäksi sovelluksen storeen myös <em>filtterin arvon</em>. Eli muutoksen jälkeen storessa olevan tilan tulisi näyttää seuraavalta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  notes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> content<span class=\"token punctuation\">:</span> <span class=\"token string\">'reduxin storen toiminnan määrittelee reduceri'</span><span class=\"token punctuation\">,</span> important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> content<span class=\"token punctuation\">:</span> <span class=\"token string\">'storen tilassa voi olla mielivaltaista dataa'</span><span class=\"token punctuation\">,</span> important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  filter<span class=\"token punctuation\">:</span> <span class=\"token string\">'IMPORTANT'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tällä hetkellähän tilassa on ainoastaan muistiinpanot sisältävä taulukko. Uudessa ratkaisussa tilalla on siis kaksi avainta, <em>notes</em> jonka arvona muistiinpanot ovat sekä <em>filter</em>, jonka arvona on merkkijono joka kertoo mitkä muistiinpanoista tulisi näyttää ruudulla.</p>\n<h3>Yhdistetyt reducerit</h3>\n<p>Voisimme periaatteessa muokata jo olemassaolevaa reduceria ottamaan huomioon muuttuneen tilanteen. Parempi ratkaisu on kuitenkin määritellä tässä tilanteessa uusi, filtterin arvosta huolehtiva reduceri:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> filterReducer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token string\">'ALL'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'SET_FILTER'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> action<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Filtterin arvon asettavat actionit ovat siis muotoa</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'SET_FILTER'</span><span class=\"token punctuation\">,</span>\n  filter<span class=\"token punctuation\">:</span> <span class=\"token string\">'IMPORTANT'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Määritellään samalla myös sopiva <em>action creator</em> -funktio. Sijoitetaan koodi moduuliin <em>src/reducers/filterReducer.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> filterReducer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token string\">'ALL'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">filterChange</span> <span class=\"token operator\">=</span> filter <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'SET_FILTER'</span><span class=\"token punctuation\">,</span>\n    filter<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> filterReducer<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Saamme nyt muodostettua varsinaisen reducerin yhdistämällä kaksi olemassaolevaa reduceria funktion <a href=\"https://redux.js.org/api-reference/combinereducers\">combineReducers</a> avulla.</p>\n<p>Määritellään yhdistetty reduceri tiedostossa <em>index.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\nimport ReactDOM from &#39;react-dom&#39;\nimport { createStore, combineReducers } from &#39;redux&#39;\nimport { Provider } from &#39;react-redux&#39;\nimport App from &#39;./App&#39;\nimport noteReducer from &#39;./reducers/noteReducer&#39;\nimport filterReducer from &#39;./reducers/filterReducer&#39;\n\nconst reducer = combineReducers({\n  notes: noteReducer,\n  filter: filterReducer\n})\n\nconst store = createStore(reducer)\n\nconsole.log(store.getState())\n\nReactDOM.render(\n  &lt;Provider store={store}&gt;\n    &lt;div&gt; &lt;/div&gt;\n  &lt;/Provider&gt;,\ndocument.getElementById(&#39;root&#39;))</code></pre></div>\n<p>Koska sovelluksemme hajoaa tässä vaiheessa täysin, komponentin <em>App</em> sijasta renderöidään tyhjä <em>div</em>-elementti.</p>\n<p>Konsoliin tulostuu storen tila:</p>\n<picture><img src=\"/static/5051fd826fdf82f90e9326b9b2e82875/14be6/2.png\" srcset=\"/static/5051fd826fdf82f90e9326b9b2e82875/4cce7/2.png 200w,\n/static/5051fd826fdf82f90e9326b9b2e82875/bae5f/2.png 400w,\n/static/5051fd826fdf82f90e9326b9b2e82875/14be6/2.png 800w,\n/static/5051fd826fdf82f90e9326b9b2e82875/1b35a/2.png 1200w,\n/static/5051fd826fdf82f90e9326b9b2e82875/9ee03/2.png 1600w,\n/static/5051fd826fdf82f90e9326b9b2e82875/4f68a/2.png 1874w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>eli store on juuri siinä muodossa missä haluammekin sen olevan!</p>\n<p>Tarkastellaan vielä yhdistetyn reducerin luomista</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  notes<span class=\"token punctuation\">:</span> noteReducer<span class=\"token punctuation\">,</span>\n  filter<span class=\"token punctuation\">:</span> filterReducer<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Näin tehdyn reducerin määrittelemän storen tila on olio, jossa on kaksi kenttää, <em>notes</em> ja <em>filter</em>. Tilan kentän <em>notes</em> arvon määrittelee <em>noteReducer</em>, jonka ei tarvitse välittää mitään tilan muista kentistä. Vastaavasti <em>filter</em> kentän käsittely tapahtuu <em>filterReducer</em>:in avulla.</p>\n<p>Ennen muun koodin muutoksia, kokeillaan vielä konsolista, miten actionit muuttavat yhdistetyn reducerin muodostamaa staten tilaa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//...</span>\n<span class=\"token keyword\">import</span> noteReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> noteCreation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducers/noteReducer'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> filterReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> filterChange <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducers/filterReducer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  notes<span class=\"token punctuation\">:</span> noteReducer<span class=\"token punctuation\">,</span>\n  filter<span class=\"token punctuation\">:</span> filterReducer<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">filterChange</span><span class=\"token punctuation\">(</span><span class=\"token string\">'IMPORTANT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">noteCreation</span><span class=\"token punctuation\">(</span><span class=\"token string\">'combineReducers muodostaa yhdistetyn reducerin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Konsoliin tulostuu storen tila:</p>\n<picture><img src=\"/static/83a1b076646fee2dc3280855e651286c/14be6/3.png\" srcset=\"/static/83a1b076646fee2dc3280855e651286c/4cce7/3.png 200w,\n/static/83a1b076646fee2dc3280855e651286c/bae5f/3.png 400w,\n/static/83a1b076646fee2dc3280855e651286c/14be6/3.png 800w,\n/static/83a1b076646fee2dc3280855e651286c/1b35a/3.png 1200w,\n/static/83a1b076646fee2dc3280855e651286c/9ee03/3.png 1600w,\n/static/83a1b076646fee2dc3280855e651286c/a5108/3.png 1726w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Jo tässä vaiheessa kannattaa laittaa mieleen eräs tärkeä detalji. Jos lisäämme <em>molempien reducerien alkuun</em> konsoliin tulostuksen:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> filterReducer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token string\">'ALL'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ACTION: '</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Näyttää konsolin perusteella siltä, että jokainen action kahdentuu:</p>\n<picture><img src=\"/static/430abd5399e0ac8080e0d93a83683c41/14be6/4.png\" srcset=\"/static/430abd5399e0ac8080e0d93a83683c41/4cce7/4.png 200w,\n/static/430abd5399e0ac8080e0d93a83683c41/bae5f/4.png 400w,\n/static/430abd5399e0ac8080e0d93a83683c41/14be6/4.png 800w,\n/static/430abd5399e0ac8080e0d93a83683c41/1b35a/4.png 1200w,\n/static/430abd5399e0ac8080e0d93a83683c41/248be/4.png 1578w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Onko koodissa bugi? Ei. Yhdistetty reducer toimii siten, että jokainen <em>action</em> käsitellään <em>kaikissa</em> yhdistetyn reducerin osissa. Usein tietystä actionista on kiinnostunut vain yksi reduceri, on kuitenkin tilanteita, joissa useampi reduceri muuttaa hallitsemaansa staten tilaa jonkin actionin seurauksena.</p>\n<h3>Sovelluksen viimeistely</h3>\n<p>Viimeistellään nyt sovellus käyttämään yhdistettyä reduceria, eli palautetaan tiedostossa <em>index.js</em> suoritettava renderöinti muotoon</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">ReactDOM.render(\n  &lt;Provider store={store}&gt;\n    &lt;App /&gt;\n  &lt;/Provider&gt;,\n  document.getElementById(&#39;root&#39;))</code></pre></div>\n<p>Korjataan sitten bugi, joka johtuu siitä, että koodi olettaa storen tilan olevan mustiinpanot tallettava taulukko:</p>\n<picture><img src=\"/static/bdf7db7bc2a52ec058453dd1bf264eff/14be6/5.png\" srcset=\"/static/bdf7db7bc2a52ec058453dd1bf264eff/4cce7/5.png 200w,\n/static/bdf7db7bc2a52ec058453dd1bf264eff/bae5f/5.png 400w,\n/static/bdf7db7bc2a52ec058453dd1bf264eff/14be6/5.png 800w,\n/static/bdf7db7bc2a52ec058453dd1bf264eff/1b35a/5.png 1200w,\n/static/bdf7db7bc2a52ec058453dd1bf264eff/9ee03/5.png 1600w,\n/static/bdf7db7bc2a52ec058453dd1bf264eff/4ba44/5.png 1660w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Korjaus on helppo. Viitteen <code>this.context.store.getState()</code> sijaan kaikki muistiinpanot sisältävään taulukkoon viitataan <code>this.context.store.getState().notes</code>.</p>\n<p>Ennakoiden tulevaa eriytetään näytettävien muistiinpanojen selvittämisen huolehtiminen funktioon <em>notesToShow</em>, joka vielä tässä vaiheessa palauttaa kaikki muistiinpanot:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">class NoteList extends React.Component {\n  // ...\n\n  render() {\n    const notesToShow = () =&gt; {\n      return this.context.store.getState().notes\n    }\n\n    return (\n      &lt;ul&gt;\n        {notesToShow().map(note =&gt;\n          &lt;Note\n            key={note.id}\n            note={note}\n            handleClick={this.toggleImportance(note.id)}\n          /&gt;\n        )}\n      &lt;/ul&gt;\n    )\n  }\n}</code></pre></div>\n<p>Eriytetään näkyvyyden säätelyfiltteri omaksi, tiedostoon sijoitettavaksi <em>src/components/VisibilityFilter.js</em> komponentiksi:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\nimport PropTypes from &#39;prop-types&#39;\nimport { filterChange } from &#39;../reducers/filterReducer&#39;\n\nclass VisibilityFilter extends React.Component {\n  componentDidMount() {\n    const { store } = this.context\n    this.unsubscribe = store.subscribe(() =&gt;\n      this.forceUpdate()\n    )\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe()\n  }\n\n  filterClicked = (value) =&gt; () =&gt; {\n    this.context.store.dispatch(filterChange(value))\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        kaikki    &lt;input type=&quot;radio&quot; name=&quot;filter&quot; onChange={this.filterClicked(&#39;ALL&#39;)} /&gt;\n        tärkeät   &lt;input type=&quot;radio&quot; name=&quot;filter&quot; onChange={this.filterClicked(&#39;IMPORTANT&#39;)} /&gt;\n        eitärkeät &lt;input type=&quot;radio&quot; name=&quot;filter&quot; onChange={this.filterClicked(&#39;NONIMPORTANT&#39;)} /&gt;\n      &lt;/div&gt;\n    )\n  }\n}\n\nVisibilityFilter.contextTypes = {\n  store: PropTypes.object\n}\n\nexport default VisibilityFilter</code></pre></div>\n<p>Toteutus on suoraviivainen, radiobuttonin klikkaaminen muuttaa storen kentän <em>filter</em> tilaa.</p>\n<p>Muutetaan vielä komponentin <em>NoteList</em> metodi <em>notesToShow</em> ottamaan huomioon filtteri</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">notesToShow</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> notes<span class=\"token punctuation\">,</span> filter <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filter <span class=\"token operator\">===</span> <span class=\"token string\">'ALL'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> notes<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> filter <span class=\"token operator\">===</span> <span class=\"token string\">'IMPORTANT'</span>\n    <span class=\"token operator\">?</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">:</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>note<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Huomaa miten storen tilan kentät on otettu tuttuun tapaan destrukturoimalla apumuuttujiin</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> notes<span class=\"token punctuation\">,</span> filter <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>siis on sama kuin kirjoittaisimme</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> filter <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sovelluksen tämänhetkinen koodi on <a href=\"https://github.com/FullStack-HY/redux-notes/tree/part6-2\">githubissa</a> tagissä <em>part6-2</em>.</p>\n<p>Sovelluksessa on vielä pieni kauneusvirhe, vaikka oletusarvosesti filtterin arvo on <em>ALL</em>, eli näytetään kaikki muistiinpanot, ei vastaava radiobutton ole valittuna. Ongelma on luonnollisestikin mahdollista korjata, mutta koska kyseessä on ikävä, mutta harmiton feature, jätämme korjauksen myöhemmäksi.</p>\n<h2>Tehtäviä</h2>\n<p>Tee nyt tehtävät <a href=\"/teht%C3%A4v%C3%A4t/#osa-6\">6.1-6.5</a></p>\n<h2>Connect</h2>\n<p>Kaikissa Redux-storea käyttävissä komponenteissa on runsaasti samaa koodia</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ComponentUsingReduxStore</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> store <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unsubscribe <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nComponentUsingReduxStore<span class=\"token punctuation\">.</span>contextTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  store<span class=\"token punctuation\">:</span> PropTypes<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Vaikka rivit on helppo copy-pasteta aina uusiin komponentteihin, ei tämä ole tarkoituksenmukaista. Osan 5 luvussa <a href=\"/osa5#staten-v%C3%A4litt%C3%A4minen-propseissa-ja-contextissa\">staten välittäminen propseissa ja contextissa</a> myös varoiteltiin luottamasta liikaa Reactin Context API:iin, se on kokeellinen ja saattaa poistua tulevissa versioissa. Contextia on siis ainakin tässä vaiheessa käytettävä varovasti.</p>\n<p><a href=\"https://github.com/reactjs/react-redux\">React Redux</a> -kirjaston määrittelemä funktio <a href=\"https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options\">connect</a> on paras ratkaisu siihen, miten Redux-store saadaan välitettyä React-componenteille.</p>\n<p>Connect voi olla aluksi haastava sisäistää, mutta hieman vaivaa kannattaa ehdottomasti nähdä. Tutustutaan nyt connectin käyttöön. Asensimme jo edellisessä osassa kirjaston, joten voimme aloittaa sen käytön suoraan.</p>\n<p>Tutkitaan ensin komponenttia <em>NoteList</em>. Funktiota <em>connect</em> käyttämällä \"normaaleista\" React-komponenteista saadaan muodostettua komponentteja, joiden <em>propseihin</em> on \"mäpätty\" eli yhdistetty haluttuja osia storen määrittelemästä tilasta.</p>\n<p>Muodostetaan ensin komponentista <em>NoteList</em> connectin avulla <em>yhdistetty komponentti</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NoteList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> ConnectedNoteList <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NoteList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ConnectedNoteList<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Moduuli eksporttaa nyt alkuperäisen komponentin sijaan <em>yhdistetyn komponentin</em>, joka toimii toistaiseksi täsmälleen alkuperäisen komponentin kaltaisesti.</p>\n<p>Komponentti tarvitsee storesta sekä muistiinpanojen listan, että filtterin arvon. Funktion <em>connect</em> ensimmäisenä parametrina voidaan määritellä funktio <a href=\"https://github.com/reactjs/react-redux/blob/master/docs/api.md#arguments\">mapStateToProps</a>, joka liittää joitakin storen tilan perusteella määriteltyjä asioita connectilla muodostetun <em>yhdistetyn komponentin</em> propseiksi.</p>\n<p>Jos määritellään:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> state <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    notes<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">,</span>\n    filter<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ConnectedNoteList <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NoteList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ConnectedNoteList<span class=\"token punctuation\">;</span></code></pre></div>\n<p>on komponentin <em>NoteList</em> sisällä mahdollista viitata storen tilaan, esim. muistiinpanoihin suoraan propsin kautta <em>props.notes</em> sen sijaan, että käytettäisiin suoraan contextia muodossa <em>this.context.store.getState().notes</em>. Vastaavasti <em>props.filter</em> viittaa storessa olevaan filter-kentän tilaan.</p>\n<p>Metodin <em>render</em> sisältö pelkistyy seuraavasti</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NoteList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">notesToShow</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> notes<span class=\"token punctuation\">,</span> filter <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filter <span class=\"token operator\">===</span> <span class=\"token string\">'ALL'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> notes<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">return</span> filter <span class=\"token operator\">===</span> <span class=\"token string\">'IMPORTANT'</span>\n        <span class=\"token operator\">?</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">:</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>note<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Connect-komennolla, ja <em>mapStateToProps</em>-määrittelyllä aikaan saatua tilannetta voidaan visualisoida seuraavasti:</p>\n<picture><img src=\"/static/9b0db201aaba8e035a782f2f07364ab2/14be6/5b.png\" srcset=\"/static/9b0db201aaba8e035a782f2f07364ab2/4cce7/5b.png 200w,\n/static/9b0db201aaba8e035a782f2f07364ab2/bae5f/5b.png 400w,\n/static/9b0db201aaba8e035a782f2f07364ab2/14be6/5b.png 800w,\n/static/9b0db201aaba8e035a782f2f07364ab2/1b35a/5b.png 1200w,\n/static/9b0db201aaba8e035a782f2f07364ab2/2e309/5b.png 1382w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>eli komponentin <em>NoteList</em> sisältä on propsien <em>props.notes</em> ja <em>props.filter</em> kautta \"suora pääsy\" tarkastelemaan Redux storen sisällä olevaa tilaa.</p>\n<p><em>NoteList</em> viittaa edelleen suoraan kontekstin kautta storen metodiin <em>dispatch</em>, jota se tarvitsee action creatorin <em>importanceToggling</em> avulla tehdyn actionin dispatchaamiseen:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">toggleImportance</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">importanceToggling</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<p>Connect-funktion toisena parametrina voidaan määritellä <a href=\"https://github.com/reactjs/react-redux/blob/master/docs/api.md#arguments\">mapDispatchToProps</a> eli joukko <em>action creator</em> -funktioita, jotka välitetään yhdistetylle komponentille propseina. Laajennetaan connectausta seuraavasti</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> state <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    notes<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">,</span>\n    filter<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mapDispatchToProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  importanceToggling<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ConnectedNoteList <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  mapStateToProps<span class=\"token punctuation\">,</span>\n  mapDispatchToProps\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NoteList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ConnectedNoteList<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nyt komponentti voi dispatchata suoraan action creatorin <em>importanceToggling</em> määrittelemän actionin kutsumalla propsien kautta saamaansa funktiota koodissa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NoteList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">toggleImportance</span> <span class=\"token operator\">=</span> id <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">importanceToggling</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Storen <em>dispatch</em>-funktiota ei enää tarvitse kutsua, sillä <em>connect</em> on muokannut action creatorin <em>importanceToggling</em> sellaiseen muotoon, joka sisältää dispatchauksen.</p>\n<p><em>mapDispatchToProps</em> lienee aluksi hieman haastava ymmärtää, etenkin sen kohta käsiteltävä <a href=\"/osa6/#mapdispatchtopropsin-vaihtoehtoinen-k%C3%A4ytt%C3%B6tapa\">vaihtoehtoinen käyttötapa</a>.</p>\n<p>Connectin aikaansaamaa tilannetta voidaan havainnollistaa seuraavasti:</p>\n<picture><img src=\"/static/f41667cdd6a8f0dfb230ba0207d60a20/14be6/5c.png\" srcset=\"/static/f41667cdd6a8f0dfb230ba0207d60a20/4cce7/5c.png 200w,\n/static/f41667cdd6a8f0dfb230ba0207d60a20/bae5f/5c.png 400w,\n/static/f41667cdd6a8f0dfb230ba0207d60a20/14be6/5c.png 800w,\n/static/f41667cdd6a8f0dfb230ba0207d60a20/1b35a/5c.png 1200w,\n/static/f41667cdd6a8f0dfb230ba0207d60a20/78a53/5c.png 1564w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>eli sen lisäksi että <em>NoteList</em> pääsee storen tilaan propsien <em>props.notes</em> ja <em>props.filter</em> kautta, se viittaa <em>props.importanceToggling</em>:lla funktioon, jonka avulla storeen saadaan dispatchattua <em>TOGGLE</em>IMPORTANCE_-tyyppisiä actioneja.</p>\n<p>Koska komponentti saa storeen liittyvät asiat propseina, voidaan koodista poistaa metodit <em>componentDidMount</em> ja <em>componentWillUnMount</em> jotka huolehtivat komponentin uudelleenrenderöitymisestä storen tilan muuttuessa. Connect tekee tämän puolestamme.</p>\n<p>Komponentti <em>NoteList</em> ei tarvitse storea enää mihinkään, se saa kaiken tarvitsemansa propseina <em>connect</em>-funktion ansiosta. Komponentti ei käytä enää suoraan contextia, joten koodi yksinkertaistuu seuraavaan muotoon:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\nimport { connect } from &#39;react-redux&#39;\nimport { importanceToggling } from &#39;./../reducers/noteReducer&#39;\nimport Note from &#39;./Note&#39;\n\nclass NoteList extends React.Component {\n  render() {\n    const notesToShow = () =&gt; {\n      const { notes, filter } = this.props\n      if (filter === &#39;ALL&#39;) {\n        return notes\n      }\n\n      return filter === &#39;IMPORTANT&#39;\n        ? notes.filter(note =&gt; note.important)\n        : notes.filter(note =&gt; !note.important)\n    }\n\n    return (\n      &lt;ul&gt;\n        {notesToShow().map(note =&gt;\n          &lt;Note\n            key={note.id}\n            note={note}\n            handleClick={() =&gt; this.props.importanceToggling(note.id)}\n          /&gt;\n        )}\n      &lt;/ul&gt;\n    )\n  }\n}\n\nconst mapStateToProps = (state) =&gt; {\n  return {\n    notes: state.notes,\n    filter: state.filter\n  }\n}\n\nconst ConnectedNoteList = connect(\n  mapStateToProps,\n  { importanceToggling }\n)(NoteList)\n\nexport default ConnectedNoteList</code></pre></div>\n<p>Koodi sisältää pari muutakin oikaisua, mm. apumetodista <em>toggleImportance</em> on hankkiuduttu eroon.\nItseasiassa komponentti on nyt niin yksinkertainen että se voitaisiin määritellä funktionaalisena komponenttina. Emme kuitenkaan tee muutosta nyt.</p>\n<p>Otetaan <em>connect</em> käyttöön myös uuden muistiinpanon luomisessa:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\nimport { noteCreation } from &#39;./../reducers/noteReducer&#39;\nimport { connect } from &#39;react-redux&#39;\n\nclass NoteForm extends React.Component {\n\n  addNote = (event) =&gt; {\n    event.preventDefault()\n    this.props.noteCreation(event.target.note.value)\n    event.target.note.value = &#39;&#39;\n  }\n\n  render() {\n    return (\n      &lt;form onSubmit={this.addNote}&gt;\n        &lt;input name=&quot;note&quot; /&gt;\n        &lt;button&gt;lisää&lt;/button&gt;\n      &lt;/form&gt;\n    )\n  }\n}\n\nexport default connect(\n  null,\n  { noteCreation }\n)(NoteForm)</code></pre></div>\n<p>Koska komponentti ei tarvitse storen tilasta mitään, on funktion <em>connect</em> ensimmäinen parametri <em>null</em>.</p>\n<p>Sovelluksen tämänhetkinen koodi on <a href=\"https://github.com/FullStack-HY/redux-notes/tree/part6-3\">githubissa</a> tagissä <em>part6-3</em>.</p>\n<h3>Provider</h3>\n<p>Funktion <em>connect</em> käytön edellytyksenä on se, että sovellus on määritelty React redux kirjaston tarjoaman <a href=\"https://github.com/reactjs/react-redux/blob/master/docs/api.md#provider-store\">Provider</a>-komponentin lapseksi ja että sovelluksen käyttämä store on annettu Provider-komponentin attribuutiksi <em>store</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\nimport ReactDOM from &#39;react-dom&#39;\nimport { createStore, combineReducers } from &#39;redux&#39;\nimport { Provider } from &#39;react-redux&#39;\nimport App from &#39;./App&#39;\nimport noteReducer from &#39;./reducers/noteReducer&#39;\nimport filterReducer from &#39;./reducers/filterReducer&#39;\n\nconst reducer = combineReducers({\n  notes: noteReducer,\n  filter: filterReducer\n})\n\nconst store = createStore(reducer)\n\nReactDOM.render(\n  &lt;Provider store={store}&gt;\n    &lt;App /&gt;\n  &lt;/Provider&gt;,\n  document.getElementById(&#39;root&#39;))</code></pre></div>\n<p>Lisäsimme jo edellisen osan lopussa sovellukseen <em>Providerin</em>, joten <em>connect</em> oli tällä kertaa suoraan käytettävissä.</p>\n<h3>Huomio propsina välitettyyn action creatoriin viittaamisesta</h3>\n<p>Tarkastellaan vielä erästä mielenkiintoista seikkaa komponentista <em>NoteForm</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\nimport { noteCreation } from &#39;./../reducers/noteReducer&#39;\nimport { connect } from &#39;react-redux&#39;\n\nclass NoteForm extends React.Component {\n\n  addNote = (event) =&gt; {\n    event.preventDefault()\n    this.props.noteCreation(event.target.note.value)\n    event.target.note.value = &#39;&#39;\n  }\n\n  render() {\n    // ...\n  }\n}\n\nexport default connect(\n  null,\n  { noteCreation }\n)(NoteForm)</code></pre></div>\n<p>Aloittelevalle connectin käyttäjälle aiheuttaa joskus ihmetystä se, että action creatorista <em>noteCreation</em> on komponentin sisällä käytettävissä <em>kaksi eri versiota</em>.</p>\n<p>Funktioon tulee viitata propsien kautta, eli <em>this.props.noteCreation</em>, tällöin kyseessä on <em>connectin</em> muotoilema, <em>dispatchauksen sisältävä</em> versio funktiosta.</p>\n<p>Moduulissa olevan import-lauseen</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> noteCreation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./../reducers/noteReducer'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ansiosta komponentin sisältä on mahdollista viitata funktioon myös suoraan, eli <em>noteCreation</em>. Näin ei kuitenkaan tule tehdä, sillä silloin on kyseessä alkuperäinen action creator joka <em>ei sisällä dispatchausta</em>.</p>\n<p>Jos tulostamme funktiot koodin sisällä (emme olekaan vielä käyttäneet kurssilla tätä erittäin hyödyllistä debug-kikkaa)</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">render() {\n  console.log(noteCreation)\n  console.log(this.props.noteCreation)\n  return (\n    &lt;form onSubmit={this.addNote}&gt;\n      &lt;input name=&quot;note&quot; /&gt;\n      &lt;button&gt;lisää&lt;/button&gt;\n    &lt;/form&gt;\n  )\n}</code></pre></div>\n<p>näemme eron:</p>\n<picture><img src=\"/static/eb383dd9fbafd64a8231aae424434fee/14be6/5d.png\" srcset=\"/static/eb383dd9fbafd64a8231aae424434fee/4cce7/5d.png 200w,\n/static/eb383dd9fbafd64a8231aae424434fee/bae5f/5d.png 400w,\n/static/eb383dd9fbafd64a8231aae424434fee/14be6/5d.png 800w,\n/static/eb383dd9fbafd64a8231aae424434fee/1b35a/5d.png 1200w,\n/static/eb383dd9fbafd64a8231aae424434fee/92884/5d.png 1378w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Ensimmäinen funktioista siis on normaali <em>action creator</em>, toinen taas connectin muotoilema funktio, joka sisältää storen metodin dispatch-kutsun.</p>\n<p>Connect on erittäin kätevä työkalu, mutta abstraktiutensa takia kenties käsitteellisesti haastavin kurssin tähänastisista asioista.</p>\n<p>Viimeistään nyt kannattaa katsoa kokonaisuudessaan Egghead.io:ta Reduxin kehittäjän Dan Abramovin loistava tuoriaali <a href=\"https://egghead.io/courses/getting-started-with-redux\">Getting started with Redux</a>. Neljässä viimeisessä videossa käsitellään <em>connect</em>-metodia.</p>\n<p>Siinä vaiheessa kun videot on tehty, connectin käyttö oli asteen verran nykyistä hankalampaa, sillä esimerkeissä käyttämämme tapa määritellä connectin toinen parametri <em>mapDispatchToProps</em> suoraan <em>action creator</em> -funktioiden avulla ei ollut vielä mahdollinen. Katsotaan seuraavassa luvussa lyhyesti vaihtoehtoista, \"hankalampaa\" tapaa, sitä näkee usein vanhemmassa React-koodissa, joten sen tunteminen on oleellista.</p>\n<h3>mapDispatchToPropsin vaihtoehtoinen käyttötapa</h3>\n<p>Määrittelimme siis connectin komponentille <em>NoteForm</em> antamat actioneja dispatchaavan funktion seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NoteForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> noteCreation <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NoteForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Eli määrittelyn ansiosta komponentti dispatchaa uuden muistiinpanon lisäyksen suorittavan actionin suoraan komennolla <code>this.props.noteCreation('uusi muistiinpano')</code>.</p>\n<p>Parametrin <em>mapDispatchToProps</em> kenttinä ei voi antaa mitä tahansa funktiota, vaan funktion on oltava <em>action creator</em>, eli Redux-actionin palauttava funktio.</p>\n<p>Kannattaa huomata, että parametri <em>mapDispatchToProps</em> on nyt <em>olio</em>, sillä määrittely</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  noteCreation<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>on lyhempi tapa määritellä olioliteraali</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  noteCreation<span class=\"token punctuation\">:</span> noteCreation<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>eli olio, jonka ainoan kentän <em>noteCreation</em> arvona on funktio <em>noteCreation</em>.</p>\n<p>Voimme määritellä saman myös \"pitemmän kaavan\" kautta, antamalla <em>connectin</em> toisena parametrina seuraavanlaisen <em>funktion</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NoteForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> dispatch <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    createTodo<span class=\"token punctuation\">:</span> value <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">noteCreation</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  mapDispatchToProps\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NoteForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tässä vaihtoehtoisessa tavassa <em>mapDispatchToProps</em> on funktio, jota <em>connect</em> kutsuu antaen sille parametriksi storen <em>dispatch</em>-funktion. Funktion paluuarvona on olio, joka määrittelee joukon funktioita, jotka annetaan connectoitavalle komponentille propsiksi. Esimerkkimme määrittelee propsin <em>createTodo</em> olevan funktion</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">value <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">noteCreation</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>eli action creatorilla luodun actionin dispatchaus.</p>\n<p>Komponentti siis viittaa funktioon propsin <em>this.props.createTodo</em> kautta:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">class NoteForm extends React.Component {\n\n  addNote = (event) =&gt; {\n    event.preventDefault()\n    this.props.createTodo(event.target.note.value)\n    event.target.note.value = &#39;&#39;\n  }\n\n  render() {\n    return (\n      &lt;form onSubmit={this.addNote}&gt;\n        &lt;input name=&quot;note&quot; /&gt;\n        &lt;button&gt;lisää&lt;/button&gt;\n      &lt;/form&gt;\n    )\n  }\n}</code></pre></div>\n<p>Konsepti on hiukan monimutkainen ja sen selittäminen sanallisesti on haastavaa. Kannattaa katsoa huolellisesti Dan Abramovin videot ja koittaa miettiä mistä on kyse.</p>\n<p>Useimmissa tapauksissa riittää <em>mapDispatchToProps</em>:in yksinkertaisempi muoto. On kuitenkin tilanteita, joissa monimutkaisempi muoto on tarpeen, esim. jos määriteltäessä propseiksi mäpättyjä <em>dispatchattavia actioneja</em> on <a href=\"https://github.com/gaearon/redux-devtools/issues/250#issuecomment-186429931\">viitattava komponentin omiin propseihin</a>.</p>\n<h2>Presentational/Container revisited</h2>\n<p>Komponentti <em>NoteList</em> käyttää apumetodia <em>notesToShow</em>, joka päättelee filtterin perusteella näytettävien muistiinpanojen listan:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">notesToShow</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> notes<span class=\"token punctuation\">,</span> filter <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filter <span class=\"token operator\">===</span> <span class=\"token string\">'ALL'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> notes<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> filter <span class=\"token operator\">===</span> <span class=\"token string\">'IMPORTANT'</span>\n    <span class=\"token operator\">?</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">:</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>note<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Komponentin on tarpeetonta sisältää kaikkea tätä logiikkaa. Eriytetään se komponentin ulkopuolelle <em>connect</em>-metodin parametrin <em>mapStateToProps</em> yhteyteen. Muutetaan komponentti samalla funktionaaliseksi:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\nimport { connect } from &#39;react-redux&#39;\nimport { importanceToggling } from &#39;./../reducers/noteReducer&#39;\nimport Note from &#39;./Note&#39;\n\nconst NoteList = (props) =&gt; (\n  &lt;ul&gt;\n    {props.visibleNotes.map(note =&gt;\n      &lt;Note\n        key={note.id}\n        note={note}\n        handleClick={() =&gt; props.importanceToggling(note.id)}\n      /&gt;\n    )}\n  &lt;/ul&gt;\n)\n\nconst notesToShow = (notes, filter) =&gt; {\n  if (filter === &#39;ALL&#39;) {\n    return notes\n  }\n  return filter === &#39;IMPORTANT&#39;\n    ? notes.filter(note =&gt; note.important)\n    : notes.filter(note =&gt; !note.important)\n}\n\nconst mapStateToProps = (state) =&gt; {\n  return {\n    visibleNotes: notesToShow(state.notes, state.filter)\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  { importanceToggling }\n)(NoteList)</code></pre></div>\n<p><em>mapStateToProps</em> ei siis tällä kertaa mäppää propsiksi suoraan storessa olevaa asiaa, vaan storen tilasta funktion <em>notesToShow</em> avulla muodostetun sopivasti filtteröidyn datan.</p>\n<p>Uudistettu <em>NoteList</em> keskittyy lähes ainoastaan muistiinpanojen renderöimiseen, se on hyvin lähellä sitä minkä sanotaan olevan <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\">presentational</a>-komponentti, joita Dan Abramovin <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\">sanoin</a> kuvailee seuraavasti:</p>\n<ul>\n<li>Are concerned with how things look.</li>\n<li>May contain both presentational and container components inside, and usually have some DOM markup and styles of their own.</li>\n<li>Often allow containment via this.props.children.</li>\n<li>Have no dependencies on the rest of the app, such Redux actions or stores.</li>\n<li>Don’t specify how the data is loaded or mutated.</li>\n<li>Receive data and callbacks exclusively via props.</li>\n<li>Rarely have their own state (when they do, it’s UI state rather than data).</li>\n<li>Are written as functional components unless they need state, lifecycle hooks, or performance optimizations.</li>\n</ul>\n<p>Connect-metodin avulla muodostettu <em>yhdistetty komponentti</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">notesToShow</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">,</span> filter<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filter <span class=\"token operator\">===</span> <span class=\"token string\">'ALL'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> notes<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> filter <span class=\"token operator\">===</span> <span class=\"token string\">'IMPORTANT'</span>\n    <span class=\"token operator\">?</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">:</span> notes<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>note<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> state <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    visibleNotes<span class=\"token punctuation\">:</span> <span class=\"token function\">notesToShow</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  mapStateToProps<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> importanceToggling <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NoteList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>taas on selkeästi <em>container</em>-komponentti, joita Dan Abramov <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\">luonnehtii</a> seuraavasti:</p>\n<ul>\n<li>Are concerned with how things work.</li>\n<li>May contain both presentational and container components inside but usually don’t have any DOM markup of their own except for some wrapping divs, and never have any styles.</li>\n<li>Provide the data and behavior to presentational or other container components.</li>\n<li>Call Redux actions and provide these as callbacks to the presentational components.</li>\n<li>Are often stateful, as they tend to serve as data sources.</li>\n<li>Are usually generated using higher order components such as connect from React Redux, rather than written by hand.</li>\n</ul>\n<p>Komponenttien presentational vs. container -jaottelu on eräs hyväksi havaittu tapa strukturoida React-sovelluksia. Jako voi olla toimiva tai sitten ei, kaikki riippuu kontekstista.</p>\n<p>Abramov mainitsee jaon <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\">eduiksi</a> muunmuassa seuraavat</p>\n<ul>\n<li>Better separation of concerns. You understand your app and your UI better by writing components this way.</li>\n<li>Better reusability. You can use the same presentational component with completely different state sources, and turn those into separate container components that can be further reused.</li>\n<li>Presentational components are essentially your app’s “palette”. You can put them on a single page and let the designer tweak all their variations without touching the app’s logic. You can run screenshot regression tests on that page.</li>\n</ul>\n<p>Abramov mainitsee termin <a href=\"https://reactjs.org/docs/higher-order-components.html\">high order component</a>. Esim. <em>NoteList</em> on normaali komponentti, React-reduxin <em>connect</em> metodi taas on <em>high order komponentti</em>, eli käytännössä funktio, joka haluaa parametrikseen komponentin muuttuakseen \"normaaliksi\" komponentiksi.</p>\n<p>High order componentit eli HOC:t ovatkin yleinen tapa määritellä geneeristä toiminnallisuutta, joka sitten erikoistetaan esim. renderöitymisen määrittelyn suhteen parametrina annettavan komponentin avulla. Kyseessä on funktionaalisen ohjelmoinnin etäisesti olio-ohjelmoinnin perintää muistuttava käsite.</p>\n<p>HOC:it ovat oikeastaan käsitteen <a href=\"https://en.wikipedia.org/wiki/Higher-order_function\">High Order Function</a> (HOF) yleistys. HOF:eja ovat sellaiset funkiot, jotka joko ottavat parametrikseen funktioita tai palauttavat funkioita. Olemme oikeastaan käyttäneet HOF:eja läpi kurssin, esim. lähes kaikki taulukoiden käsittelyyn tarkoitetut metodit, kuten <em>map, filter ja find</em> ovat HOF:eja, samoin jo monta kertaa käyttämämme funktioita palauttavat (eli kahden nuolen) funktiot, esim.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">filterClicked</span> <span class=\"token operator\">=</span> value <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">filterChange</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sovelluksen tämänhetkinen koodi on <a href=\"https://github.com/FullStack-HY/redux-notes/tree/part6-4\">githubissa</a> tagissa <em>part6-4</em>.</p>\n<p>Mukana on myös edellisestä unohtunut <em>VisibilityFilter</em>-komponentin <em>connect</em>-funktiota käyttävä versio, jota on myös paranneltu siten, että nappi <em>kaikki</em> on oletusarvoisesti valittuna. Koodissa on pieni ikävä copypaste mutta kelvatkoon.</p>\n<h2>Tehtäviä</h2>\n<p>Tee nyt tehtävät <a href=\"/teht%C3%A4v%C3%A4t#connect\">6.6-6.9</a></p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/part-6-d6924a30e54668b01a539aa7bc2db9e8.svg"},"part":6,"letter":"b"}}},"pageContext":{"part":6,"letter":"b"}}