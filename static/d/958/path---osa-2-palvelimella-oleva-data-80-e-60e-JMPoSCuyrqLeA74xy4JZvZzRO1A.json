{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<h2>Datan haku palvelimelta</h2>\n<p>Olemme nyt viipyneet tovin keskittyen pelkkään \"frontendiin\", eli selainpuolen toiminnallisuuteen. Rupeamme itse toteuttamaan \"backendin\", eli palvelinpuolen toiminnallisuutta vasta kurssin kolmannessa osassa, mutta otamme nyt jo askeleen sinne suuntaan tutustumalla siihen, miten selaimessa suoritettava koodi kommunikoi backendin kanssa.</p>\n<p>Käytetään nyt palvelimena sovelluskehitykseen tarkoitettua <a href=\"https://github.com/typicode/json-server\">JSON Serveriä</a>.</p>\n<p>Tehdään projektin juurihakemistoon tiedosto <em>db.json</em>, jolla on seuraava sisältö:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"notes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HTML on helppoa\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2019-01-10T17:30:31.098Z\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Selain pystyy suorittamaan vain javascriptiä\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2019-01-10T18:39:34.091Z\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HTTP-protokollan tärkeimmät metodit ovat GET ja POST\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2019-01-10T19:20:14.298Z\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>JSON server on mahdollista <a href=\"https://github.com/typicode/json-server#install\">asentaa</a> koneelle ns. globaalisti komennolla <em>npm install -g json-server</em>. Globaali asennus edellyttää kuitenkin pääkäyttäjän oikeuksia, eli se ei ole mahdollista laitoksen koneilla tai uusilla fuksiläppäreillä.</p>\n<p>Globaali asennus ei kuitenkaan ole tarpeen, voimme käynnistää <em>json-serverin</em> komennon <em>npx</em> avulla:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npx json<span class=\"token operator\">-</span>server <span class=\"token operator\">--</span>port<span class=\"token operator\">=</span><span class=\"token number\">3001</span> <span class=\"token operator\">--</span>watch db<span class=\"token punctuation\">.</span>json</code></pre></div>\n<p>Oletusarvoisesti <em>json-server</em> käynnistyy porttiin 3000, mutta create-react-app:illa luodut projektit varaavat portin 3000, joten joudumme nyt määrittelemään json-server:ille vaihtoehtoisen portin 3001.</p>\n<p>Mennään selaimella osoitteeseen <a href=\"http://localhost:3001/notes\">http://localhost:3001/notes</a>. Kuten huomaamme, <em>json-server</em> tarjoaa osoitteessa tiedostoon tallentamamme muistiinpanot JSON-muodossa:</p>\n<picture><img src=\"/static/636c3218755a76b9341454813a543915/14be6/14b.png\" srcset=\"/static/636c3218755a76b9341454813a543915/4cce7/14b.png 200w,\n/static/636c3218755a76b9341454813a543915/bae5f/14b.png 400w,\n/static/636c3218755a76b9341454813a543915/14be6/14b.png 800w,\n/static/636c3218755a76b9341454813a543915/1b35a/14b.png 1200w,\n/static/636c3218755a76b9341454813a543915/9ee03/14b.png 1600w,\n/static/636c3218755a76b9341454813a543915/8057d/14b.png 1656w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Jos selaimesi ei osaa näyttää JSON-muotoista dataa formatoituna, asenna jokin sopiva plugin, esim. <a href=\"https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc\">JSONView</a>\nhelpottamaan elämääsi.</p>\n<p>Ideana jatkossa onkin se, että muistiinpanot talletetaan palvelimelle, eli tässä vaiheessa <em>json-server</em>:ille. React-koodi lataa muistiinpanot palvelimelta ja renderöi ne ruudulle. Kun sovellukseen lisätään uusi muistiinpano, React-koodi lähettää sen myös palvelimelle, jotta uudet muistiinpanot jäävät pysyvästi \"muistiin\".</p>\n<p>json-server tallettaa kaiken datan palvelimella sijaitsevaan tiedostoon <em>db.json</em>. Todellisuudessa data tullaan tallentamaan johonkin tietokantaan. json-server on kuitenkin käyttökelpoinen apuväline, joka mahdollistaa palvelinpuolen toiminnallisuuden käyttämisen kehitysvaiheessa ilman tarvetta itse ohjelmoida mitään.</p>\n<p>Tutustumme palvelinpuolen toteuttamisen periaatteisiin tarkemmin kurssin <a href=\"/osa3\">osassa 3</a>.</p>\n<h3>Selain suoritusympäristönä</h3>\n<p>Ensimmäisenä tehtävänämme on siis hakea React-sovellukseen jo olemassaolevat mustiinpanot osoitteesta <a href=\"http://localhost:3001/notes\">http://localhost:3001/notes</a>.</p>\n<p>Osan 0 <a href=\"/osa0#selaimessa-suoritettava-sovelluslogiikka\">esimerkkiprojektissa</a> nähtiin jo eräs tapa hakea Javascript-koodista palvelimella olevaa dataa. Esimerkin koodissa data haettiin <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a>- eli XHR-olion avulla muodostetulla HTTP-pyynnöllä. Kyseessä on vuonna 1999 lanseerattu tekniikka, jota kaikki web-selaimet ovat jo pitkään tukeneet.</p>\n<p>Nykyään XHR:ää ei kuitenkaan kannata käyttää ja selaimet tukevatkin jo laajasti <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\">fetch</a>-metodia, joka perustuu XHR:n käyttämän tapahtumapohjaisen mallin sijaan ns. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">promiseihin</a>.</p>\n<p>Muistutuksena edellisestä osasta (oikeastaan tätä tapaa pitää lähinnä <i>muistaa olla käyttämättä</i> ilman painavaa syytä), XHR:llä haettiin dataa seuraavasti</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> xhttp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// käsittele muuttujaan data sijoitettu kyselyn tulos</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/data.json'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Heti alussa HTTP-pyyntöä vastaavalle <code>xhttp</code>-oliolle rekisteröidään <i>tapahtumankäsittelijä</i>, jota Javascript runtime kutsuu kun <code>xhttp</code>-olion tila muuttuu. Jos tilanmuutos tarkoittaa että pyynnön vastaus on saapunut, käsitellään data halutulla tavalla.</p>\n<p>Huomionarvoista on se, että tapahtumankäsittelijän koodi on määritelty jo ennen kun itse pyyntö lähetetään palvelimelle. Tapahtumankäsittelijäfunktio tullaan kuitenkin suorittamaan vasta jossain myöhäisemmässä vaiheessa. Koodin suoritus ei siis etene synkronisesti \"ylhäältä alas\", vaan <i>asynkronisesti</i>, Javascript kutsuu sille rekisteröityä tapahtumankäsittelijäfunktiota jossain vaiheessa.</p>\n<p>Esim. Java-ohjelmoinnista tuttu synkroninen tapa tehdä kyselyjä etenisi seuraavaan tapaan (huomaa että kyse ei ole oikeasti toimivasta Java-koodista):</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">HTTPRequest request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HTTPRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nString url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://fullstack-exampleapp.herokuapp.com/data.json\"</span><span class=\"token punctuation\">;</span>\nList<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Muistiinpano<span class=\"token punctuation\">></span></span> muistiinpanot <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmuistiinpanot<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Javassa koodi etenee nyt rivi riviltä ja koodi pysähtyy odottamaan HTTP-pyynnön, eli komennon <em>request.get(...)</em> valmistumista. Komennon palauttama data, eli muistiinpanot talletetaan muuttujaan ja dataa aletaan käsittelemään halutulla tavalla.</p>\n<p>Javascript-enginet eli suoritusympäristöt kuitenkin noudattavat <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\">asynkronista mallia</a>, eli periaatteena on se, että kaikki <a href=\"https://en.wikipedia.org/wiki/Input/output\">IO-operaatiot</a> (poislukien muutama poikkeus) suoritetaan ei-blokkaavana, eli operaatioiden tulosta ei jäädä odottamaan vaan koodin suoritusta jatketaan heti eteenpäin.</p>\n<p>Siinä vaiheessa kun operaatio valmistuu tai tarkemmin sanoen jonain valmistumisen jälkeisenä ajanhetkenä, kutsuu Javascript-engine operaatiolle rekisteröityjä tapahtumankäsittelijöitä.</p>\n<p>Nykyisellään Javascript-moottorit ovat <i>yksisäikeisiä</i> eli ne eivät voi suorittaa rinnakkaista koodia. Tämän takia on käytännössä pakko käyttää ei-blokkaavaa mallia IO-operaatioiden suorittamiseen, sillä muuten selain 'jäätyisi' siksi aikaa kun esim. palvelimelta haetaan dataa.</p>\n<p>Javascript-moottoreiden yksisäikeisyydellä on myös sellainen seuraus, että jos koodin suoritus kestää erittäin pitkään, menee selain jumiin suorituksen ajaksi. Jos lisätään sovelluksen alkuun seuraava koodi:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loop..'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">50000000000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Kaikki toimii 5 sekunnin ajan normaalisti. Kun <code>setTimeout</code>:in parametrina määritelty funktio suoritetaan, menee selaimen sivu jumiin pitkän loopin suorituksen ajaksi. Ainakaan Chromessa selaimen tabia ei pysty edes sulkemaan luupin suorituksen aikana.</p>\n<p>Eli jotta selain säilyy <i>responsiivisena</i>, eli että se reagoi koko ajan riittävän nopeasti käyttäjän haluamiin toimenpiteisiin, koodin logiikan tulee olla sellainen, että yksittäinen laskenta ei saa kestää liian kauaa.</p>\n<p>Aiheesta löytyy paljon lisämateriaalia internetistä, eräs varsin havainnollinen esitys aiheesta Philip Robertsin esitelmä <a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\">What the heck is the event loop anyway?</a></p>\n<p>Nykyään selaimissa on mahdollisuus suorittaa myös rinnakkaista koodia ns. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\">web workerien</a> avulla. Yksittäisen selainikkunan koodin ns. event loopista huolehtii kuitenkin edelleen <a href=\"https://medium.com/techtrument/multithreading-javascript-46156179cf9a\">vain yksi säie</a>.</p>\n<h2>npm</h2>\n<p>Palaamme jälleen asiaan, eli datan hakemiseen palvelimelta.</p>\n<p>Voisimme käyttää datan palvelimelta hakemiseen aiemmin mainittua promiseihin perustuvaa funktiota <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\">fetch</a>. Fetch on hyvä työkalu, se on standardoitu ja kaikkien modernien selaimien (poislukien IE) tukema.</p>\n<p>Käytetään selaimen ja palvelimen väliseen kommunikaatioon kuitenkin <a href=\"https://github.com/axios/axios\">axios</a>-kirjastoa, joka toimii samaan tapaan kuin fetch, mutta on hieman mukavampikäyttöinen. Hyvä syy axios:in käytölle on myös se, että pääsemme tutustumaan siihen miten ulkopuolisia kirjastoja eli <i>npm-paketteja</i> liitetään React-projektiin.</p>\n<p>Nykyään lähes kaikki Javascript-projektit määritellään node \"pakkausmanagerin\" eli <a href=\"https://docs.npmjs.com/getting-started/what-is-npm\">npm</a>:n avulla. Myös create-react-app:in avulla generoidut projektit ovat npm-muotoisia projekteja. Varma tuntomerkki siitä on projektin juuressa oleva tiedosto <code>package.json:</code></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"notes\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"private\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^16.7.0-alpha.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^16.7.0-alpha.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-scripts\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.1.3\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts start\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts test\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"eject\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts eject\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"eslintConfig\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-app\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"browserslist\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\">0.2%\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"not dead\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"not ie &lt;= 11\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"not op_mini all\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tässä vaiheessa meitä kiinnostaa osa <code>dependencies</code>, joka määrittelee mitä <i>riippuvuuksia</i> eli ulkoisia kirjastoja projektilla on.</p>\n<p>Haluamme nyt käyttöömme axioksen. Voisimme määritellä kirjaston suoraan tiedostoon <i>package.json</i>, mutta on parempi asentaa se komentoriviltä</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install axios <span class=\"token operator\">--</span>save</code></pre></div>\n<p><strong>Huomaa, että <em>npm</em>-komennot tulee antaa aina projektin juurihakemistossa</strong>, eli siinä minkä sisältä tiedosto <em>package.json</em> löytyy.</p>\n<p>Nyt axios on mukana riippuvuuksien joukossa:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"axios\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^0.18.0\"</span><span class=\"token punctuation\">,</span></span>    <span class=\"token property\">\"json-server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^0.14.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^16.7.0-alpha.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^16.7.0-alpha.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-scripts\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.1.3\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  // ...\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sen lisäksi, että komento <code>npm install</code> lisäsi axiosin riippuvuuksien joukkoon, se myös <i>latasi</i> kirjaston koodin. Koodi löytyy muiden riippuvuuksien tapaan projektin juuren hakemistosta <code>node_modules</code>, mikä kuten huomata saattaa sisältääkin runsaasti kaikenlaista.</p>\n<p>Tehdään toinenkin pieni lisäys. Asennetaan myös <code>json-server</code> projektin riippuvuudeksi komennolla</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install json<span class=\"token operator\">-</span>server <span class=\"token operator\">--</span>save</code></pre></div>\n<p>ja tehdään tiedoston <code>package.json</code> osaan <code>scripts</code> pieni lisäys</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  // ... \n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts start\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts test --env=jsdom\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"eject\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts eject\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json-server -p3001 db.json\"</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nyt voimme käynnistää  json-serverin projektin hakemistosta mukavasti ilman tarvetta parametrien määrittelylle komennolla</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm run server</code></pre></div>\n<p>Tutustumme <em>npm</em>-työkaluun tarkemmin kurssin <a href=\"/osa3\">kolmannessa osassa</a>.</p>\n<p>Huomaa, että aiemmin käynnistetty json-server tulee olla sammutettuna, muuten seuraa ongelmia</p>\n<picture><img src=\"/static/7f3c94f76fa1a5a1e55bf4dcd691d3e8/14be6/15b.png\" srcset=\"/static/7f3c94f76fa1a5a1e55bf4dcd691d3e8/4cce7/15b.png 200w,\n/static/7f3c94f76fa1a5a1e55bf4dcd691d3e8/bae5f/15b.png 400w,\n/static/7f3c94f76fa1a5a1e55bf4dcd691d3e8/14be6/15b.png 800w,\n/static/7f3c94f76fa1a5a1e55bf4dcd691d3e8/1b35a/15b.png 1200w,\n/static/7f3c94f76fa1a5a1e55bf4dcd691d3e8/8b923/15b.png 1572w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Virheilmoituksen punaisella oleva teksti kertoo mistä on kyse: </p>\n<p><i>Cannot bind to the port 3001. Please specify another port number either through --port argument or through the json-server.json configuration file</i> </p>\n<p>eli sovellus ei onnistu käynnistyessään kytkemään itseään <a href=\"https://en.wikipedia.org/wiki/Port_(computer_networking)\">porttiin</a>, syy tälle on se, että portti 3001 on jo aiemmin käynnistetyn json-serverin varaama.</p>\n<h3>Axios ja promiset</h3>\n<p>Olemme nyt valmiina käyttämään axiosia. Jatkossa oletetaan että <em>json-server</em> on käynnissä portissa 3001.</p>\n<p>Kirjaston voi ottaa käyttöön samaan tapaan kuin esim. React otetaan käyttöön, eli sopivalla <code>import</code>-lauseella.</p>\n<p>Lisätään seuraava tiedostoon <code>index.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> promise2 <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/foobar'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>promise2<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Konsoliin tulostuu seuraavaa</p>\n<picture><img src=\"/static/823a2e7f414c99cb849a42470e4f372d/14be6/16b.png\" srcset=\"/static/823a2e7f414c99cb849a42470e4f372d/4cce7/16b.png 200w,\n/static/823a2e7f414c99cb849a42470e4f372d/bae5f/16b.png 400w,\n/static/823a2e7f414c99cb849a42470e4f372d/14be6/16b.png 800w,\n/static/823a2e7f414c99cb849a42470e4f372d/1b35a/16b.png 1200w,\n/static/823a2e7f414c99cb849a42470e4f372d/9ee03/16b.png 1600w,\n/static/823a2e7f414c99cb849a42470e4f372d/00da9/16b.png 1672w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Axiosin metodi <em>get</em> palauttaa <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\">promisen</a>.</p>\n<p>Mozillan dokumentaatio sanoo promisesta seuraavaa:</p>\n<blockquote>\n<p>A Promise is an object representing the eventual completion or failure of an asynchronous operation.</p>\n</blockquote>\n<p>Promise siis edustaa asynkronista operaatiota. Promise voi olla kolmessa eri tilassa:</p>\n<ul>\n<li>aluksi promise on <i>pending</i>, eli promisea vastaava asynkroninen operaatio ei ole vielä tapahtunut</li>\n<li>jos operaatio päättyy onnistuneesti, menee promise tilaan <i>fulfilled</i>, josta joskus käytetään nimitystä <i>resolved</i></li>\n<li>kolmas mahdollinen tila on <i>rejected</i>, joka edustaa epäonnistunutta operaatiota</li>\n</ul>\n<p>Esimerkkimme ensimmäinen promise on <i>fulfilled</i>, eli vastaa onnistunutta <code>axios.get('<a href=\"http://localhost:3001/notes&#x27;\">http://localhost:3001/notes'</a>)</code> pyyntöä. Promiseista toinen taas on <i>rejected</i>, syy selviää konsolista, eli yritettiin tehdä HTTP GET -pyyntöä osoitteeseen, jota ei ole olemassa.</p>\n<p>Jos ja kun haluamme tietoon promisea vastaavan operaation tuloksen, tulee promiselle rekisteröidä tapahtumankuuntelija. Tämä tapahtuu metodilla <code>then</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span>\n\npromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Konsoliin tulostuu seuraavaa</p>\n<picture><img src=\"/static/40c9423779b258210e1ab028b1a339a8/14be6/17b.png\" srcset=\"/static/40c9423779b258210e1ab028b1a339a8/4cce7/17b.png 200w,\n/static/40c9423779b258210e1ab028b1a339a8/bae5f/17b.png 400w,\n/static/40c9423779b258210e1ab028b1a339a8/14be6/17b.png 800w,\n/static/40c9423779b258210e1ab028b1a339a8/1b35a/17b.png 1200w,\n/static/40c9423779b258210e1ab028b1a339a8/9ee03/17b.png 1600w,\n/static/40c9423779b258210e1ab028b1a339a8/b04a9/17b.png 1684w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Javascriptin suoritusympäristö kutsuu <code>then</code>_-metodin avulla rekisteröityä takaisinkutsufunktiota antaen sille parametriksi olion <code>result</code>, joka sisältää kaiken oleellisen HTTP GET -pyynnön vastaukseen liittyvän, eli palautetun <i>datan</i>, <i>statuskoodin</i> ja <i>headerit</i>.</p>\n<p>Promise-olioa ei ole yleensä tarvetta tallettaa muuttujaan, ja onkin tapana ketjuttaa metodin <code>then</code> kutsu suoraan axiosin metodin kutsun perään:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Takaisinkutsufunktio ottaa nyt vastauksen sisällä olevan datan muuttujaan ja tulostaa muistiinpanot konsoliin.</p>\n<p>Luettavampi tapa formatoida <i>ketjutettuja</i> metodikutsuja on sijoittaa jokainen kutsu omalle rivilleen:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">axios\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>näin jo nopea, ruudun vasempaan laitaan kohdistunut vilkaisu kertoo mistä on kyse.</p>\n<p>Palvelimen palauttama data on pelkkää tekstiä, käytännössä yksi iso merkkijono.\nAxios-kirjasto osaa kuitenkin parsia datan Javascript-taulukoksi, sillä palvelin on kertonut headerin <code>content-type</code> avulla että datan muoto on <code>application/json; charset=utf-8</code> (ks. edellinen kuva).</p>\n<p>Voimme vihdoin siirtyä käyttämään sovelluksessamme palvelimelta haettavaa dataa.</p>\n<p>Tehdään se aluksi \"huonosti\", eli lisätään sovellusta vastaavan komponentin <code>App</code> renderöinti takaisinkutsufunktion sisälle muuttamalla <code>index.js</code> seuraavaan muotoon:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\naxios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data\n  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>App notes<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>notes<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Joissain tilanteissa tämäkin tapa voisi olla ok, mutta se on hieman ongelmallinen ja päätetäänkin siirtää datan hakeminen komponenttiin <code>App</code>.</p>\n<p>Ei ole kuitenkaan ihan selvää, mihin kohtaan komponentin koodia komento <code>axios.get</code> olisi hyvä sijoittaa.</p>\n<h3>Effect hookit</h3>\n<p>Olemme jo käyttäneet Reactin version <a href=\"https://www.npmjs.com/package/react/v/16.7.0-alpha.2\">16.7.0-alpha.2</a> mukanaan tuomia <a href=\"https://reactjs.org/docs/hooks-state.html\">state hookeja</a> tuomaan funktioina määriteltyihin React-komponentteihin tilan. Versio 16.7.0-alpha.2 tarjoaa myös\n<a href=\"https://reactjs.org/docs/hooks-effect.html\">effect hookit</a>, dokumentaation sanoin</p>\n<blockquote>\n<p>The Effect Hook lets you perform side effects in function components\nData fetching, setting up a subscription, and manually changing the DOM in React components are all examples of side effects. </p>\n</blockquote>\n<p>Eli effect hookit ovat juuri oikea tapa hakea dataa palvelimelta.</p>\n<p>Poistetaan nyt datan hakeminen tiedostosta <code>index.js</code>. Komponentille <code>App</code> ei ole enää tarvetta välittää dataa propseina. Eli  <code>index.js</code> pelkistyy seuraavaan muotoon</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Komponentti <code>App</code> muuttuu seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></span><span class=\"token keyword\">import</span> Note <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Note'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>notes<span class=\"token punctuation\">,</span> setNotes<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>newNote<span class=\"token punctuation\">,</span> setNewNote<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showAll<span class=\"token punctuation\">,</span> setShowAll<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'render'</span><span class=\"token punctuation\">,</span> notes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token string\">'notes'</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Koodiin on myös lisätty muutama aputulostus, jotka auttavat hahmottamaan miten suoritus etenee.</p>\n<p>Konsoliin tulostuu</p>\n<pre>\nrender 0 notes\neffect\npromise fulfilled\nrender 3 notes\n</pre>\n<p>Ensin siis suoritetaan komponentin määrittelevan funktion runko ja renderöidään komponentti ensimmäistä kertaa. Tässä vaiheessa tulostuu <i>render 0 notes</i> eli dataa ei ole vielä haettu palvelimelta.</p>\n<p>Efekti, eli funktio </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect'</span><span class=\"token punctuation\">)</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>suoritetaan heti renderöinnin jälkeen. Funktion suoritus saa aikaan sen, että konsoliin tulostuu <i>effect</i> ja että komento <code>axios.get</code> aloittaa datan hakemisen palvelimelta ja rekisteröi operaatiolle <i>tapahtumankäsittelijksi</i> funktion</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">response <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Siinä vaiheessa kun data saapuu palvelimelta Javascriptin runtime kutsuu rekisteröityä tapahtumankäsittelijäfunktiota, joka tulostaa konsoliin <i>promise fulfilled</i> sekä tallettaa tilaan palvelimen palauttamat muistiinpanot funktiolla <code>setNotes(response.data)</code>.</p>\n<p>Kuten aina tilan päivittävän funktion kutsu aiheuttaa funktion uudelleen renderöitymisen. Tämän seurauksena konsoliin tulostuu <i>render 3 notes</i>.</p>\n<p>Tarkastellaan vielä efektihookin määrittelyä kokonaisuudessaan</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect'</span><span class=\"token punctuation\">)</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Kirjotetaan koodi hieman toisella tavalla. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hook</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect'</span><span class=\"token punctuation\">)</span>\n  axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Nyt huomaamme selvemmin, että funktiolle <a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\">useEffec</a> annetaan kaksi parametria. Näistä ensimmäinen on funktio, eli itse <i>efekti</i>. Dokumentaation mukaan</p>\n<blockquote>\n<p>By default, effects run after every completed render, but you can choose to fire it only when certain values have changed.</p>\n</blockquote>\n<p>Eli oletusarvoisesti efekti suoritetaan <i>aina</i> kun komponentti renderöidään. Meidän tapauksessamme emme kuitenkaan halua suorittaa efektin kuin ensimmäisen renderöinnin yhteydessä. </p>\n<p>Funktion <code>useEffect</code> toista parametria käytetään <a href=\"https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect\">tarkentamaan sitä miten usein efekti suoritetaan</a>. Jos toisena parametrina on tyhjä taulukko <code>[]</code>, suoritetaanefekti ainoastaan komponentin ensimmäisen renderöinnin aikana.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> notes<span class=\"token punctuation\">:</span> response<span class=\"token punctuation\">.</span>data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Tapahtumankäsittelijän koodia, eli then:in parametrina olevaa <em>funktiota</em> ei siis suoriteta vielä tässä vaiheessa.  kutsuu sitä jossain vaiheessa sen jälkeen kun palvelin on vastannut HTTP GET -pyyntöön.</p>\n<p>Mieti tarkasti äsken läpikäytyä tapahtumasarjaa, sen ymmärtäminen on erittäin tärkeää!</p>\n<p>Huomaa, että olisimme voineet kirjoittaa koodin myös seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'effect'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">eventHandler</span> <span class=\"token operator\">=</span> response <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise fulfilled'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setNotes</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">)</span>\n  promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>eventHandler<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Muuttujaan <code>eventHandler</code> on sijoitettu viite funktioon. Axiosin metodin get palauttama promise on talletettu muuttujaan <code>promise</code>. Takaisinkutsun rekisteröinti tapahtuu antamalla promisen then-metodin parametrina muuttuja <code>eventHandler</code>, joka viittaa käsittelijäfunktioon.</p>\n<p>Kokeillaan mitä tapahtuu, jos muistiinpanojen tallettavaa kenttää <em>notes</em> ei alusteta konstruktorissa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//notes: [],</span>\n      newNote<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      showAll<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Seurauksena on ongelmia:</p>\n<picture><img src=\"/static/872ed9895b9514a24a76a0b3ef59988e/14be6/10a.png\" srcset=\"/static/872ed9895b9514a24a76a0b3ef59988e/4cce7/10a.png 200w,\n/static/872ed9895b9514a24a76a0b3ef59988e/bae5f/10a.png 400w,\n/static/872ed9895b9514a24a76a0b3ef59988e/14be6/10a.png 800w,\n/static/872ed9895b9514a24a76a0b3ef59988e/1b35a/10a.png 1200w,\n/static/872ed9895b9514a24a76a0b3ef59988e/b927d/10a.png 1422w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Virheen aiheuttaa komento <em>notesToShow.map</em> sillä muuttujan <em>notesToShow</em> arvo ei ole määritelty ja näin ollen metodin <em>map</em> kutsuminen on mahdotonta.</p>\n<p>Muuttuja saa arvonsa metodin <em>render</em> alkuosassa:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const notesToShow =\n  this.state.showAll ?\n    this.state.notes :\n    this.state.notes.filter(note =&gt; note.important === true)</code></pre></div>\n<p>Koska metodia <em>render</em> kutsutaan ensimmäisen kerran <em>ennen kuin palvelimelta haettava data saapuu</em>, ei tilan kentälle <em>notes</em> ole asetettu mitään arvoa.</p>\n<p>Tulet 100% varmuudella törmäämään kurssilla vastaavaan ongelmaan, eli <em>render</em> metodissa on jollain tavalla aina varauduttava siihen, että ensimmäinen renderöitymiskerta tapahtuu ennen kuin palvelimelta haettava data on saapunut.</p>\n<p>Palautetaan konstruktori ennalleen.</p>\n<p>Sovelluksen tämän hetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/FullStack-HY/part2-notes/tree/part2-4\">githubissa</a>, tagissa <em>part2-4</em>.</p>\n<h3>Suoritusympäristö</h3>\n</div>\n<div class=\"tasks\">\n<h3>Tehtävät 2.11</h3>\n<h4>puhelinluettelo osa 6</h4>\n<p>Talleta sovelluksen alkutila projektin juureen sijoitettavaan tiedostoon <em>db.json</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"persons\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Arto Hellas\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"040-123456\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Martti Tienari\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"040-123456\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Arto Järvinen\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"040-123456\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Lea Kutvonen\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"040-123456\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Käynnistä json-server porttiin 3001 ja varmista selaimella osoitteesta <a href=\"http://localhost:3001/persons\">http://localhost:3001/persons</a>, että palvelin palauttaa henkilölistan.</p>\n<p>Jos saat virheilmoituksen:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">events<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">:</span><span class=\"token number\">182</span>\n      <span class=\"token keyword\">throw</span> er<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Unhandled 'error' event</span>\n      <span class=\"token operator\">^</span>\n\nError<span class=\"token punctuation\">:</span> listen <span class=\"token constant\">EADDRINUSE</span> <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token punctuation\">:</span><span class=\"token number\">3001</span>\n    at Object<span class=\"token punctuation\">.</span><span class=\"token function\">_errnoException</span> <span class=\"token punctuation\">(</span>util<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">:</span><span class=\"token number\">1019</span><span class=\"token punctuation\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n    at <span class=\"token function\">_exceptionWithHostPort</span> <span class=\"token punctuation\">(</span>util<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">:</span><span class=\"token number\">1041</span><span class=\"token punctuation\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>on portti 3001 jo jonkin muun sovelluksen, esim. jo käynnissä olevan json-serverin käytössä. Sulje toinen sovellus tai jos se ei onnistu, vaihda porttia.</p>\n<p>Muuta sovellusta siten, että datan alkutila haetaan <em>axios</em>-kirjaston avulla palvelimelta. Hoida datan hakeminen <a href=\"/osa2#komponenttien-lifecycle-metodit\">lifecyclemetodissa</a> <em>componentDidMount</em>.</p>\n<h3>Tehtävät 2.12*</h3>\n<h4>maiden tiedot</h4>\n<p>Rajapinta <a href=\"https://restcountries.eu\">https://restcountries.eu</a> tarjoaa paljon eri maihin liittyvää tietoa koneluettavassa muodossa REST-apina.</p>\n<p>Tee sovellus, jonka avulla voit tarkastella eri maiden tietoja. Sovelluksen kannattaa hakea tiedot endpointista <a href=\"https://restcountries.eu/#api-endpoints-all\">all</a>.</p>\n<p>Sovelluksen käyttöliittymä on yksinkertainen. Näytettävä maa haetaan kirjoittamalla hakuehto etsintäkenttään.</p>\n<p>Jos ehdon täyttäviä maita on liikaa (yli 10), kehoitetaan tarkentamaan hakuehtoa:</p>\n<picture><img src=\"/static/a47ea7bcd82b8c8848e16c0c6fb3617d/14be6/13.png\" srcset=\"/static/a47ea7bcd82b8c8848e16c0c6fb3617d/4cce7/13.png 200w,\n/static/a47ea7bcd82b8c8848e16c0c6fb3617d/bae5f/13.png 400w,\n/static/a47ea7bcd82b8c8848e16c0c6fb3617d/14be6/13.png 800w,\n/static/a47ea7bcd82b8c8848e16c0c6fb3617d/4a509/13.png 1126w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Jos maita on alle kymmenen, mutta yli 1 näytetään hakuehdon täyttävät maat:</p>\n<picture><img src=\"/static/21c45c6fd07f9da013cab54bdf8935f5/14be6/14.png\" srcset=\"/static/21c45c6fd07f9da013cab54bdf8935f5/4cce7/14.png 200w,\n/static/21c45c6fd07f9da013cab54bdf8935f5/bae5f/14.png 400w,\n/static/21c45c6fd07f9da013cab54bdf8935f5/14be6/14.png 800w,\n/static/21c45c6fd07f9da013cab54bdf8935f5/d3d94/14.png 1078w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Kun ehdon täyttäviä maita on enää yksi, näytetään maan lippu sekä perustiedot:</p>\n<picture><img src=\"/static/4f93ad869b80169444bfff56175c3d1c/14be6/15.png\" srcset=\"/static/4f93ad869b80169444bfff56175c3d1c/4cce7/15.png 200w,\n/static/4f93ad869b80169444bfff56175c3d1c/bae5f/15.png 400w,\n/static/4f93ad869b80169444bfff56175c3d1c/14be6/15.png 800w,\n/static/4f93ad869b80169444bfff56175c3d1c/16a28/15.png 1136w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p><strong>Huom:</strong> riittää että sovelluksesi toimii suurimmalle osalle maista. Jotkut maat kuten <em>Sudan</em> voivat tuottaa ongelmia, sillä maan nimi on toisen maan <em>South Sudan</em> osa. Näistä corner caseista ei tarvitse välittää.</p>\n<h3>Tehtävät 2.13*</h3>\n<h4>puhelinluettelo osa 4</h4>\n<p><strong>Älä juutu tähän tehtävään!</strong></p>\n<p>Paranna edellisen tehtävän maasovellusta siten, että kun sivulla näkyy useiden maiden nimiä, riittää maan nimen klikkaaminen tarkentamaan haun siten, että klikatun maan tarkemmat tiedot saadaan näkyviin.</p>\n<p>Huomaa, että saat \"nimestä\" klikattavan kiinnittämällä nimen sisältävään elementtiin, esim. diviin klikkaustenkuuntelijan:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div onClick={...}&gt;\n  {country.name}\n&lt;/div&gt;</code></pre></div>\n</div>","frontmatter":{"title":"osa 2","subTitle":"Palvelimella olevan datan hakeminen","path":"/osa2/palvelimella_oleva_data","mainImage":{"publicURL":"/static/part-2-2c709798e38da8a809241016507d8154.svg"},"partColor":"dark-orange","part":2,"letter":"c"}}},"pageContext":{}}