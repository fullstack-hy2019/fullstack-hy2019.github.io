{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Toteutetaan seuraavaksi React-sovellus, joka käyttää toteuttamaamme GraphQL-palvelinta. </p>\n<p>GraphQL:ää on periaatteessa mahdollista käyttää HTTP POST -pyyntöjen avulla. Seuraavassa esimerkki siitä, miten voimme tehdä kyselyn Postmanilla</p>\n<picture><img src=\"/static/70a60c28934e97ddcae170c6ab488138/14be6/8.png\" srcset=\"/static/70a60c28934e97ddcae170c6ab488138/4cce7/8.png 200w,\n/static/70a60c28934e97ddcae170c6ab488138/bae5f/8.png 400w,\n/static/70a60c28934e97ddcae170c6ab488138/14be6/8.png 800w,\n/static/70a60c28934e97ddcae170c6ab488138/1b35a/8.png 1200w,\n/static/70a60c28934e97ddcae170c6ab488138/97a7b/8.png 1502w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Kyselyt siis tehdään osoitteeseen <a href=\"http://localhosto:4000/graphql\">http://localhosto:4000/graphql</a> kohdistuvina POST-pyyntöinä, ja itse kysely lähetetään pyynnön mukana merkkijonona avaimen <i>query</i> arvona. Voisimmekin hoitaa React-sovelluksen ja GraphQL:n kommunikoinnin Axiosilla. Tämä ei kuitenkaan ole useimmiten järkevää ja on parempi idea käyttää korkeamman tason kirjastoa, joka pystyy abstrahoimaan turhat detaljit clientin koodista. Tällä hetkellä järkeviä vaihtoehtoja on kaksi, Facebookin <a href=\"https://facebook.github.io/relay/\">Relay</a> ja\n<a href=\"https://www.apollographql.com/docs/react/\">Apollo Client</a>, näistä Apollo on ylivoimaisesti suositumpi ja myös meidän valintamme.</p>\n<h3>Apollo client</h3>\n<p>Luodaan uusi React-sovellus ja asennetaan siihen <a href=\"https://www.apollographql.com/docs/react/essentials/get-started.html#installation\">Apollo clientin</a> vaatimat riippuvuudet</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install apollo<span class=\"token operator\">-</span>boost react<span class=\"token operator\">-</span>apollo graphql <span class=\"token operator\">--</span>save</code></pre></div>\n<p>Aloitetaan seuraavalla ohjelmarungolla</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span>\n\n<span class=\"token keyword\">import</span> ApolloClient<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> gql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'apollo-boost'</span>\n\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  uri<span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://localhost:4000/graphql\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token string\">`\n{\n  allPersons  {\n    name,\n    phone,\n    address {\n      street, city\n    }\n  }\n}\n`</span></span>\n\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> query <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    test\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Koodi aloittaa luomalla <a href=\"https://www.apollographql.com/docs/react/essentials/get-started.html#creating-client\">client</a>-olion, jonka avulla se lähettää kyselyn palvelimelle:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">client<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> query <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Palvelimen palauttama vastaus tulostuu konsoliin:</p>\n<picture><img src=\"/static/e931850a0616fc765f9c1b8f2fc10d41/14be6/9.png\" srcset=\"/static/e931850a0616fc765f9c1b8f2fc10d41/4cce7/9.png 200w,\n/static/e931850a0616fc765f9c1b8f2fc10d41/bae5f/9.png 400w,\n/static/e931850a0616fc765f9c1b8f2fc10d41/14be6/9.png 800w,\n/static/e931850a0616fc765f9c1b8f2fc10d41/1b35a/9.png 1200w,\n/static/e931850a0616fc765f9c1b8f2fc10d41/66f5f/9.png 1534w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Sovelluksen siis pystyy kommunikoimaan GraphQL-palvelimen kanssa olion <em>client</em> välityksellä. Client saadaan sovelluksen kaikkien komponenttien saataville komponentin <a href=\"https://www.apollographql.com/docs/react/essentials/get-started.html#creating-provider\">ApolloProvider</a> avulla:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span></span><span class=\"token keyword\">import</span> ApolloClient<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> gql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'apollo-boost'</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApolloProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-apollo'</span></span>\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  uri<span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://localhost:4000/graphql\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token operator\">&lt;</span>ApolloProvider client<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>client<span class=\"token punctuation\">}</span> <span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ApolloProvider<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> </span>  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Query-komponentti</h3>\n<p>Olemme valmiina toteuttamaan sovelluksen päänäkymän, joka listaa kaikkien henkilöiden puhelinnumerot. </p>\n<p>Apollo Client tarjoaa muutaman vaihtoehtoisen tavan kyselyhen tekemiselle.\nTämän hetken (tämä osa on kirjoitettu 17.2.2019) vallitseva käytäntö on komponentin <a href=\"https://www.apollographql.com/docs/react/essentials/queries.html\">Query</a> käyttäminen.</p>\n<p>Komponentin <i>App</i> koodi on seuraavassa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Query <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-apollo\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> gql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'apollo-boost'</span>\n\n<span class=\"token keyword\">const</span> allPersons <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token string\">`\n{\n  allPersons  {\n    name\n    phone\n  }\n}\n`</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Query query<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>allPersons<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> result<span class=\"token punctuation\">.</span>loading <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allPersons<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Query<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>Koodi vaikuttaa hieman sekavalta. Koodin ytimessä on komponentti <i>Query</i>, joka saa parametriksi <i>query</i> suoritettavan kyselyn. Komponentin tagien sisällä on <i>funktio</i>, joka palauttaa varsinaisen renderöitävän JSX:n. Funktion parametri <i>results</i> sisältää GraphQL-kyselyn tuloksen.</p>\n<p>Tuloksella eli parametrissa <em>results</em> olevalla oliolla on <a href=\"https://www.apollographql.com/docs/react/essentials/queries.html#render-prop\">useita kenttiä</a>. Kenttä <i>loading</i> on arvoltaan tosi, jos kyselyyn ei ole saatu vielä vastausta. Tässä tilanteessa renderöitävä koodi on </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> result<span class=\"token punctuation\">.</span>loading <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kun tulos on valmis, otetaan tuloksen kentästä <i>data</i> kyselyn <i>allPersons</i> vastaus ja renderöidään luettelossa olevat nimet ruudulle</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allPersons<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>Saadaksemme ratkaisua hieman siistimmäksi eriytetään henkilöiden näyttäminen omaan komponenttiin <i>Persons</i>. Komponentti <i>App</i> muuttuu seuraavasti</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Query query<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>allPersons<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>Persons result<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Query<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"></code></pre></div>\n<h3>kässe</h3>\n<h3>Mutation-komponentti</h3>\n<h3>Render props</h3>\n<p>Query-komponentti noudattaa periaatetta, joka kulkee nimellä <a href=\"https://reactjs.org/docs/render-props.html\">render props</a>, eli komponentti saa propsina tai tagiensa välissä lapsina <i>funktion</i> joka määrittelee miten renderöinti tapahtuu. Render props -periaate on ollut viime aikoina melko suosittu, mm. osassa 7 käsittelemämme <a href=\"/osa7/react_router\">react router</a> käyttää sitä. Itse en ole suuri render propsien fani ja erityisesti GraphQL:n yhteydessä niiden käyttö tuntuu erittäin ikävältä. Muutaman kuukauden kuluessa asiaan on kuitenkin odotettavissa muutoksia ja Apollo Clientiin tullaan lisäämään rajapinta, jonka avulla kyselyjä (ja mutaatioita) on mahdollista tehdä hookien avulla. </p>\n<p>Esimerkki ....</p>\n<p>Yleisemminkin trendinä on se, että hookeilla tullaan useissa tapauksissa korvaamaan tarve render propsien käyttöön.</p>\n<h3>Frontti</h3>\n<p>GraphQL on jo melko iäkäs teknologia, se on ollut Facebookin sisäisessä käytössä jo vuodesta 2012 lähtien, teknologian voi siis todeta olevan \"battle tested\". Facebook julkaisi GraphQL:n vuonna 2015 ja se on pikkuhiljaa saanut enenevissä määrin huomiota ja nousee ehkä lähivuosina uhmaamaan REST:in valta-asemaa.</p>\n</div>\n<div class=\"tasks\">\n<h3>Tehtäviä</h3>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/part-8-1f98236965546b36c2a293574ec8b02a.svg"},"part":8,"letter":"b"}}},"pageContext":{"part":8,"letter":"b"}}