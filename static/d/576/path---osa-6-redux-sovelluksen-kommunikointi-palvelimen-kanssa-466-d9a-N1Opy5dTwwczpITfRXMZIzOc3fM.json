{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Laajennetaan sovellusta siten, että muistiinpanot talletetaan backendiin. Käytetään osasta 2 tuttua <a href=\"http://localhost:8000/osa2/palvelimella_olevan_datan_hakeminen\">json-serveriä</a>.</p>\n<p>Tallennetaan projektin juuren tiedostoon <i>db.json</i> tietokannan alkutila:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"notes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"reduxin storen toiminnan määrittelee reduceri\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"storen tilassa voi olla mielivaltaista dataa\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"important\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Asennetaan projektiin json-server</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> json-server --save</code></pre></div>\n<p>ja lisätään tiedoston <i>package.json</i> osaan <i>scripts</i> rivi</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token string\">\"scripts\"</span><span class=\"token keyword\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"server\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"json-server -p3001 db.json\"</span>,\n  // <span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Käynnistetään json-server komennolla <em>npm run server</em>.</p>\n<p>Tehdään sitten tuttuun tapaan <i>axiosia</i> hyödyntävä backendistä dataa hakeva metodi tiedostoon <i>services/notes.js</i></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">const</span> baseUrl <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:3001/notes'</span>\n\n<span class=\"token keyword\">const</span> getAll <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>baseUrl<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span> getAll <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Asennetaan myös axios projektiin</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> axios --save</code></pre></div>\n<p>Muutetaan <i>nodeReducer</i>:issa tapahtuva muistiinpanojen tilan alustusta, siten että oletusarvoisesti mustiinpanoja ei ole:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nopea tapa saada storen tila alustettua palvelimella olevan datan perusteella on hakea muistiinpanot tiedostossa <i>index.js</i> ja dispatchata niille yksitellen action <i>NEW_NOTE</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> noteService <span class=\"token keyword\">from</span> <span class=\"token string\">'./services/notes'</span></span>\n<span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  notes<span class=\"token punctuation\">:</span> noteReducer<span class=\"token punctuation\">,</span>\n  filter<span class=\"token punctuation\">:</span> filterReducer<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">noteService<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>notes <span class=\"token operator\">=></span></span><span class=\"gatsby-highlight-code-line\">  notes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'NEW_NOTE'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> note <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">)</span></span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>Lisätään reduceriin tuki actionille <i>INIT_NOTES</i>, jonka avulla alustus voidaan tehdä dispatchaamalla yksittäinen action. Luodaan myös sitä varten oma action creator -funktio <em>noteInitialization</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ACTION:'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'NEW_NOTE'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'INIT_NOTES'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> action<span class=\"token punctuation\">.</span>data\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteInitialization</span> <span class=\"token operator\">=</span> data <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'INIT_NOTES'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p><em>index.js</em> yksinkertaistuu:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> noteReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> noteInitialization <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducers/noteReducer'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n\nnoteService<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>notes <span class=\"token operator\">=></span> store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">noteInitialization</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p><strong>HUOM:</strong> miksi emme käyttäneet koodissa promisejen ja <em>then</em>-metodilla rekisteröidyn tapahtumankäsittelijän sijaan awaitia?</p>\n<p>await toimii ainoastaan <em>async</em>-funktioiden sisällä, ja <em>index.js</em>:ssä oleva koodi ei ole funktiossa, joten päädyimme tilanteen yksinkertaisuuden takia tällä kertaa jättämään <em>async</em>:in käyttämättä.</p>\n</blockquote>\n<p>Päätetään kuitenkin siirtää muistiinpanojen alustus <em>App</em>-komponentin metodiin <em><a href=\"https://reactjs.org/docs/react-component.html#componentdidmount\">componentDidMount</a></em>, se on luonteva paikka alustuksille, sillä metodi suoritetaan heti sovelluksemme ensimmäisen renderöinnin jälkeen.</p>\n<p>Jotta saamme action creatorin <em>noteInitialization</em> käyttöön komponentissa <em>App</em> tarvitsemme jälleen <em>connect</em>-metodin apua:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\nimport NoteForm from &#39;./components/NoteForm.js&#39;\nimport NoteList from &#39;./components/NoteList.js&#39;\nimport VisibilityFilter from &#39;./components/VisibilityFilter&#39;\nimport { connect } from &#39;react-redux&#39;\nimport { noteInitialization } from &#39;./reducers/noteReducer&#39;\nimport noteService from &#39;./services/notes&#39;\n\nclass App extends React.Component {\n  componentDidMount = async () =&gt; {\n    const notes = await noteService.getAll()\n    this.props.noteInitialization(notes)\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;NoteForm /&gt;\n        &lt;VisibilityFilter /&gt;\n        &lt;NoteList /&gt;\n      &lt;/div&gt;\n    )\n  }\n}\n\nexport default connect(\n  null,\n  { noteInitialization }\n)(App)</code></pre></div>\n<p>Näin funktio <em>noteInitialization</em> tulee komponentin <em>App</em> propsiksi <em>this.props.noteInitialization</em> ja sen kutsumiseen ei tarvita <em>dispatch</em>-metodia koska <em>connect</em> hoitaa asian puolestamme.</p>\n<p>Pääsimme nyt myös käyttämään aina mukavaa async/awaitia. Palvelimen kanssa kommunikointi tapahtuu joka tapauksessa funktiossa, joten sen määrittely asyncina on vaivatonta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">componentDidMount <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> noteService<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">noteInitialization</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Voimme toimia samoin myös uuden muistiinpanon luomisen suhteen. Laajennetaan palvelimen kanssa kommunikoivaa koodia:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:3001/notes'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> getAll <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> createNew <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> content <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> content<span class=\"token punctuation\">,</span> important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getAll<span class=\"token punctuation\">,</span>\n  createNew<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Komponentin <em>NoteForm</em> metodi <em>addNote</em> muuttuu hiukan:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\nimport { noteCreation } from &#39;./../reducers/noteReducer&#39;\nimport { connect } from &#39;react-redux&#39;\nimport noteService from &#39;../services/notes&#39;\n\nclass NoteForm extends React.Component {\n\n  addNote = async (event) =&gt; {\n    event.preventDefault()\n    const content = event.target.note.value\n    event.target.note.value = &#39;&#39;\n    const newNote = await noteService.createNew(content)\n    this.props.noteCreation(newNote)\n  }\n\n  render() {\n    //...\n  }\n}\n\nexport default connect(\n  null,\n  {noteCreation}\n)(NoteForm)</code></pre></div>\n<p>Koska backend generoi muistiinpanoille id:t, muutetaan action creator <em>noteCreation</em> muotoon</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteCreation</span> <span class=\"token operator\">=</span> data <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'NEW_NOTE'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Muistiinpanojen tärkeyden muuttaminen olisi mahdollista toteuttaa samalla periaatteella, eli tehdä palvelimelle ensin asynkroninen metodikutsu ja sen jälkeen dispatchata sopiva action.</p>\n<p>Sovelluksen tämänhetkinen koodi on <a href=\"https://github.com/FullStack-HY/redux-notes/tree/part6-5\">githubissa</a> tagissä <em>part6-5</em>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Tehtäviä</h3>\n<h4>6.16 anekdootit ja backend, step1</h4>\n<p>Hae sovelluksen käynnistyessä anekdootit json-serverillä toteutetusta backendistä.</p>\n<p>Backendin alustavan sisällön saat esim. <a href=\"https://github.com/FullStack-HY/redux-anecdotes-v2/wiki\">täältä</a>.</p>\n<h4>6.17 anekdootit ja backend, step2</h4>\n<p>Muuta uusien anekdoottien luomista siten, että anekdootit talletetaan backendiin.</p>\n<h4>6.18 anekdootit ja backend, step3</h4>\n<p>Muuta myös äänestäminen siten, että anekdootit talletetaan backendiin. Jos teet talletuksen HTTP PUT -operaatiolla, niin muista että joudut korvaamaan tallettaessa koko olion.</p>\n</div>\n<div class=\"content\">\n<h3>Asynkroniset actionit ja redux thunk</h3>\n<p>Lähestymistapamme on ok, mutta siinä mielessä ikävä, että palvelimen kanssa kommunikointi tapahtuu komponenttien metodeissa. Olisi parempi, jos kommunikointi voitaisiin abstrahoida komponenteilta siten, että niiden ei tarvitsisi kuin kutsua sopivaa <em>action creatoria</em>, esim. <em>App</em> alustaisi sovelluksen tilan seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">initializeNotes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ja <em>NoteForm</em> loisi uuden muistiinpanon seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NoteForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  addNote <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">createNote</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Molemmat komponentit käyttäisivät ainoastaan propsina saamaansa funktiota, välittämättä siitä että taustalla tapahtuu todellisuudessa palvelimen kanssa tapahtuvaa kommunikointia.</p>\n<p>Asennetaan nyt <a href=\"https://github.com/gaearon/redux-thunk\">redux-thunk</a>-kirjasto, joka mahdollistaa <em>asynkronisten actionien</em> luomisen. Asennus tapahtuu komennolla:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save redux-thunk</code></pre></div>\n<p>redux-thunk-kirjasto on ns. <em>redux-middleware</em> joka täytyy ottaa käyttöön storen alustuksen yhteydessä. Eriytetään samalla storen määrittely omaan tiedostoon <em>store.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore<span class=\"token punctuation\">,</span> combineReducers<span class=\"token punctuation\">,</span> applyMiddleware <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> thunk <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-thunk'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> noteReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducers/noteReducer'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> filterReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducers/filterReducer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  notes<span class=\"token punctuation\">:</span> noteReducer<span class=\"token punctuation\">,</span>\n  filter<span class=\"token punctuation\">:</span> filterReducer<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>thunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tiedosto <em>src/index.js</em> on muutoksen jälkeen seuraava</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\nimport ReactDOM from &#39;react-dom&#39;\nimport { Provider } from &#39;react-redux&#39;\nimport App from &#39;./App&#39;\nimport store from &#39;./store&#39;\n\nReactDOM.render(\n  &lt;Provider store={store}&gt;\n    &lt;App /&gt;\n  &lt;/Provider&gt;,\n  document.getElementById(&#39;root&#39;)\n)</code></pre></div>\n<p>redux-thunkin ansiosta on mahdollista määritellä <em>action creatoreja</em> siten, että ne palauttavat funktion, jonka parametrina on redux-storen <em>dispatch</em>-metodi. Tämän ansiosta on mahdollista tehdä asynkronisia action creatoreja, jotka ensin odottavat jonkin toimenpiteen valmistumista ja vasta sen jälkeen dispatchaavat varsinaisen actionin.</p>\n<p>Voimme nyt määritellä muistiinpanojen alkutilan palvelimelta hakevan action creatorin <em>initializeNotes</em> seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">initializeNotes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">async</span> dispatch <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> noteService<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">'INIT_NOTES'</span><span class=\"token punctuation\">,</span>\n      data<span class=\"token punctuation\">:</span> notes<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sisemmässä funktiossaan, eli <em>asynkronisessa actionissa</em> operaatio hakee ensin palvelimelta kaikki muistiinpanot ja sen jälkeen <em>dispatchaa</em> muistiinpanot storeen lisäävän actionin.</p>\n<p>Komponentti <em>App</em> voidaan nyt määritellä seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">class App extends React.Component {\n  componentDidMount () {\n    this.props.initializeNotes()\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;NoteForm /&gt;\n        &lt;NoteList /&gt;\n        &lt;VisibilityFilter /&gt;\n      &lt;/div&gt;\n    )\n  }\n}\n\nexport default connect(\n  null, { initializeNotes }\n)(App)</code></pre></div>\n<p>Ratkaisu on elegantti, muistiinpanojen alustuslogiikka on eriytetty kokonaan React-komponenttien ulkopuolelle.</p>\n<p>Uuden muistiinpanon lisäävä action creator <em>createNew</em> on seuraavassa</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createNew</span> <span class=\"token operator\">=</span> content <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">async</span> dispatch <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newNote <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> noteService<span class=\"token punctuation\">.</span><span class=\"token function\">createNew</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">'NEW_NOTE'</span><span class=\"token punctuation\">,</span>\n      data<span class=\"token punctuation\">:</span> newNote<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Periaate on jälleen sama, ensin suoritetaan asynkroninen operaatio, ja sen valmistuttua <em>dispatchataan</em> storen tilaa muuttava action.</p>\n<p>Lomake muuttuu seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">class NoteForm extends React.Component {\n\n  addNote = async (event) =&gt; {\n    event.preventDefault()\n    const content = event.target.note.value\n    event.target.note.value = &#39;&#39;\n    this.props.createNew(content)\n  }\n\n  render() {\n    return (\n      &lt;form onSubmit={this.addNote}&gt;\n        &lt;input name=&#39;note&#39; /&gt;\n        &lt;button&gt;lisää&lt;/button&gt;\n      &lt;/form&gt;\n    )\n  }\n}\n\nexport default connect(\n  null, { createNew }\n)(NoteForm)</code></pre></div>\n<p>Sovelluksen tämänhetkinen koodi on <a href=\"https://github.com/FullStack-HY/redux-notes/tree/part6-6\">githubissa</a> tagissä <em>part6-6</em>.</p>\n<h3>Redux DevTools</h3>\n<p>Chromeen on asennettavissa <a href=\"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd\">Redux DevTools</a>, jonka avulla Redux-storen tilaa ja sitä muuttavia actioneja on mahdollisuus seurata selaimen konsolista.</p>\n<p>Selaimen lisäosan lisäksi debugatessa tarvitaan kirjastoa <a href=\"https://www.npmjs.com/package/redux-devtools-extension\">redux-devtools-extension</a>. Asennetaan se komennolla</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install <span class=\"token operator\">--</span>save redux<span class=\"token operator\">-</span>devtools<span class=\"token operator\">-</span>extension</code></pre></div>\n<p>Storen luomistapaa täytyy hieman muuttaa, että kirjasto saadaan käyttöön:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">// ...\nimport { createStore, combineReducers, applyMiddleware } from &#39;redux&#39;\nimport thunk from &#39;redux-thunk&#39;\nimport { composeWithDevTools } from &#39;redux-devtools-extension&#39;\n\nimport noteReducer from &#39;./reducers/noteReducer&#39;\nimport filterReducer from &#39;./reducers/filterReducer&#39;\n\nconst reducer = combineReducers({\n  notes: noteReducer,\n  filter: filterReducer\n})\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk)\n  )\n)\n\nexport default store</code></pre></div>\n<p>Kun nyt avaat konsolin, välilehti <em>redux</em> näyttää seuraavalta:</p>\n<picture><img src=\"/static/4df255f283ff5181ab9a3039b5ca7cf6/14be6/5e.png\" srcset=\"/static/4df255f283ff5181ab9a3039b5ca7cf6/4cce7/5e.png 200w,\n/static/4df255f283ff5181ab9a3039b5ca7cf6/bae5f/5e.png 400w,\n/static/4df255f283ff5181ab9a3039b5ca7cf6/14be6/5e.png 800w,\n/static/4df255f283ff5181ab9a3039b5ca7cf6/1b35a/5e.png 1200w,\n/static/4df255f283ff5181ab9a3039b5ca7cf6/9ee03/5e.png 1600w,\n/static/4df255f283ff5181ab9a3039b5ca7cf6/b4549/5e.png 1896w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Konsolin avulla on myös mahdollista dispatchata actioneja storeen</p>\n<picture><img src=\"/static/7ee4e1c35e7391f5f880c7f88307d935/14be6/5f.png\" srcset=\"/static/7ee4e1c35e7391f5f880c7f88307d935/4cce7/5f.png 200w,\n/static/7ee4e1c35e7391f5f880c7f88307d935/bae5f/5f.png 400w,\n/static/7ee4e1c35e7391f5f880c7f88307d935/14be6/5f.png 800w,\n/static/7ee4e1c35e7391f5f880c7f88307d935/1b35a/5f.png 1200w,\n/static/7ee4e1c35e7391f5f880c7f88307d935/9ee03/5f.png 1600w,\n/static/7ee4e1c35e7391f5f880c7f88307d935/e829b/5f.png 1730w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Storen tietyn hetkisen tilan lisäksi on myös mahdollista tarkastella, mikä on kunkin actionin tilalle aiheuttama muutos:</p>\n<picture><img src=\"/static/408ae9b7ac135ad5e5259b2bbd7c94a6/14be6/5g.png\" srcset=\"/static/408ae9b7ac135ad5e5259b2bbd7c94a6/4cce7/5g.png 200w,\n/static/408ae9b7ac135ad5e5259b2bbd7c94a6/bae5f/5g.png 400w,\n/static/408ae9b7ac135ad5e5259b2bbd7c94a6/14be6/5g.png 800w,\n/static/408ae9b7ac135ad5e5259b2bbd7c94a6/1b35a/5g.png 1200w,\n/static/408ae9b7ac135ad5e5259b2bbd7c94a6/9ee03/5g.png 1600w,\n/static/408ae9b7ac135ad5e5259b2bbd7c94a6/e6773/5g.png 1850w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Egghead.io:ssa on ilmaiseksi saatavilla Reduxin kehittäjän Dan Abramovin loistava tutoriaali <a href=\"https://egghead.io/courses/getting-started-with-redux\">Getting started with Redux</a>. Neljässä viimeisessä videossa käytettävää <em>connect</em>-metodia käsittelemme vasta kurssin seuraavassa osassa.</p>\n</div>\n<div class=\"tasks\">\n<h3>tehtäviä</h3>\n<h4>6.19 anekdootit ja backend, step4</h4>\n<p>Muuta redux-storen alustus tapahtumaan <em>redux-thunk</em>-kirjaston avulla toteutettuun asynkroniseen actioniin.</p>\n<h4>6.20 anekdootit ja backend, step5</h4>\n<p>Muuta myös uuden anekdootin luominen ja äänestäminen tapahtumaan <em>redux-thunk</em>-kirjaston avulla toteutettuihin asynkronisiin actioneihin.</p>\n<h4>6.21 anekdootit ja backend, step6</h4>\n<p>Notifikaatioiden tekeminen on nyt hieman ikävää, sillä se edellyttää kahden actionin tekemistä ja <em>setTimeout</em>-funktion käyttöä:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">notifyWith</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`you voted '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>anecdote<span class=\"token punctuation\">.</span>content<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">clearNotification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Tee asynkrooninen action creator, joka mahdollistaa notifikaation antamisen seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`you voted '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>anecdote<span class=\"token punctuation\">.</span>content<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'`</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>eli ensimmäisenä parametrina on renderöitävä teksti ja toisena notifikaation näyttöaika sekunneissa.</p>\n<p>Ota paranneltu notifikaatiotapa käyttöön sovelluksessasi.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/part-6-d6924a30e54668b01a539aa7bc2db9e8.svg"},"part":6,"letter":"c"}}},"pageContext":{"part":6,"letter":"c"}}