{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Ennen kun siirrymmen osan varsinaiseen aiheeseen, eli tiedon tallettamiseen tietokantaan, tarkastellaan muutamaa tapaa Node-sovellusten debuggaamiseen.</p>\n<h3>Node-sovellusten debuggaaminen</h3>\n<p>Nodella tehtyjen sovellusten debuggaaminen on jossain määrin hankalampaa kuin selaimessa toimivan Javascriptin. Vanha hyvä keino on tietysti konsoliin tulostelu. Se kannattaa aina. On mielipiteitä, joiden mukaan konsoliin tulostelun sijaan olisi syytä suosia jotain kehittyneempää menetelmää, mutta en ole ollenkaan samaa mieltä. Jopa maailman aivan eliittiin kuuluvat open source -kehittäjät <a href=\"https://tenderlovemaking.com/2016/02/05/i-am-a-puts-debuggerer.html\">käyttävät</a> tätä <a href=\"https://swizec.com/blog/javascript-debugging-slightly-beyond-console-log/swizec/6633\">menetelmää</a>.</p>\n<h4>Visual Studio Code</h4>\n<p>Visual Studio Coden debuggeri voi olla hyödyksi joissain tapauksissa. Saat käynnistettyä sovelluksen debuggaustilassa seuraavasti</p>\n<picture><img src=\"/static/d5be104ee40f9e3c2793b288c15d50dc/14be6/35.png\" srcset=\"/static/d5be104ee40f9e3c2793b288c15d50dc/4cce7/35.png 200w,\n/static/d5be104ee40f9e3c2793b288c15d50dc/bae5f/35.png 400w,\n/static/d5be104ee40f9e3c2793b288c15d50dc/14be6/35.png 800w,\n/static/d5be104ee40f9e3c2793b288c15d50dc/1b35a/35.png 1200w,\n/static/d5be104ee40f9e3c2793b288c15d50dc/9ee03/35.png 1600w,\n/static/d5be104ee40f9e3c2793b288c15d50dc/b6ad2/35.png 1880w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Huomaa, että sovellus ei saa olla samalla käynnissä \"normaalisti\" konsolista, sillä tällöin sovelluksen käyttämä portti on varattu.</p>\n<p>Seuraavassa screenshot, missä koodi on pysäytetty kesken uuden muistiinpanon lisäyksen</p>\n<picture><img src=\"/static/47274d6ad3595488a2525b0392c87765/14be6/36a.png\" srcset=\"/static/47274d6ad3595488a2525b0392c87765/4cce7/36a.png 200w,\n/static/47274d6ad3595488a2525b0392c87765/bae5f/36a.png 400w,\n/static/47274d6ad3595488a2525b0392c87765/14be6/36a.png 800w,\n/static/47274d6ad3595488a2525b0392c87765/1b35a/36a.png 1200w,\n/static/47274d6ad3595488a2525b0392c87765/9ee03/36a.png 1600w,\n/static/47274d6ad3595488a2525b0392c87765/22997/36a.png 2040w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Koodi on pysähtynyt nuolen osoittaman <i>breakpointin</i> kohdalle ja konsoliin on evaluoitu muuttujan <i>note</i> arvo. Vasemmalla olevassa ikkunassa on nähtävillä myös muuta ohjelman tilaan liittyvää.</p>\n<p>Ylhäällä olevista nuolista yms. voidaan kontrolloida debuggauksen etenemistä.</p>\n<p>Itse en jostain syystä juurikaan käytä Visual Studio Code debuggeria.</p>\n<h4>Chromen dev tools</h4>\n<p>Debuggaus onnisuu myös Chromen developer-konsolilla, käynnistämällä sovellus komennolla:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node --inspect index.js</code></pre></div>\n<p>Debuggeriin pääsee käsiksi klikkaamalla chromen devloper-konsoliin ilmestyneestä vihreästä ikonista</p>\n<picture><img src=\"/static/98eea9ee4f184a484417314745f7422a/14be6/37.png\" srcset=\"/static/98eea9ee4f184a484417314745f7422a/4cce7/37.png 200w,\n/static/98eea9ee4f184a484417314745f7422a/bae5f/37.png 400w,\n/static/98eea9ee4f184a484417314745f7422a/14be6/37.png 800w,\n/static/98eea9ee4f184a484417314745f7422a/1b35a/37.png 1200w,\n/static/98eea9ee4f184a484417314745f7422a/9ee03/37.png 1600w,\n/static/98eea9ee4f184a484417314745f7422a/5e830/37.png 1688w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Debuggausnäkymä toimii kuten React-koodia debugattaessa, <i>Sources</i>-välilehdelle voidaan esim. asettaa breakpointeja, eli kohtia joihin suoritus pysähtyy:</p>\n<picture><img src=\"/static/c0ebc516f43538e6e93a966b50162262/14be6/38.png\" srcset=\"/static/c0ebc516f43538e6e93a966b50162262/4cce7/38.png 200w,\n/static/c0ebc516f43538e6e93a966b50162262/bae5f/38.png 400w,\n/static/c0ebc516f43538e6e93a966b50162262/14be6/38.png 800w,\n/static/c0ebc516f43538e6e93a966b50162262/1b35a/38.png 1200w,\n/static/c0ebc516f43538e6e93a966b50162262/9ee03/38.png 1600w,\n/static/c0ebc516f43538e6e93a966b50162262/e1a7a/38.png 1962w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Kaikki sovelluksen console.log-tulostukset tulevat debuggerin <i>Console</i>-välilehdelle. Voit myös tutkia siellä muuttujien arvoja ja suorittaa mielivaltaista Javascript-koodia:</p>\n<picture><img src=\"/static/7f0509f9db5e7930ca9a98a1c1b21e2b/14be6/39.png\" srcset=\"/static/7f0509f9db5e7930ca9a98a1c1b21e2b/4cce7/39.png 200w,\n/static/7f0509f9db5e7930ca9a98a1c1b21e2b/bae5f/39.png 400w,\n/static/7f0509f9db5e7930ca9a98a1c1b21e2b/14be6/39.png 800w,\n/static/7f0509f9db5e7930ca9a98a1c1b21e2b/1b35a/39.png 1200w,\n/static/7f0509f9db5e7930ca9a98a1c1b21e2b/9ee03/39.png 1600w,\n/static/7f0509f9db5e7930ca9a98a1c1b21e2b/227d8/39.png 1934w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>Epäile kaikkea</h4>\n<p>Full Stack -sovellusten debuggaaminen vaikuttaa alussa erittäin hankalalta. Kun kohta kuvaan tulee myös tietokanta ja frontend on yhdistetty backendiin, on potentiaalisia virhelähteitä todella paljon.</p>\n<p>Kun sovellus \"ei toimi\", onkin selvitettävä missä vika on. On erittäin yleistä, että vika on sellaisessa paikassa, mitä ei osaa ollenkaan epäillä, ja menee minuutti-, tunti- tai jopa päiväkausia ennen kuin oikea ongelmien lähde löytyy.</p>\n<p>Avainasemassa onkin systemaattisuus. Koska virhe voi olla melkein missä vaan, <i>kaikkea pitää epäillä</i>, ja tulee pyrkiä poissulkemaan ne osat tarkastelusta, missä virhe ei ainakaan ole. Konsoliin kirjoitus, Postman, debuggeri ja kokemus auttavat.</p>\n<p>Virheiden ilmaantuessa <i>ylivoimaisesti huonoin strategia</i> on jatkaa koodin kirjoittamista. Se on tae siitä, että koodissa on pian kymmenen ongelmaa lisää ja niiden syyn selvittäminen on entistäkin vaikeampaa. Toyota Production Systemin periaate <a href=\"http://gettingtolean.com/toyota-principle-5-build-culture-stopping-fix/#.Wjv9axP1WCQ\">Stop and fix</a> toimii tässäkin yhteydessä paremmin kuin hyvin.</p>\n<h3>MongoDB</h3>\n<p>Jotta saisimme talletettua muistiinpanot pysyvästi, tarvitsemme tietokannan. Useimmilla laitoksen kursseilla on käytetty relaatiotietokantoja. Tällä kurssilla käytämme <a href=\"https://www.mongodb.com/\">MongoDB</a>:tä, joka on ns. <a href=\"https://en.wikipedia.org/wiki/Document-oriented_database\">dokumenttitietokanta</a>.</p>\n<p>Dokumenttitietokannat poikkeavat jossain määrin relaatiotietokannoista niin datan organisointitapansa kuin kyselykielensäkin suhteen. Dokumenttitietokantojen ajatellaan kuuluvan sateenvarjotermin <a href=\"https://en.wikipedia.org/wiki/NoSQL\">NoSQL</a> alle. Lisää dokumenttitietokannoista ja NoSQL:stä Tietokantojen perusteiden <a href=\"https://tikape-s18.mooc.fi/part7/\">viikon 7 materiaalista</a>.</p>\n<p><strong>Lue nyt Tietokantojen perusteiden dokumenttitietokantoja kuvaava osuus.</strong> Jatkossa oletetaan, että hallitset käsitteet <i>dokumentti</i> ja <i>kokoelma</i> (collection).</p>\n<p>MongoDB:n voi luonnollisesti asentaa omalle koneelle. Internetistä löytyy kuitenkin myös palveluna toimivia Mongoja (esim <a href=\"https://mlab.com/\">mlab</a> ja <a href=\"https://www.mongodb.com/cloud/atlas\">MongoDbCloud</a>) ja seuraava ohje olettaa, että käytössä on jo vuosien kokemuksella luotettavaksi havaittu <a href=\"https://mlab.com/\">mlab</a>.</p>\n<p>Mlab-kanta on helppo ottaa käyttöön suoraan <a href=\"https://elements.heroku.com/addons/mongolab\">Herokun kautta</a>, vaikka tämä on maksutonta, edellyttää se luottokorttitietojen antamista Herokulle.</p>\n<p>Määrittelemmekin seuraavassa kannan suoraan <a href=\"https://mlab.com/\">mlab</a>:iin, jolloin luottokorttitietoja ei tarvita.</p>\n<p>Aloita luomalla mlabiin käyttäjätili, saatuasi mlabilta verifiointimailin ja kirjauduttuasi mailin linkin kautta sisään, voit luoda tietokannan:</p>\n<picture><img src=\"/static/a3d631995221af940012c80ef1f5921e/14be6/40.png\" srcset=\"/static/a3d631995221af940012c80ef1f5921e/4cce7/40.png 200w,\n/static/a3d631995221af940012c80ef1f5921e/bae5f/40.png 400w,\n/static/a3d631995221af940012c80ef1f5921e/14be6/40.png 800w,\n/static/a3d631995221af940012c80ef1f5921e/1b35a/40.png 1200w,\n/static/a3d631995221af940012c80ef1f5921e/52ebc/40.png 1498w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Määrittele esim. <i>Amazon web services</i>, tyypiksi ilmainen &#x3C;>sandbox</i> ja sijoituspaikaksi <i>Irlanti</i> ja anna kannalle sopiva nimi.</p>\n<p>Kun kanta on hetken kuluttua valmis, mene tietokannan hallintanäkymään</p>\n<picture><img src=\"/static/39918f3c82d9abcc83517cea50eb8d3f/14be6/41.png\" srcset=\"/static/39918f3c82d9abcc83517cea50eb8d3f/4cce7/41.png 200w,\n/static/39918f3c82d9abcc83517cea50eb8d3f/bae5f/41.png 400w,\n/static/39918f3c82d9abcc83517cea50eb8d3f/14be6/41.png 800w,\n/static/39918f3c82d9abcc83517cea50eb8d3f/1b35a/41.png 1200w,\n/static/39918f3c82d9abcc83517cea50eb8d3f/9ee03/41.png 1600w,\n/static/39918f3c82d9abcc83517cea50eb8d3f/be508/41.png 1918w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Näkymä kertoo <i>MongoDB URI:n</i> eli osoitteen, jonka avulla sovelluksemme käyttämä MongoDB-kirjasto saa yhteyden kantaan.</p>\n<p>Osoite näyttää seuraavalta:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mongodb://<span class=\"token operator\">&lt;</span>dbuser<span class=\"token operator\">></span>:<span class=\"token operator\">&lt;</span>dbpassword<span class=\"token operator\">></span>@ds161224.mlab.com:61224/fullstack2019-notes</code></pre></div>\n<p>Tarvitsemme kannan käyttöä varten <i>dbuserin</i> eli käyttäjätunnuksen. Käyttäjätunnuksen luominen tapahtuu tietokannan hallintanäkymästä</p>\n<picture><img src=\"/static/07e47c23c7f033a17e191711f4acb428/14be6/42.png\" srcset=\"/static/07e47c23c7f033a17e191711f4acb428/4cce7/42.png 200w,\n/static/07e47c23c7f033a17e191711f4acb428/bae5f/42.png 400w,\n/static/07e47c23c7f033a17e191711f4acb428/14be6/42.png 800w,\n/static/07e47c23c7f033a17e191711f4acb428/1b35a/42.png 1200w,\n/static/07e47c23c7f033a17e191711f4acb428/9ee03/42.png 1600w,\n/static/07e47c23c7f033a17e191711f4acb428/bdfce/42.png 1932w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Jos luotiin käyttäjätunnus <i>fullstack</i> jonka salasana on <i>sekred1</i>, on tietokannan osoite seuraava:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mongodb://fullstack:sekred1@ds161224.mlab.com:61224/fullstack2019-notes</code></pre></div>\n<p>Olemme nyt valmiina kannan käyttöön.</p>\n<p>Voisimme käyttää kantaa Javascript-koodista suoraan Mongon virallisen\n<a href=\"https://mongodb.github.io/node-mongodb-native/\">MongoDB Node.js driver</a> -kirjaston avulla, mutta se on ikävän työlästä. Käytämmekin hieman korkeammalla tasolla toimivaa <a href=\"http://mongoosejs.com/index.html\">mongoose</a>-kirjastoa.</p>\n<p>Mongoosesta voisi käyttää luonnehdintaa <i>object document mapper</i> (ODM), ja sen avulla Javascript-olioiden tallettaminen mongon dokumenteiksi on suoraviivaista.</p>\n<p>Asennetaan mongoose:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> mongoose --save</code></pre></div>\n<p>Ei lisätä mongoa käsittelevää koodia heti backendin koodin sekaan, vaan tehdään erillinen kokeilusovellus tiedostoon <i>mongo.js</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'give password as argument'</span><span class=\"token punctuation\">)</span>\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span>\n  <span class=\"token template-string\"><span class=\"token string\">`mongodb://fullstack:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>password<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">@ds161224.mlab.com:61224/fullstack2019-notes`</span></span>\n\nmongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useNewUrlParser<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  content<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n  date<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">,</span>\n  important<span class=\"token punctuation\">:</span> Boolean<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  content<span class=\"token punctuation\">:</span> <span class=\"token string\">'HTML on helppoa'</span><span class=\"token punctuation\">,</span>\n  date<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nnote<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'note saved!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p> Koodi siis olettaa, että sille annetan parametrina mlabiin määritelty salasana. Komentoriviparametriin se pääsee käsiksi seuraavasti</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> password <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Kun koodi suoritetaan komennolla <i>node mongo.js salasana</i> lisää mongoose tietokantaaan uuden dokumentin.</p>\n<p>Mlab:in hallintanäkymä näyttää lisäämämme datan:</p>\n<picture><img src=\"/static/953512cd6c0ce7ae7ef8073636872692/14be6/43.png\" srcset=\"/static/953512cd6c0ce7ae7ef8073636872692/4cce7/43.png 200w,\n/static/953512cd6c0ce7ae7ef8073636872692/bae5f/43.png 400w,\n/static/953512cd6c0ce7ae7ef8073636872692/14be6/43.png 800w,\n/static/953512cd6c0ce7ae7ef8073636872692/1b35a/43.png 1200w,\n/static/953512cd6c0ce7ae7ef8073636872692/9ee03/43.png 1600w,\n/static/953512cd6c0ce7ae7ef8073636872692/dd788/43.png 1632w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Kuten näkymä kertoo, on muistiinpanoa vastaava <i>dokumentti</i> lisätty kokoelmaan (collection) nimeltään <i>notes</i>.</p>\n<h3>Skeema</h3>\n<p>Yhteyden avaamisen jälkeen määritellään mustiinpanoa vastaava <a href=\"http://mongoosejs.com/docs/models.html\">model</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  content<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n  date<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">,</span>\n  important<span class=\"token punctuation\">:</span> Boolean<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Modelin parametrina määritellään <i>muistiinpanon</i> <a href=\"http://mongoosejs.com/docs/guide.html\">skeema</a>, joka kertoo mongooselle, miten muistiinpano-oliot tulee tallettaa tietokantaan.</p>\n<p>Ensimmäisenä parametrina oleva merkkijono <i>Note</i> määrittelee, että mongoose tallettaa muistiinpanoa vastaavat oliot kokoelmaan nimeltään <i>notes</i> sillä <a href=\"http://mongoosejs.com/docs/models.html\">mongoosen konventiona</a> on määritellä kokoelmien nimet monikossa (esim. <i>notes</i>), kun niihin viitataan modelin määrittelyssä yksikkömuodossa (esim. <i>Note</i>).</p>\n<p>Mongoosen dokumentaatiossa skeema ja sitä vastaava model määritellään kumpikin erikseen:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> noteSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  content<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n  date<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">,</span>\n  important<span class=\"token punctuation\">:</span> Boolean<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note'</span><span class=\"token punctuation\">,</span> noteSchema<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Koska meillä ei tällä hetkellä ole skeema-oliolle muuta käyttöä kuin modelin parametrina, käytämme hyväksemme sitä, että skeema voidaan määritellä modeleille suoraan antamalla toisena parametrina skeeman määrittelevä olio.</p>\n<p>Dokumenttikannat, kuten Mongo ovat <i>skeemattomia</i>, eli tietokanta itsessään ei välitä mitään sinne talletettavan tiedon muodosta. Samaan kokoelmaankin on mahdollista tallettaa olioita joilla on täysin eri kentät.</p>\n<p>Mongoosea käytettäessä periaatteena on kuitenkin se, että tietokantaan talletettavalle tiedolle määritellään <i>sovelluksen koodin tasolla skeema</i>, joka määrittelee minkä muotoisia olioita kannan eri kokoelmiin talletetaan.</p>\n<h3>Olioiden luominen ja tallettaminen</h3>\n<p>Seuraavaksi sovellus luo muistiinpanoa vastaavan <a href=\"http://mongoosejs.com/docs/models.html\">model</a>:in avulla muistiinpano-olion:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  content<span class=\"token punctuation\">:</span> <span class=\"token string\">'Selain pystyy suorittamaan vain javascriptiä'</span><span class=\"token punctuation\">,</span>\n  date<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Modelit ovat ns. <i>konstruktorifunktioita</i>, jotka luovat parametrien perusteella Javascript-olioita. Koska oliot on luotu modelien konstruktorifunktiolla, niillä on kaikki modelien ominaisuudet, eli joukko metodeja, joiden avulla olioita voidaan mm. tallettaa tietokantaan.</p>\n<p>Tallettaminen tapahtuu metodilla <em>save</em>. Metodi palauttaa <em>promisen</em>, jolle voidaan rekisteröidä <em>then</em>-metodin avulla tapahtumankäsittelijä:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'note saved!'</span><span class=\"token punctuation\">)</span>\n  mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Kun olio on tallennettu kantaan, kutsutaan <em>then</em>:in parametrina olevaa tapahtumankäsittelijää, joka sulkee tietokantayhteyden komennolla <code>mongoose.connection.close()</code>. Ilman yhteyden sulkemista ohjelman suoritus ei pääty.</p>\n<p>Tallennusoperaation tulos on takaisinkutsun parametrissa <em>result</em>. Yhtä olioa tallentaessamme tulos ei ole kovin mielenkiintoinen, olion sisällön voi esim. tulostaa konsoliin jos haluaa tutkia sitä tarkemmin sovelluslogiikassa tai esim. debugatessa.</p>\n<p>Talletetaan kantaan myös pari muuta muistiinpanoa muokkaamalla dataa koodista ja suorittamalla ohjelma uudelleen.</p>\n<h3>Olioiden hakeminen tietokannasta</h3>\n<p>Kommentoidaan koodista uusia muistiinpanoja generoiva osa, ja korvataan se seuraavalla:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Note<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  result<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Kun koodi suoritetaan, kantaan talletetut muistiinpanot tulostuvat.</p>\n<p>Oliot haetaan kannasta <em>Note</em>-modelin metodilla <a href=\"http://mongoosejs.com/docs/api.html#find_find\">find</a>. Metodin parametrina on hakuehto. Koska hakuehtona on tyhjä olio <code>{}</code>, saimme kannasta kaikki <em>notes</em>-kokoelmaan talletetut oliot.</p>\n<p>Hakuehdot noudattavat mongon <a href=\"https://docs.mongodb.com/manual/reference/operator/\">syntaksia</a>.</p>\n<p>Voisimme hakea esim. ainoastaan tärkeät muistiinpanot seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Note<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</div>\n<div class=\"tasks\">\n<h3>Tehtäviä</h3>\n<h4>3.12: tietokanta komentoriviltä</h4>\n<p>Luo sovellukselle pilvessä oleva mongo mlabin avulla.</p>\n<p>Tee projektihakemistoon tiedosto <i>mongo.js</i>, jonka avulla voit lisätä tietokantaan puhelinnumeroja sekä listata kaikki kannassa olevat numerot.</p>\n<p><strong>Huom</strong> jos/kun laitat tiedoston Githubiin, älä laita tietokannan salasanaa mukaan!</p>\n<p>Ohjelma toimii siten, että jos sille annetaan käynnistäessä kolme komentoriviparametria (joista ensimmäinen on salasana), esim:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node mongo.js salasana Joulupukki 040-1234556</code></pre></div>\n<p>Ohjelma tulostaa</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">lisätään Joulupukki numero 040-1234556 luetteloon</code></pre></div>\n<p>ja lisää uuden yhteystiedon tietokantaan. Huomaa, että jos nimi sisältää välilyöntejä, on se annettava hipsuissa:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node mongo.js <span class=\"token string\">\"Arto Vihavainen\"</span> 040-1234556</code></pre></div>\n<p>Jos komentoriviparametreina ei ole muuta kuin salasana, eli ohjelma suoritetaan komennolla</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node mongo.js salasana</code></pre></div>\n<p>tulostaa ohjelma tietokannassa olevat numerotiedot:</p>\n<pre>\npuhelinluettelo:\nPekka Mikkola 040-1234556\nArto Vihavainen 045-1232456\nTiina Niklander 040-1231236\n</pre>\n<p>Saat selville ohjelman komentoriviparametrit muuttujasta <a href=\"https://nodejs.org/docs/latest-v8.x/api/process.html#process_process_argv\">process.argv</a></p>\n<p><strong>HUOM: älä sulje tietokantayhteyttä väärässä kohdassa</strong>. Esim. seuraava koodi ei toimi</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Person\n  <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>persons<span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Koodin suoritus nimittäin etenee siten, että heti operaation <em>Person.find</em> käynnistymisen jälkeen suoritetaan komento <em>mongoose.connection.close()</em> ja tietokantayhteys katkeaa välittömästi. Näin ei koskaan päästä siihen pisteeseen, että <em>Person.find</em>-operaation valmistumisen käsittelevää <i>takaisinkutsufunktiota</i> kutsuttaisiin.</p>\n<p>Oikea paikka tietokantayhteyden sulkemiselle on takaisinkutsufunktion loppu:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Person\n  <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>persons<span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>HUOM2</strong> jos määrittelet modelin nimeksi <i>Person</i>, muuttaa mongoose sen monikkomuotoon <i>people</i>, jota se käyttää vastaavan kokoelman nimenä.</p>\n</div>\n<div class=\"content\">\n<h3>Tietokantaa käyttävä backend</h3>\n<p>Nyt meillä on periaatteessa hallussamme riittävä tietämys ottaa mongo käyttöön sovelluksessamme.</p>\n<p>Aloitetaan nopean kaavan mukaan, copypastetaan tiedostoon <em>index.js</em> mongoosen määrittelyt, eli</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span>\n  <span class=\"token string\">'mongodb://fullstack:sekred@ds211088.mlab.com:11088/fullstack-notes'</span><span class=\"token punctuation\">;</span>\n\nmongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  content<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n  date<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">,</span>\n  important<span class=\"token punctuation\">:</span> Boolean<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ja muutetaan kaikkien muistiinpanojen hakemisesta vastaava käsittelijä seuraavaan muotoon</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  Note<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>notes <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Voimme todeta selaimella, että backend toimii kaikkien dokumenttien näyttämisen osalta:</p>\n<picture><img src=\"/static/2ac106c1b6fddd3626f67bda6577c2ce/14be6/14.png\" srcset=\"/static/2ac106c1b6fddd3626f67bda6577c2ce/4cce7/14.png 200w,\n/static/2ac106c1b6fddd3626f67bda6577c2ce/bae5f/14.png 400w,\n/static/2ac106c1b6fddd3626f67bda6577c2ce/14be6/14.png 800w,\n/static/2ac106c1b6fddd3626f67bda6577c2ce/1b35a/14.png 1200w,\n/static/2ac106c1b6fddd3626f67bda6577c2ce/9ee03/14.png 1600w,\n/static/2ac106c1b6fddd3626f67bda6577c2ce/a098b/14.png 1680w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Toiminnallisuus on muuten kunnossa, mutta frontend olettaa, että olioiden yksikäsitteinen tunniste on kentässä <em>id</em>. Emme myöskään halua näyttää frontendille mongon versiointiin käyttämää kenttää <em>__v</em>. Tehdään pieni apufunktio, jonka avulla yksittäinen muistiinpano saadaan muutettua mongon sisäisestä esitysmuodosta haluamaamme muotoon:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">formatNote</span> <span class=\"token operator\">=</span> note <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    content<span class=\"token punctuation\">:</span> note<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n    date<span class=\"token punctuation\">:</span> note<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> note<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">,</span>\n    id<span class=\"token punctuation\">:</span> note<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ja palautetaan HTTP-pyynnön vastauksena funktion avulla muotoiltuja oliota:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  Note<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>notes <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>formatNote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nyt siis muuttujassa <em>notes</em> on taulukollinen mongon palauttamia olioita. Kun suoritamme operaation <code>notes.map(formatNote)</code> seurauksena on uusi taulukko, missä on jokaista alkuperäisen taulukon alkiota vastaava funktion <em>formatNote</em> avulla muodostettu alkio.</p>\n<p>Jos kannasta haettavilla olioilla olisi suuri määrä kenttiä, apufunktio <em>formatNote</em> kannattaisi muotoilla hieman geneerisemmässä muodossa, esim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">formatNote</span> <span class=\"token operator\">=</span> note <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> formattedNote <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>note<span class=\"token punctuation\">.</span>_doc<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> note<span class=\"token punctuation\">.</span>_id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span> formattedNote<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span> formattedNote<span class=\"token punctuation\">.</span>__v<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> formattedNote<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ensimmäinen rivi luo uuden olion, mihin kopioituu kaikki vanhan olion kentät. Uuteen olioon lisätään myös kenttä <em>id</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> formattedNote <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>note<span class=\"token punctuation\">.</span>_doc<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span> note<span class=\"token punctuation\">.</span>_id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ennen olion palauttamista turhat kentät poistetaan.</p>\n<p>Jos ohjelma käyttäisi muunkin tyyppisiä olioita kuin <em>muistiinpanoja</em> sopisi sama funktio niidenkin muotoiluun. Jatkon kannalta on kuitenkin parempi, että pidämme alkuperäisen version funktiosta.</p>\n<p>On myös mahdollista estää mongoosea palauttamasta tiettyjen kenttien arvoa, tai pyytää sitä palauttamaan vain tietyt kentät. Saamme estettyä parametrin <em>__v</em>:n lisäämällä <em>find</em>-metodiin toiseksi parametriksi <em>{\\</em>_v: 0}_ seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  Note<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> __v<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>notes <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>formatNote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Kyselyjen palauttamien kenttien määrittely tapahtuu Mongon <a href=\"https://docs.mongodb.com/manual/tutorial/project-fields-from-query-results/\">syntaksin mukaan</a>.</p>\n<h3>Tietokantamäärittelyjen eriyttäminen omaksi moduuliksi</h3>\n<p>Ennen kuin täydennämme backendin muutkin osat käyttämään tietokantaa, eriytetään mongoose-spesifinen koodi omaan moduuliin.</p>\n<p>Tehdään moduulia varten hakemisto <em>models</em> ja sinne tiedosto <em>note.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span>\n  <span class=\"token string\">'mongodb://fullstack:sekred@ds211088.mlab.com:11088/fullstack-notes'</span><span class=\"token punctuation\">;</span>\n\nmongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  content<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n  date<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">,</span>\n  important<span class=\"token punctuation\">:</span> Boolean<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Note<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Noden <a href=\"https://nodejs.org/docs/latest-v8.x/api/modules.html\">moduulien</a> määrittely poikkeaa hiukan osassa 2 määrittelemistämme frontendin käyttämistä <a href=\"/osa2/#refaktorointia---moduulit\">ES6-moduuleista</a>.</p>\n<p>Moduulin ulos näkyvä osa määritellään asettamalla arvo muuttujalle <em>module.exports</em>. Asetamme arvoksi määritellyn modelin <em>Note</em>. Muut moduulin sisällä määritellyt asiat, esim. muuttujat <em>mongoose</em> ja <em>url</em> eivät näy moduulin käyttäjälle.</p>\n<p>Moduulin käyttöönotto tapahtuu lisäämällä tiedostoon <em>index.js</em> seuraava rivi</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./models/note'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Näin muuttuja <em>Note</em> saa arvokseen saman olion, jonka moduuli määrittelee.</p>\n<h3>Muut operaatiot</h3>\n<p>Muutetaan nyt kaikki operaatiot tietokantaa käyttävään muotoon.</p>\n<p>Uuden muistiinpanon luominen tapahtuu seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>content <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'content missing'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    content<span class=\"token punctuation\">:</span> body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> body<span class=\"token punctuation\">.</span>important <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>savedNote <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatNote</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Muistiinpano-oliot siis luodaan <em>Note</em>-konstruktorifunktiolla. Pyyntöön vastataan <em>save</em>-operaation takaisinkutsufunktion sisällä. Näin varmistutaan, että operaatio vastaus tapahtuu vain jos operaatio on onnistunut. Palaamme virheiden käsittelyyn myöhemmin.</p>\n<p>Takaisinkutsufunktion parametrina oleva <em>savedNote</em> on talletettu muistiinpano. HTTP-pyyntöön palautetaan kuitenkin siitä funktiolla <em>formatNote</em> formatoitu muoto:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatNote</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Yksittäisen muistiinpanon tarkastelu muuttuu muotoon</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  Note<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatNote</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Frontendin ja backendin yhteistominnallisuuden varmistaminen</h3>\n<p>Kun backendia laajennetaan, kannattaa sitä testailla aluksi <strong>ehdottomasti selaimella, postmanilla tai VS Coden REST clientillä:</strong>. Seuraavassa kokeillaan uuden muistiinpanon luomista tietokannan käyttöönoton jälkeen:</p>\n<picture><img src=\"/static/2def90a692336392cb9534ae8253a381/14be6/14b.png\" srcset=\"/static/2def90a692336392cb9534ae8253a381/4cce7/14b.png 200w,\n/static/2def90a692336392cb9534ae8253a381/bae5f/14b.png 400w,\n/static/2def90a692336392cb9534ae8253a381/14be6/14b.png 800w,\n/static/2def90a692336392cb9534ae8253a381/1b35a/14b.png 1200w,\n/static/2def90a692336392cb9534ae8253a381/7f7ac/14b.png 1542w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Vasta kun kaikki on todettu toimivaksi, kannattaa siirtyä testailemaan että muutosten jälkeinen backend toimii yhdessä myös frontendin kanssa. Kaikkien kokeilujen tekeminen ainoastaan frontendin kautta on todennäköisesti varsin tehotonta.</p>\n<p>Todennäköisesti voi olla kannattavaa edetä frontin ja backin integroinnissa toiminnallisuus kerrallaan, eli ensin voidaan toteuttaa esim. kaikkien muistiinpanojen näyttäminen backendiin ja testata että toiminnallisuus toimii selaimella. Tämän jälkeen varmistetaan, että frontend toimii yhteen muutetun backendin kanssa. Kun kaikki on todettu olevan kunnossa, siirrytään seuraavan ominaisuuden toteuttamiseen.</p>\n<p>Kun kuvioissa on mukana tietokanta, on tietokannan tilan tarkastelu mlabin hallintanäkymästä varsin hyödyllistä, usein myös suoraan tietokantaa käyttävät Node-apuohjelmat, kuten tiedostoon <em>mongo.js</em> kirjoittamamme koodi auttavat sovelluskehityksen edetessä.</p>\n<p>Sovelluksen tämän hetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/FullStack-HY/part3-notes-backend/tree/part3-3\">githubissa</a>, tagissa <em>part3-3</em>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Tehtäviä</h3>\n<p>Tee nyt tehtävät <a href=\"/teht%C3%A4v%C3%A4t#backend-ja-tietokanta\">3.13-3.15</a></p>\n</div>\n<div class=\"content\">\n<h3>Virheiden käsittely</h3>\n<p>Jos yritämme mennä selaimella sellaisen yksittäisen muistiinpanon sivulle, jota ei ole olemassa, eli esim. urliin <a href=\"http://localhost:3001/api/notes/5a3b80015b6ec6f1bdf68d\">http://localhost:3001/api/notes/5a3b80015b6ec6f1bdf68d</a> missä <em>5a3b80015b6ec6f1bdf68d</em> ei ole minkään tietokannassa olevan muistiinpanon tunniste, jää selain \"jumiin\" sillä palvelin ei vastaa pyyntöön koskaan.</p>\n<p>Palvelimen konsolissa näkyykin virheilmoitus:</p>\n<picture><img src=\"/static/2d82fd94406b1a9ca544c70fecd262dc/14be6/15.png\" srcset=\"/static/2d82fd94406b1a9ca544c70fecd262dc/4cce7/15.png 200w,\n/static/2d82fd94406b1a9ca544c70fecd262dc/bae5f/15.png 400w,\n/static/2d82fd94406b1a9ca544c70fecd262dc/14be6/15.png 800w,\n/static/2d82fd94406b1a9ca544c70fecd262dc/1b35a/15.png 1200w,\n/static/2d82fd94406b1a9ca544c70fecd262dc/39ad8/15.png 1574w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Kysely on epäonnistunut ja kyselyä vastaava promise mennyt tilaan <em>rejected</em>. Koska emme käsittele promisen epäonnistumista, ei pyyntöön vastata koskaan. Osassa 2 tutustuimme jo <a href=\"/osa2#promise-ja-virheet\">promisejen virhetilanteiden käsittelyyn</a>.</p>\n<p>Lisätään tilanteeseen yksinkertainen virheidenkäsittelijä:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  Note<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatNote</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Kaikissa virheeseen päättyvissä tilanteissa HTTP-pyyntöön vastataan statuskoodilla 404 not found. Konsoliin tulostetaan tarkempi tieto virheestä.</p>\n<p>Tapauksessamme on itseasiassa olemassa kaksi erityyppistä virhetilannetta. Toinen vastaa sitä, että yritetään hakea muistiinpanoa virheellisen muotoisella <em>id</em>:llä, eli sellasiella mikä ei vastaa mongon id:iden muotoa.</p>\n<p>Jos teemme näin tulostuu konsoliin:</p>\n<pre>\nMethod: GET\nPath:   /api/notes/5a3b7c3c31d61cb9f8a0343\nBody:   {}\n---\n{ CastError: Cast to ObjectId failed for value \"5a3b7c3c31d61cb9f8a0343\" at path \"_id\"\n    at CastError (/Users/mluukkai/opetus/_fullstack/osa3-muisiinpanot/node_modules/mongoose/lib/error/cast.js:27:11)\n    at ObjectId.cast (/Users/mluukkai/opetus/_fullstack/osa3-muisiinpanot/node_modules/mongoose/lib/schema/objectid.js:158:13)\n    ...\n</pre>\n<p>Toinen virhetilanne taas vastaa tilannetta, missä haettavan muistiinpanon id on periaatteessa oikeassa formaatissa, mutta tietokannasta ei löydy indeksillä mitään:</p>\n<pre>\nMethod: GET\nPath:   /api/notes/5a3b7c3c31d61cbd9f8a0343\nBody:   {}\n---\nTypeError: Cannot read property '_doc' of null\n    at formatNote (/Users/mluukkai/opetus/_fullstack/osa3-muisiinpanot/index.js:46:33)\n    at Note.findById.then.note (/Users/mluukkai/opetus/_fullstack/osa3-muisiinpanot/index.js:65:21)\n</pre>\n<p>Nämä tilanteet on syytä erottaa toisistaan, ja itseasiassa jälkimmäinen poikkeus on oman koodimme <code>/Users/mluukkai/opetus/_fullstack/osa3-muisiinpanot/index.js:46</code> aiheuttama.</p>\n<p>Muutetaan koodia seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  Note<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatNote</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'malformatted id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Jos kannasta ei löydy haettua olioa, muuttujan <em>note</em> arvo on <em>undefined</em> ja koodi ajautuu <em>else</em>-haaraan. Siellä vastataan kyselyyn <em>404 not found</em>.</p>\n<p>Jos id ei ole hyväksyttävässä muodossa, ajaudutaan <em>catch</em>:in avulla määriteltyyn virheidenkäsittelijään. Sopiva statuskoodi on <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1\">400 bad request</a> koska kyse on juuri siitä:</p>\n<blockquote>\n<p>The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.</p>\n</blockquote>\n<p>Vastaukseen on lisätty myös hieman dataa kertomaan virheen syystä.</p>\n<p>Promisejen yhteydessä kannattaa melkeinpä aina lisätä koodiin myös virhetilainteiden käsittely, muuten seurauksena on usein hämmentäviä vikoja.</p>\n<p>Ei ole koskaan huono idea tulostaa poikkeuksen aiheuttanutta olioa konsoliin virheenkäsittelijässä:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'malformatted id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Virheenkäsittelijään joutumisen syy voi olla joku ihan muu kuin mitä on tullut alunperin ajatelleeksi. Jos virheen tulostaa konsoliin, voi säästyä pitkiltä ja turhauttavilta väärää asiaa debuggaavilta sessioilta.</p>\n<p>Aina kun ohjelmoit ja projektissa on mukana backend <strong>tulee ehdottomasti koko ajan pitää silmällä backendin konsolin tulostuksia</strong>. Jos työskentelet pienellä näytöllä, riittää että konsolista on näkyvissä edes pieni kaistale:</p>\n<picture><img src=\"/static/b5656dca7416a1a37670dc5a51bfbbc7/14be6/15b.png\" srcset=\"/static/b5656dca7416a1a37670dc5a51bfbbc7/4cce7/15b.png 200w,\n/static/b5656dca7416a1a37670dc5a51bfbbc7/bae5f/15b.png 400w,\n/static/b5656dca7416a1a37670dc5a51bfbbc7/14be6/15b.png 800w,\n/static/b5656dca7416a1a37670dc5a51bfbbc7/1b35a/15b.png 1200w,\n/static/b5656dca7416a1a37670dc5a51bfbbc7/9ee03/15b.png 1600w,\n/static/b5656dca7416a1a37670dc5a51bfbbc7/5f626/15b.png 2050w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>loput operaatiot</h3>\n<p>Toteutetaan vielä jäljellä olevat operaatiot, eli yksittäisen muistiinpanon poisto ja muokkaus.</p>\n<p>Poisto onnistuu helpoiten metodilla <a href=\"http://mongoosejs.com/docs/api.html#findbyidandremove_findByIdAndRemove\">findByIdAndRemove</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByIdAndRemove</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">204</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'malformatted id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Vastauksena on statauskoodi <em>204 no content</em> molemmissa \"onnistuneissa\" tapauksissa, eli jos olio poistettiin tai olioa ei ollut mutta <em>id</em> oli periaatteessa oikea. Takaisinkutsun parametrin <em>result</em> perusteella olisi mahdollisuus haarautua ja palauttaa tilanteissa eri statuskoodi jos sille on tarvetta.</p>\n<p>Muistiinpanon tärkeyden muuttamisen mahdollistava olemassaolevan muistiinpanon päivitys onnistuu helposti metodilla <a href=\"http://mongoosejs.com/docs/api.html#findoneandupdate_findOneAndUpdate\">findOneAndUpdate</a>. Tässä ja myöhemmin sivulla on <em>findOneAndUpdate</em>, mutta koodissa alla <a href=\"http://mongoosejs.com/docs/api.html#findbyidandupdate_findByIdAndUpdate\">findByIdAndUpdate</a>, joka vastaa <code class=\"language-text\">findOneAndUpdate({ _id: id }, ...)</code> kutsua.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/notes/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    content<span class=\"token punctuation\">:</span> body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> body<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  Note<span class=\"token punctuation\">.</span><span class=\"token function\">findByIdAndUpdate</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> note<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>updatedNote <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatNote</span><span class=\"token punctuation\">(</span>updatedNote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'malformatted id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Operaatio mahdollistaa myös muistiinpanon sisällön editoinnin. Päivämäärän muuttaminen ei ole mahdollista.</p>\n<p>Huomaa, että metodin <em>findOneAndUpdate</em> parametrina tulee antaa normaali Javascript-olio, eikä uuden olion luomisessa käytettävä <em>Note</em>-konstruktorifunktiolla luotu olio.</p>\n<p>Pieni, mutta tärkeä detalji liittyen operaatioon <em>findOneAndUpdate</em>. Oletusarvoisesti tapahtumankäsittelijä saa parametrikseen <em>updatedNote</em> päivitetyn olion <a href=\"http://mongoosejs.com/docs/api.html#findoneandupdate_findOneAndUpdate\">ennen muutosta</a> olleen tilan. Lisäsimme operaatioon parametrin <code>{ new: true }</code> jotta saamme muuttuneen olion palautetuksi kutsujalle.</p>\n<p>Backend vaikuttaa toimivan postmanista ja VS Code REST clientistä tehtyjen kokeilujen perusteella ja myös frontend toimii moitteettomasti tietokantaa käyttävän backendin kanssa.</p>\n</div>\n<div class=\"tasks\">\n<h3>Tehtäviä</h3>\n<p>Tee nyt tehtävät <a href=\"/teht%C3%A4v%C3%A4t#lis%C3%A4%C3%A4-operaatioita\">3.16-3.18</a></p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/part-3-6502baf3ac1171cebf38f6bc8b3a36dc.svg"},"part":3,"letter":"c"}}},"pageContext":{"part":3,"letter":"c"}}