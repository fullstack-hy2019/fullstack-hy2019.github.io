{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<h2>Sovelluksen end to end -testaus</h2>\n<p>Palataan vielä hetkeksi testauksen pariin. Aiemmissa osissa teimme sovelluksille yksikkötestejä sekä integraatiotestejä. Katsotaan nyt erästä tapaa tehdä <a href=\"https://en.wikipedia.org/wiki/System_testing\">järjestelmää kokonaisuutena</a> tutkivia <em>End to End (E2E) -testejä</em>.</p>\n<p>Web-sovellusten E2E-testaus tapahtuu simuloidun selaimen avulla esimerkiksi <a href=\"http://www.seleniumhq.org/\">Selenium</a>-kirjastoa käyttäen. Toinen vaihtoehto on käyttää ns. <a href=\"https://en.wikipedia.org/wiki/Headless_browser\">headless browseria</a> eli selainta, jolla ei ole ollenkaan graafista käyttöliittymää.</p>\n<p>Chrome-selain on jo hetken sisältänyt <a href=\"https://developers.google.com/web/updates/2017/04/headless-chrome\">headless</a>-moodin. Käytetään nyt headless chromea sille Node API:n tarjoavan <a href=\"https://github.com/GoogleChrome/puppeteer\">Puppeteer</a>-kirjaston avulla.</p>\n<p>Tehdään muutama testi osan 3 muistiinpanosovelluksen <a href=\"/osa3#sovellus-internettiin\">\"Full stack\"-versiolle</a>, joka sisältää sekä backendin että frontin samassa projektissa.</p>\n<p>Asennetan puppeteer komennolla</p>\n<pre><code class=\"language-bash\">npm install puppeteer --save-dev\n</code></pre>\n<p>Ennen testejä, tehdään kokeiluja varten tiedosto <em>puppeteer.js</em> ja sille seuraava sisältö</p>\n<pre><code class=\"language-js\">const puppeteer = require('puppeteer');\n\nconst main = async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.goto('http://localhost:3000');\n  await page.screenshot({ path: 'kuva.png' });\n\n  await browser.close();\n};\n\nmain();\n</code></pre>\n<p>Kun koodi suoritetaan komennolla <em>node puppeteer.js</em> menee <em>headless chrome</em> osoitteeseen <a href=\"http://localhost:3000\">http://localhost:3000</a> ja tallettaa sivulta ottamansa screenshotin tiedostoon <em>kuva.png</em>:</p>\n<picture><img src=\"/static/7347cd9c9c28cc9fcb0a6d2cf93a7891/14be6/19.png\" srcset=\"/static/7347cd9c9c28cc9fcb0a6d2cf93a7891/4cce7/19.png 200w,\n/static/7347cd9c9c28cc9fcb0a6d2cf93a7891/bae5f/19.png 400w,\n/static/7347cd9c9c28cc9fcb0a6d2cf93a7891/14be6/19.png 800w,\n/static/7347cd9c9c28cc9fcb0a6d2cf93a7891/1b35a/19.png 1200w,\n/static/7347cd9c9c28cc9fcb0a6d2cf93a7891/e8390/19.png 1492w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Muutetaan koodia vielä siten, että se kirjottaa sivulla olevaan <em>input</em>-elementtiin</p>\n<pre><code class=\"language-js\">const main = async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.goto('http://localhost:3000');\n  await page.type('input', 'Headless Chrome');\n  await page.screenshot({ path: 'kuva.png' });\n  await browser.close();\n};\n</code></pre>\n<p>Screenshot todistaa että näin on todellakin tapahtunut:</p>\n<picture><img src=\"/static/71a3a9163142d907a04c9b56cb36e6a8/14be6/20.png\" srcset=\"/static/71a3a9163142d907a04c9b56cb36e6a8/4cce7/20.png 200w,\n/static/71a3a9163142d907a04c9b56cb36e6a8/bae5f/20.png 400w,\n/static/71a3a9163142d907a04c9b56cb36e6a8/14be6/20.png 800w,\n/static/71a3a9163142d907a04c9b56cb36e6a8/1b35a/20.png 1200w,\n/static/71a3a9163142d907a04c9b56cb36e6a8/97a7b/20.png 1502w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Debugatessa voi olla joskus avuksi myös käynnistää selain normaalimoodissa, ja hidastaa testien suoritusta:</p>\n<pre><code class=\"language-js\">const main = async () => {\n  const browser = await puppeteer.launch({\n    headless: false,\n    slowMo: 250, // jokainen operaatio kestää nyt 0.25 sekuntia\n  });\n  // ...\n};\n</code></pre>\n<p>Tehdään sitten muutama testi. Toimiakseen hyvin Jestin kanssa vaaditaan hieman konfiguraatiota, joka onnistuu Jestin dokumentaation <a href=\"https://facebook.github.io/jest/docs/en/puppeteer.html#content\">ohjetta</a> noudattaen.</p>\n<p>Tehdään ensimmäinen testi</p>\n<pre><code class=\"language-js\">describe('note app', () => {\n  it('renders main page', async () => {\n    const page = await global.__BROWSER__.newPage();\n    await page.goto('http://localhost:3000');\n    const textContent = await page.$eval('body', el => el.textContent);\n\n    expect(textContent.includes('Muistiinpanot')).toBe(true);\n  });\n});\n</code></pre>\n<p>Konfiguraatioiden ansiosta viite selaimeen on muuttujassa <code>global.<strong>BROWSER</strong></code></p>\n<p>Selaimelta pyydetään aluksi <a href=\"https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#class-page\">page</a>-olio, ja sen metodilla <a href=\"https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pageevalselector-pagefunction-args-1\">$eval</a> haetaan sivun elementissä <em>body</em> oleva tekstuaalinen sisältö.</p>\n<p>Tehdään toinen testi, refaktoroidaan samalla testin yhteinen koodi <a href=\"https://facebook.github.io/jest/docs/en/setup-teardown.html\">beforeEach</a>-metodiin:</p>\n<pre><code class=\"language-js\">describe('note app', () => {\n  let page;\n  beforeEach(async () => {\n    page = await global.__BROWSER__.newPage();\n    await page.goto('http://localhost:3000');\n  });\n\n  it('renders main page', async () => {\n    const textContent = await page.$eval('body', el => el.textContent);\n    expect(textContent.includes('Muistiinpanot')).toBe(true);\n  });\n\n  it('renders a note', async () => {\n    const textContent = await page.$eval('body', el => el.textContent);\n    expect(textContent.includes('HTML on helppoa')).toBe(true);\n  });\n});\n</code></pre>\n<p>Testi ei yllättäen mene läpi. Jos testissä tulostetaan konsoliin olion page metodilla <a href=\"https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pagecontent\">content</a> palauttama sivun koko sisältö, huomataan että sivulla ei todellakaan ole yhtään muistiinpanoa:</p>\n<pre><code class=\"language-html\">&#x3C;body>\n  &#x3C;noscript>\n    You need to enable JavaScript to run this app.\n  &#x3C;/noscript>\n  &#x3C;div id=\"root\">&#x3C;div>&#x3C;h1>Muistiinpanot&#x3C;/h1>&#x3C;div>&#x3C;button>näytä vain tärkeät&#x3C;/button>&#x3C;/div>&#x3C;div class=\"notes\">&#x3C;/div>&#x3C;form>&#x3C;input value=\"\">&#x3C;button>tallenna&#x3C;/button>&#x3C;/form>&#x3C;/div>&#x3C;/div>\n  &#x3C;script type=\"text/javascript\" src=\"/static/js/main.js\">&#x3C;/script>\n&#x3C;/body>&#x3C;/html>\n</code></pre>\n<p>Syynä tälle on se, että puppeteer on ollut liian nopea, ja sivu ei ole <em>ehtinyt</em> renderöityä.</p>\n<p>Koska muistiinpanot sisältävällä <em>div</em>-elementillä on CSS-luokka <em>wrapper</em>, testi saadaan menemään läpi <em>odottamalla</em> koko kyseisten elementtien renderöitymistä metodin <a href=\"https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pagewaitforselectorselector-options\">waitForSelector</a> avulla:</p>\n<pre><code class=\"language-js\">it('renders a note', async () => {\n  await page.waitForSelector('.wrapper');\n  const textContent = await page.$eval('body', el => el.textContent);\n  expect(textContent.includes('HTML on helppoa')).toBe(true);\n});\n</code></pre>\n<p>Muutetaan testi hieman parempaan muotoon</p>\n<pre><code class=\"language-js\">it('renders a note', async () => {\n  await page.waitForSelector('.wrapper');\n\n  const notes = await page.evaluate(() => {\n    const elements = [...document.querySelectorAll('.wrapper')];\n    return elements.map(e => e.textContent);\n  });\n\n  expect(notes.length > 0).toBe(true);\n  expect(notes.join().includes('HTML on helppoa')).toBe(true);\n});\n</code></pre>\n<p>Jestin <a href=\"https://github.com/GoogleChrome/puppeteer/issues/303\">issueista</a> löydetyn neuvon avulla testi hakee sivun kaikkien muistiinpanojen sisällöt ja tekee ekspektaatiot niiden avulla.</p>\n<p>Lopuksi tehdään testi, joka luo uuden muistiinpanon</p>\n<pre><code class=\"language-js\">it('allows new notes to be added', async () => {\n  const id = Math.random() * 10000;\n  const note = `jestin lisäämä muistiinpano ${id}`;\n  await page.type('input', note);\n  await page.click('form button');\n\n  await page.waitForSelector('.notification'); // ilman tätä testi ei mene läpi\n\n  const notes = await page.evaluate(() => {\n    const elements = [...document.querySelectorAll('.wrapper')];\n    return elements.map(e => e.textContent);\n  });\n  expect(notes.join().includes(note)).toBe(true);\n});\n</code></pre>\n<p>Lomakkeen täyttäminen on helppoa. Koska sivulla on useita painikkeita, on käytetty CSS-selektoria <em>form button</em> joka hakee sivulta lomakkeen sisällä olevan napin.</p>\n<p>Napin painalluksen jälkeen syntyy jälleen potentiaalinen ajoitusongelma jos uuden muistiinpanon sivulle renderöitymistä testataan liian nopeasti. Ongelma on kierretty sillä, että sovellusta on muutettu siten, että se näyttää ruudulla CSS-luokalla <em>notification</em> merkityssä <em>div</em>-elementissä uuden muistiinpanon lisäämisestä kertovan ilmoituksen.</p>\n<p>Testausasetelmamme kaipaisi vielä paljon hiomista. Testejä vartan olisi mm. oltava oma tietokanta, jonka tilan testien pitäisi pystyä nollaamaan hallitusti. Nyt testit luottavat siihen että sovellus on käynnissä portissa 3001. Olisi parempi jos testit itse käynnistäisivät ja sammuttaisivat palvelimen.</p>\n<p>Lisää aiheesta <a href=\"https://github.com/GoogleChrome/puppeteer\">Puppeteerin Github-sivujen</a> lisäksi esimerkiksi seuraavassa <a href=\"https://www.valentinog.com/blog/ui-testing-jest-puppetteer/\">https://www.valentinog.com/blog/ui-testing-jest-puppetteer/</a></p>\n</div>","frontmatter":{"title":"osa 7","subTitle":"Testaus","path":"/osa7/testaus","mainImage":{"publicURL":"/static/osa5-8edc6044aad809a3143dc36c5e7f3b4c.png"},"partColor":"light-blue","part":7,"letter":"c"}}},"pageContext":{}}