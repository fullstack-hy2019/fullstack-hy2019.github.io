{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<h2>Käyttäjien hallinta ja monimutkaisempi tietokantaskeema</h2>\n<p>Haluamme toteuttaa sovellukseemme käyttäjien hallinnan. Käyttäjät tulee tallettaa tietokantaan ja jokaisesta muistiinpanosta tulee tietää sen luonut käyttäjä. Muistiinpanojen poisto ja editointi tulee olla sallittua ainoastaan muistiinpanot tehneelle käyttäjälle.</p>\n<p>Aloitetaan lisäämällä tietokantaan tieto käyttäjistä. Käyttäjän (User) ja muistiinpanojen (Note) välillä on yhden suhde moneen -yhteys:</p>\n<img src=\"https://yuml.me/a187045b.png\">\n<p>Relaatiotietokantoja käytettäessä ratkaisua ei tarvitsisi juuri miettiä. Molemmille olisi oma taulunsa ja muistiinpanoihin liitettäisiin sen luonutta käyttäjää vastaava id vierasavaimeksi (foreign key).</p>\n<p>Dokumenttitietokantoja käytettäessä tilanne on kuitenkin toinen, erilaisia tapoja mallintaa tilanne on useita.</p>\n<p>Olemassaoleva ratkaisumme tallentaa jokaisen luodun muistiinpanon tietokantaan <em>notes</em>-kokoelmaan eli <em>collectioniin</em>. Jos emme halua muuttaa tätä, lienee luontevinta tallettaa käyttäjät omaan kokoelmaansa, esim. nimeltään <em>users</em>.</p>\n<p>Mongossa voidaan kaikkien dokumenttitietokantojen tapaan käyttää olioiden id:itä viittaamaan muissa kokoelmissa talletettaviin dokumentteihin, vastaavasti kuten viiteavaimia käytetään relaatiotietokannoissa.</p>\n<p>Dokumenttitietokannat kuten Mongo eivät kuitenkaan tue relaatiotietokantojen <em>liitoskyselyitä</em> vastaavaa toiminnallisuutta, joka mahdollistaisi useaan kokoelmaan kohdistuvan tietokantahaun (tämä ei tarkalleen ottaen enää välttämättä pidä paikkaansa, sillä versiosta 3.2. alkaen Mongo on tukenut useampaan kokoelmaan kohdistuvia <a href=\"https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/\">lookup-aggregaattikyselyitä</a>, emme kuitenkaan käsittele niitä kurssilla).</p>\n<p>Jos tarvitsemme liitoskyselyitä vastaavaa toiminnallisuutta, tulee se toteuttaa sovelluksen tasolla, eli käytännössä tekemällä tietokantaan useita kyselyitä. Tietyissä tilanteissa mongoose-kirjasto osaa hoitaa liitosten tekemisen, jolloin kysely näyttää mongoosen käyttäjälle toimivan liitoskyselyn tapaan. Mongoose tekee kuitenkin näissä tapauksissa taustalla useamman kyselyn tietokantaan.</p>\n<h3>Viitteet kokoelmien välillä</h3>\n<p>Jos käyttäisimme relaatiotietokantaa, muistiinpano sisältäisi <em>viiteavaimen</em> sen tehneeseen käyttäjään. Dokumenttitietokannassa voidaan toimia samoin.</p>\n<p>Oletetaan että kokoelmassa <em>users</em> on kaksi käyttäjää:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    username<span class=\"token punctuation\">:</span> <span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">,</span>\n    _id<span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    username<span class=\"token punctuation\">:</span> <span class=\"token string\">'hellas'</span><span class=\"token punctuation\">,</span>\n    _id<span class=\"token punctuation\">:</span> <span class=\"token number\">141414</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Kokoelmassa <em>notes</em> on kolme muistiinpanoa, kaikkien kenttä <em>user</em> viittaa <em>users</em>-kentässä olevaan käyttäjään:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    content<span class=\"token punctuation\">:</span> <span class=\"token string\">'HTML on helppoa'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    _id<span class=\"token punctuation\">:</span> <span class=\"token number\">221212</span><span class=\"token punctuation\">,</span>\n    user<span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    content<span class=\"token punctuation\">:</span> <span class=\"token string\">'HTTP-protokollan tärkeimmät metodit ovat GET ja POST'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    _id<span class=\"token punctuation\">:</span> <span class=\"token number\">221255</span><span class=\"token punctuation\">,</span>\n    user<span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    content<span class=\"token punctuation\">:</span> <span class=\"token string\">'Java on kieli, jota käytetään siihen asti kunnes aurinko sammuu'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    _id<span class=\"token punctuation\">:</span> <span class=\"token number\">221244</span><span class=\"token punctuation\">,</span>\n    user<span class=\"token punctuation\">:</span> <span class=\"token number\">141414</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Mikään ei kuitenkaan määrää dokumenttitietokannoissa, että viitteet on talletettava muistiinpanoihin, ne voivat olla <em>myös</em> (tai ainoastaan) käyttäjien yhteydessä:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    username<span class=\"token punctuation\">:</span> <span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">,</span>\n    _id<span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span><span class=\"token punctuation\">,</span>\n    notes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">221212</span><span class=\"token punctuation\">,</span> <span class=\"token number\">221255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    username<span class=\"token punctuation\">:</span> <span class=\"token string\">'hellas'</span><span class=\"token punctuation\">,</span>\n    _id<span class=\"token punctuation\">:</span> <span class=\"token number\">141414</span><span class=\"token punctuation\">,</span>\n    notes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">141414</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Koska käyttäjiin liittyy potentiaalisesti useita muistiinpanoja, niiden id:t talletetaan käyttäjän kentässä <em>notes</em> olevaan taulukkoon.</p>\n<p>Dokumenttitietokannat tarjoavat myös radikaalisti erilaisen tavan datan organisointiin; joissain tilanteissa saattaisi olla mielekästä tallettaa muistiinpanot kokonaisuudessa käyttäjien sisälle:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    username<span class=\"token punctuation\">:</span> <span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">,</span>\n    _id<span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span><span class=\"token punctuation\">,</span>\n    notes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        content<span class=\"token punctuation\">:</span> <span class=\"token string\">'HTML on helppoa'</span><span class=\"token punctuation\">,</span>\n        important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        content<span class=\"token punctuation\">:</span> <span class=\"token string\">'HTTP-protokollan tärkeimmät metodit ovat GET ja POST'</span><span class=\"token punctuation\">,</span>\n        important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    username<span class=\"token punctuation\">:</span> <span class=\"token string\">'hellas'</span><span class=\"token punctuation\">,</span>\n    _id<span class=\"token punctuation\">:</span> <span class=\"token number\">141414</span><span class=\"token punctuation\">,</span>\n    notes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        content<span class=\"token punctuation\">:</span>\n          <span class=\"token string\">'Java on kieli, jota käytetään siihen asti kunnes aurinko sammuu'</span><span class=\"token punctuation\">,</span>\n        important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Muistiinpanot olisivat tässä skeemaratkaisussa siis yhteen käyttäjään alisteisia kenttiä, niillä ei olisi edes omaa identiteettiä, eli id:tä tietokannan tasolla.</p>\n<p>Dokumenttitietokantojen yhteydessä skeeman rakenne ei siis ole ollenkaan samalla tavalla ilmeinen kuin relaatiotietokannoissa, ja valittava ratkaisu kannattaa määritellä siten että se tukee parhaalla tavalla sovelluksen käyttötapauksia. Tämä ei luonnollisestikaan ole helppoa, sillä järjestelmän kaikki käyttötapaukset eivät yleensä ole selvillä kun projektin alkuvaiheissa mietitään datan organisointitapaa.</p>\n<p>Hieman paradoksaalisesti tietokannan tasolla skeematon Mongo edellyttääkin projektin alkuvaiheissa jopa radikaalimpien datan organisoimiseen liittyvien ratkaisujen tekemistä kuin tietokannan tasolla skeemalliset relaatiotietokannat, jotka tarjoavat keskimäärin kaikkiin tilanteisiin melko hyvin sopivan tavan organisoida dataa.</p>\n<h3>Käyttäjien mongoose-skeema</h3>\n<p>Päätetään tallettaa käyttäjän yhteyteen myös tieto käyttäjän luomista muistiinpanoista, eli käytännössä muistiinpanojen id:t. Määritellään käyttäjää edustava model tiedostoon <em>models/user:</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  username<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n  name<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n  passwordHash<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n  notes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">:</span> <span class=\"token string\">'Note'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> User<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Muistiinpanojen id:t on talletettu käyttäjien sisälle taulukkona mongo-id:itä. Määrittely on seuraava</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">:</span> <span class=\"token string\">'Note'</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>kentän tyyppi on <em>ObjectId</em> joka viittaa <em>Note</em>-tyyppisiin dokumentteihin. Mongo ei itsessään tiedä mitään siitä, että kyse on kentästä joka viittaa nimenomaan muistiinpanoihin, kyseessä onkin puhtaasti mongoosen syntaksi.</p>\n<p>Laajennetaan tiedostossa <em>model/note.js</em> olevaa muistiinpanon skeemaa siten, että myös muistiinpanossa on tieto sen luoneesta käyttäjästä</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  content<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n  date<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">,</span>\n  important<span class=\"token punctuation\">:</span> Boolean<span class=\"token punctuation\">,</span>\n  user<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">:</span> <span class=\"token string\">'User'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Relaatiotietokantojen käytänteistä poiketen <em>viitteet on nyt talletettu molempiin dokumentteihin</em>, muistiinpano viittaa sen luoneeseen käyttäjään ja käyttäjä sisältää taulukollisen viitteitä sen luomiin muistiinpanoihin.</p>\n<h3>Käyttäjien luominen</h3>\n<p>Toteutetaan seuraavaksi route käyttäjien luomista varten. Käyttäjällä on siis <em>username</em> jonka täytyy olla järjestelmässä yksikäsitteinen, nimi eli <em>name</em> sekä <em>passwordHash</em>, eli salasanasta <a href=\"https://en.wikipedia.org/wiki/Cryptographic_hash_function\">yksisuuntaisen funktion</a> perusteella laskettu tunniste. Salasanojahan ei ole koskaan viisasta tallentaa tietokantaan selväsanaisena!</p>\n<p>Asennetaan salasanojen hashaamiseen käyttämämme <a href=\"https://github.com/kelektiv/node.bcrypt.js\">bcrypt</a>-kirjasto:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> bcrypt --save</code></pre></div>\n<p>Käyttäjien luominen tapahtuu osassa 3 läpikäytyjä <a href=\"/osa3#rest\">RESTful</a>-periaatteita seuraten tekemällä HTTP POST -pyyntö polkuun <em>users</em>.</p>\n<p>Määritellään käyttäjienhallintaa varten oma <em>router</em> tiedostoon <em>controllers/users.js</em>, ja liitetään se <em>index.js</em>-tiedostossa huolehtimaan polulle <em>/api/users/</em> tulevista pyynnöistä:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> usersRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./controllers/users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users'</span><span class=\"token punctuation\">,</span> usersRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Routerin alustava sisältö on seuraava:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> bcrypt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bcrypt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> usersRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nusersRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> saltRounds <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> passwordHash <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> saltRounds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      username<span class=\"token punctuation\">:</span> body<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">:</span> body<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n      passwordHash<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> savedUser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>savedUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">exception</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'something went wrong...'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> usersRouter<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tietokantaan siis <em>ei</em> talleteta pyynnön mukana tulevaa salasanaa, vaan funktion <em>bcrypt.hash</em> avulla laskettu <em>hash</em>.</p>\n<p>Materiaalin tilamäärä ei valitettavasti riitä käsittelemään sen tarkemmin salasanojen <a href=\"https://codahale.com/how-to-safely-store-a-password/\">tallennuksen perusteita</a>, esim. mitä maaginen luku 10 muuttujan <a href=\"https://github.com/kelektiv/node.bcrypt.js/#a-note-on-rounds\">saltRounds</a> arvona tarkoittaa. Lue linkkien takaa lisää.</p>\n<p>Koodissa ei tällä hetkellä ole mitään virheidenkäsittelyä eikä validointeja, eli esim. käyttäjätunnuksen ja salasanan halutun muodon tarkastuksia.</p>\n<p>Uutta ominaisuutta voidaan ja kannattaakin joskus testailla käsin esim. postmanilla. Käsin tapahtuva testailu muuttuu kuitenkin nopeasti työlääksi, etenkin kun tulemme pian vaatimaan, että samaa käyttäjätunnusta ei saa tallettaa kantaan kahteen kertaan.</p>\n<p>Pienellä vaivalla voimme tehdä automaattisesti suoritettavat testit, jotka helpottavat sovelluksen kehittämistä merkittävästi.</p>\n<p>Alustava testi näyttää seuraavalta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  format<span class=\"token punctuation\">,</span>\n  initialNotes<span class=\"token punctuation\">,</span>\n  nonExistingId<span class=\"token punctuation\">,</span>\n  notesInDb<span class=\"token punctuation\">,</span>\n  usersInDb<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./test_helper'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//...</span>\n\ndescribe<span class=\"token punctuation\">.</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span><span class=\"token string\">'when there is initially one user at db'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token string\">'sekret'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POST /api/users succeeds with a fresh username'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> usersBeforeOperation <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">usersInDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> newUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      username<span class=\"token punctuation\">:</span> <span class=\"token string\">'mluukkai'</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Matti Luukkainen'</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token punctuation\">:</span> <span class=\"token string\">'salainen'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">await</span> api\n      <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>newUser<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token regex\">/application\\/json/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> usersAfterOperation <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">usersInDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersAfterOperation<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>usersBeforeOperation<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> usernames <span class=\"token operator\">=</span> usersAfterOperation<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>u <span class=\"token operator\">=></span> u<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usernames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>newUser<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Koska testi on määritelty <a href=\"https://facebook.github.io/jest/docs/en/api.html#describeonlyname-fn\">describe.only</a>-lohkoksi, suorittaa <em>Jest</em> ainoastaan lohkon sisälle määritellyt testit. Tämä on alkuvaiheessa hyödyllistä, sillä ennen kuin uusia käyttäjiä lisäävä toiminnallisuus on valmis, kannattaa suorittaa testeistä ainoastaan kyseistä toiminnallisuutta tutkivat testitapaukset.</p>\n<p>Testit käyttävät myös tiedostossa <em>tests/test</em>helper.js_ määriteltyä apufunktiota <em>usersInDb()</em> tarkastamaan lisäysoperaation jälkeisen tietokannan tilan:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">const</span> usersInDb <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> users<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  initialNotes<span class=\"token punctuation\">,</span>\n  format<span class=\"token punctuation\">,</span>\n  nonExistingId<span class=\"token punctuation\">,</span>\n  notesInDb<span class=\"token punctuation\">,</span>\n  usersInDb<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Lohkon <em>beforeAll</em> lisää kantaan käyttäjän, jonka username on <em>root</em>. Voimmekin tehdä uuden testin, jolla varmistetaan, että samalla käyttäjätunnuksella ei voi luoda uutta käyttäjää:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POST /api/users fails with proper statuscode and message if username already taken'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> usersBeforeOperation <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">usersInDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> newUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token punctuation\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Superuser'</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token punctuation\">:</span> <span class=\"token string\">'salainen'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> api\n    <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>newUser<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token regex\">/application\\/json/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'username must be unique'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> usersAfterOperation <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">usersInDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>usersAfterOperation<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>usersBeforeOperation<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Testi ei tietenkään mene läpi tässä vaiheessa. Toimimme nyt oleellisesti <a href=\"https://en.wikipedia.org/wiki/Test-driven_development\">TDD:n eli test driven developmentin</a> hengessä, uuden ominaisuuden testi on kirjoitettu ennen ominaisuuden ohjelmointia.</p>\n<p>Koodi laajenee seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">usersRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body\n\n    <span class=\"token keyword\">const</span> existingUser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">:</span> body<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>existingUser<span class=\"token punctuation\">.</span>length<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'username must be unique'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//...</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Eli haetaan tietokannasta ne user-dokumentit, joiden <em>username</em>-kentän arvo on sama kuin pyynnössä oleva. Jos sellainen user-dokumentti löytyy, vastataan pyyntöön statuskoodilla <em>400 bad request</em> ja kerrotaan syy ongelmaan.</p>\n<p>Voisimme toteuttaa käyttäjien luomisen yhteyteen myös muita tarkistuksia, esim. onko käyttäjätunnus tarpeeksi pitkä, koostuuko se sallituista merkeistä ja onko salasana tarpeeksi hyvä. Jätämme ne kuitenkin harjoitustehtäväksi.</p>\n<p>Ennen kuin menemme eteenpäin, lisätään alustava versio joka palauttaa kaikki käyttäjät palauttavasta käsittelijäfunktiosta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">formatUser</span> <span class=\"token operator\">=</span> user <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n    username<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    notes<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nusersRouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>formatUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Lista näyttää seuraavalta</p>\n<picture><img src=\"/static/ed68c133f923217cb622b26f3396e4f8/14be6/5b.png\" srcset=\"/static/ed68c133f923217cb622b26f3396e4f8/4cce7/5b.png 200w,\n/static/ed68c133f923217cb622b26f3396e4f8/bae5f/5b.png 400w,\n/static/ed68c133f923217cb622b26f3396e4f8/14be6/5b.png 800w,\n/static/ed68c133f923217cb622b26f3396e4f8/1b35a/5b.png 1200w,\n/static/ed68c133f923217cb622b26f3396e4f8/9ee03/5b.png 1600w,\n/static/ed68c133f923217cb622b26f3396e4f8/3c21b/5b.png 1614w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Formatointifunktioiden siirto modelien märittelyn yhteyteen</h3>\n<p>Kuten muistinpanojenkin tapauksessa, olemme myös nyt määritellet apufunktion <em>formatUser</em>, joka muodostaa tietokannan palauttamista <em>user</em>-olioista selaimelle lähetettävän muodon, joista on mm. poistettu kenttä <em>passwordHash</em>.</p>\n<p>Formatointifunktio on nyt sijoitettu routejen määrittelyn yhteyteen. Paikka ei välttämättä ole optimaalinen ja päätetäänkin viedä formatointi <em>User</em>-skeeman vastuulle, sen <a href=\"http://mongoosejs.com/docs/guide.html#statics\">staattiseksi metodiksi</a>.</p>\n<p>Tehdään seuraava muutos tiedostoon <em>models/user.js</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> userSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  username<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n  name<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n  passwordHash<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n  notes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">:</span> <span class=\"token string\">'Note'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nuserSchema<span class=\"token punctuation\">.</span>statics<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">format</span> <span class=\"token operator\">=</span> user <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n    username<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    notes<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User'</span><span class=\"token punctuation\">,</span> userSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> User<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Näin määriteltyä metodia kutsutaan <em>User.format(user)</em>. Voimme muuttaa tiedostossa <em>controllers/users.js</em> olevat routet seuraavaan muotoon:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">usersRouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nusersRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">const</span> savedUser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>savedUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">exception</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Formatointifunktion määritteleminen skeeman määrittelyn yhteydessä on sikäli luontevaa, että jos skeemaan tulee muutoksia, on formatointifunktio samassa tiedostossa ja todennäköisyys sen päivittämisen unohtamiselle pienenee.</p>\n<p>Tehdään sama muutos muistiinpanojen formatointiin, eli muutetaan <em>models/note.js</em> muotoon</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> noteSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  content<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n  date<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">,</span>\n  important<span class=\"token punctuation\">:</span> Boolean<span class=\"token punctuation\">,</span>\n  user<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">:</span> <span class=\"token string\">'User'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nnoteSchema<span class=\"token punctuation\">.</span>statics<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">format</span> <span class=\"token operator\">=</span> note <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> note<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n    content<span class=\"token punctuation\">:</span> note<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n    date<span class=\"token punctuation\">:</span> note<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> note<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note'</span><span class=\"token punctuation\">,</span> noteSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> Note<span class=\"token punctuation\">;</span></code></pre></div>\n<p>ja muutetaan tiedostosta <em>controllers/notes.js</em> metotodikutsut <em>formatNote(note)</em> muotoon <em>Note.format(note)</em> ja kutsu <em>notes.map(formatNote)</em> muotoon <em>notes.map(Note.format)</em></p>\n<p>Testien suoritus varmistaa, että sovelluksemme ei hajonnut refaktoroinnin myötä.</p>\n<p>Pääsemme nyt eroon myös testien yhteyteen määritellystä muistiinpanoja formatoivasta apumetodista <em>format</em>, sillä myös testeissä kannattaa hyödyntää funktiota <em>Note.format</em>.</p>\n<p>Sovelluksen tämänhetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/FullStack-HY/part3-notes-backend/tree/part4-5\">githubissa</a>, tagissa <em>part4-5</em>.</p>\n<h3>Muistiinpanon luominen</h3>\n<p>Muistiinpanot luovaa koodia on nyt mukautettava siten, että uusi muistiinpano tulee liitetyksi sen luoneeseen käyttäjään.</p>\n<p>Laajennetaan ensin olemassaolevaa toteutusta siten, että tieto muistiinpanon luovan käyttäjän id:stä lähetetään pyynnön rungossa kentän <em>userId</em> arvona:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//...</span>\n\nnotesRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>content <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'content missing'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> note <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Note</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      content<span class=\"token punctuation\">:</span> body<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n      important<span class=\"token punctuation\">:</span> body<span class=\"token punctuation\">.</span>important <span class=\"token operator\">===</span> undefined <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">:</span> body<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">,</span>\n      date<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      user<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> savedNote <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> note<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    user<span class=\"token punctuation\">.</span>notes <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>Note<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">exception</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'something went wrong...'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Huomionarvoista on nyt se, että myös <em>user</em>-olio muuttuu. Sen kenttään <em>notes</em> talletetaan luodun muistiinpanon <em>id</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nuser<span class=\"token punctuation\">.</span>notes <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>savedNote<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Kokeillaan nyt lisätä uusi muistiinpano</p>\n<picture><img src=\"/static/3167bcc9730655600c3a99c97e417b4e/14be6/6.png\" srcset=\"/static/3167bcc9730655600c3a99c97e417b4e/4cce7/6.png 200w,\n/static/3167bcc9730655600c3a99c97e417b4e/bae5f/6.png 400w,\n/static/3167bcc9730655600c3a99c97e417b4e/14be6/6.png 800w,\n/static/3167bcc9730655600c3a99c97e417b4e/1b35a/6.png 1200w,\n/static/3167bcc9730655600c3a99c97e417b4e/e5b6a/6.png 1556w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Operaatio vaikuttaa toimivan. Lisätään vielä yksi muistiinpano ja mennään kaikkien käyttäjien sivulle:</p>\n<picture><img src=\"/static/eb7ef41aa542f7eadf7124fd260bc98b/14be6/7.png\" srcset=\"/static/eb7ef41aa542f7eadf7124fd260bc98b/4cce7/7.png 200w,\n/static/eb7ef41aa542f7eadf7124fd260bc98b/bae5f/7.png 400w,\n/static/eb7ef41aa542f7eadf7124fd260bc98b/14be6/7.png 800w,\n/static/eb7ef41aa542f7eadf7124fd260bc98b/1b35a/7.png 1200w,\n/static/eb7ef41aa542f7eadf7124fd260bc98b/05740/7.png 1508w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Huomaamme siis, että käyttäjällä on kaksi muistiinpanoa.</p>\n<p>Jos laajennamme muistiinpanojen JSON:in muotoileman koodin näyttämään muistiinpanoon liittyvän käyttäjän</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">noteSchema<span class=\"token punctuation\">.</span>statics<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">format</span> <span class=\"token operator\">=</span> note <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> note<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n    content<span class=\"token punctuation\">:</span> note<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span>\n    date<span class=\"token punctuation\">:</span> note<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> note<span class=\"token punctuation\">.</span>important<span class=\"token punctuation\">,</span>\n    user<span class=\"token punctuation\">:</span> note<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>tulee muistiinpanon luoneen käyttäjän id näkyviin muistiinpanon yhteyteen.</p>\n<picture><img src=\"/static/1b66abcaceb7d4166fcc28a74ee2a666/14be6/8.png\" srcset=\"/static/1b66abcaceb7d4166fcc28a74ee2a666/4cce7/8.png 200w,\n/static/1b66abcaceb7d4166fcc28a74ee2a666/bae5f/8.png 400w,\n/static/1b66abcaceb7d4166fcc28a74ee2a666/14be6/8.png 800w,\n/static/1b66abcaceb7d4166fcc28a74ee2a666/1b35a/8.png 1200w,\n/static/1b66abcaceb7d4166fcc28a74ee2a666/77985/8.png 1552w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>populate</h3>\n<p>Haluaisimme API:n toimivan siten, että haettaessa esim. käyttäjien tiedot polulle <em>/api/users</em> tehtävällä HTTP GET -pyynnöllä tulisi käyttäjien tekemien muistiinpanojen id:iden lisäksi näyttää niiden sisältö. Relaatiotietokannoilla toiminnallisuus toteutettaisiin <em>liitoskyselyn</em> avulla.</p>\n<p>Kuten aiemmin mainittiin, eivät dokumenttitietokannat tue (kunnolla) eri kokoelmien välisiä liitoskyselyitä. Mongoose-kirjasto osaa kuitenkin tehdä liitoksen puolestamme. Mongoose toteuttaa liitoksen tekemällä useampia tietokantakyselyitä, joten siinä mielessä kyseessä on täysin erilainen tapa kuin relaatiotietokantojen liitoskyselyt, jotka ovat <em>transaktionaalisia</em>, eli liitoskyselyä tehdessä tietokannan tila ei muutu. Mongoosella tehtävä liitos taas on sellainen, että mikään ei takaa sitä, että liitettävien kokoelmien tila on konsistentti, toisin sanoen jos tehdään users- ja notes-kokoelmat liittävä kysely, kokoelmien tila saattaa muuttua kesken mongoosen liitosoperaation.</p>\n<p>Liitoksen tekeminen suoritetaan mongoosen komennolla <a href=\"http://mongoosejs.com/docs/populate.html\">populate</a>. Päivitetään ensin kaikkien käyttäjien tiedot palauttava route:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">usersRouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Funktion <a href=\"http://mongoosejs.com/docs/populate.html\">populate</a> kutsu siis ketjutetaan kyselyä vastaavan metodikutsun (tässä tapauksessa <em>find</em>) perään. Populaten parametri määrittelee, että <em>user</em>-dokumenttien <em>notes</em>-kentässä olevat <em>note</em>-olioihin viittaavat <em>id</em>:t korvataan niitä vastaavilla dokumenteilla.</p>\n<p>Lopputulos on jo melkein haluamamme kaltainen:</p>\n<picture><img src=\"/static/01c89caa00faa67e5e11f8352385f0c1/14be6/9a.png\" srcset=\"/static/01c89caa00faa67e5e11f8352385f0c1/4cce7/9a.png 200w,\n/static/01c89caa00faa67e5e11f8352385f0c1/bae5f/9a.png 400w,\n/static/01c89caa00faa67e5e11f8352385f0c1/14be6/9a.png 800w,\n/static/01c89caa00faa67e5e11f8352385f0c1/1b35a/9a.png 1200w,\n/static/01c89caa00faa67e5e11f8352385f0c1/9ee03/9a.png 1600w,\n/static/01c89caa00faa67e5e11f8352385f0c1/6b9c5/9a.png 1612w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Populaten yhteydessä on myös mahdollista rajata mitä kenttiä sisällytettävistä dokumenteista otetaan mukaan. Rajaus tapahtuu Mongon <a href=\"https://docs.mongodb.com/manual/tutorial/project-fields-from-query-results/#return-the-specified-fields-and-the-id-field-only\">syntaksilla</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">usersRouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> content<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tulos on nyt halutun kaltainen (:</p>\n<picture><img src=\"/static/421e59fbdc1d72282a0a9066967b7205/14be6/10a.png\" srcset=\"/static/421e59fbdc1d72282a0a9066967b7205/4cce7/10a.png 200w,\n/static/421e59fbdc1d72282a0a9066967b7205/bae5f/10a.png 400w,\n/static/421e59fbdc1d72282a0a9066967b7205/14be6/10a.png 800w,\n/static/421e59fbdc1d72282a0a9066967b7205/1b35a/10a.png 1200w,\n/static/421e59fbdc1d72282a0a9066967b7205/9ee03/10a.png 1600w,\n/static/421e59fbdc1d72282a0a9066967b7205/dfb2e/10a.png 1658w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Lisätään sopiva käyttäjän tietojen populointi, muistiinpanojen yhteyteen:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">notesRouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Note<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Note<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nyt käyttäjän tiedot tulevat muistiinpanon kenttään <em>user</em>.</p>\n<picture><img src=\"/static/233a1af08df72d9e07538c4e74d6a4a0/14be6/11a.png\" srcset=\"/static/233a1af08df72d9e07538c4e74d6a4a0/4cce7/11a.png 200w,\n/static/233a1af08df72d9e07538c4e74d6a4a0/bae5f/11a.png 400w,\n/static/233a1af08df72d9e07538c4e74d6a4a0/14be6/11a.png 800w,\n/static/233a1af08df72d9e07538c4e74d6a4a0/1b35a/11a.png 1200w,\n/static/233a1af08df72d9e07538c4e74d6a4a0/9ee03/11a.png 1600w,\n/static/233a1af08df72d9e07538c4e74d6a4a0/4ba44/11a.png 1660w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Korostetaan vielä, että tietokannan tasolla ei siis ole mitään määrittelyä siitä, että esim. muistiinpanojen kenttään <em>user</em> talletetut id:t viittaavat käyttäjä-kokoelman dokumentteihin.</p>\n<p>Mongoosen <em>populate</em>-funktion toiminnallisuus perustuu siihen, että olemme määritelleet viitteiden \"tyypit\" olioiden mongoose-skeemaan <em>ref</em>-kentän avulla:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Note <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Note'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  content<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n  date<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">,</span>\n  important<span class=\"token punctuation\">:</span> Boolean<span class=\"token punctuation\">,</span>\n  user<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">:</span> <span class=\"token string\">'User'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</div>","frontmatter":{"title":"osa 4","subTitle":"Mongoose","path":"/osa4/mongoose","mainImage":{"publicURL":"/static/part-4-77b1cf13e4bcb177a7283e827121caef.svg"},"partColor":"yellow","part":4,"letter":"d"}}},"pageContext":{}}