{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<h2>React-sovelluksen testaus</h2>\n<p>Reactilla tehtyjen frontendien testaamiseen on monia tapoja. Aloitetaan niihin tutustuminen nyt.</p>\n<p>Testit tehdään samaan tapaan kuin edellisessä osassa eli Facebookin <a href=\"http://jestjs.io/\">Jest</a>-kirjastolla. Jest onkin valmiiksi konfiguroitu create-react-app:illa luotuihin projekteihin.</p>\n<p>Jestin lisäksi käytetään AirBnB:n kehittämää <a href=\"https://github.com/airbnb/enzyme\">enzyme</a>-kirjastoa.</p>\n<p>Asennetaan enzyme komennolla:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev enzyme enzyme-adapter-react-16</code></pre></div>\n<p>Testataan aluksi muistiinpanon renderöivää komponenttia:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">const Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important'\n  return (\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        {note.content}\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{toggleImportance}</span><span class=\"token punctuation\">></span></span>{label}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  )\n}</code></pre></div>\n<p>Testauksen helpottamiseksi komponenttiin on lisätty sisällön määrittelevälle <em>div</em>-elementille <a href=\"https://reactjs.org/docs/dom-elements.html#classname\">CSS-luokka</a> <em>content</em>.</p>\n<h3>shallow-renderöinti</h3>\n<p>Ennen testien tekemistä, tehdään <em>enzymen</em> konfiguraatioita varten tiedosto <em>src/setupTests.js</em> ja sille seuraava sisältö:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configure <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme'</span>\n<span class=\"token keyword\">import</span> Adapter <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme-adapter-react-16'</span>\n\n<span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> adapter<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Nyt olemme valmiina testien tekemiseen.</p>\n<p>Koska <em>Note</em> on yksinkertainen komponentti, joka ei käytä yhtään monimutkaista alikomponenttia vaan renderöi suoraan HTML:ää, sopii sen testaamiseen hyvin enzymen <a href=\"http://airbnb.io/enzyme/docs/api/shallow.html\">shallow</a>-renderöijä.</p>\n<p>Tehdään testi tiedostoon <em>src/components/Note.test.js</em>, eli samaan hakemistoon, missä komponentti itsekin sijaitsee.</p>\n<p>Ensimmäinen testi varmistaa, että komponentti renderöi muistiinpanon sisällön:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">import React from 'react'\nimport { shallow } from 'enzyme'\nimport Note from './Note'\n\ndescribe.only('<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Note</span> <span class=\"token punctuation\">/></span></span>', () => {\n  it('renders content', () => {\n    const note = {\n      content: 'Komponenttitestaus tapahtuu jestillä ja enzymellä',\n      important: true\n    }\n\n    const noteComponent = shallow(<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Note</span> <span class=\"token attr-name\">note</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{note}</span> <span class=\"token punctuation\">/></span></span>)\n    const contentDiv = noteComponent.find('.content')\n\n    expect(contentDiv.text()).toContain(note.content)\n  })\n})</code></pre></div>\n<p>Edellisessä osassa määrittelimme testitapaukset metodin <a href=\"https://facebook.github.io/jest/docs/en/api.html#testname-fn-timeout\">test</a> avulla. Nyt käytössä oleva <em>it</em> viittaa samaan olioon kuin <em>test</em>, eli on sama kumpaa käytät. It on tietyissä piireissä suositumpi ja käytössä mm. Enzymen dokumentaatiossa joten käytämme it-muotoa tässä osassa.</p>\n<p>Alun konfiguroinnin jälkeen testi renderöi komponentin metodin <em>shallow</em> avulla:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">const noteComponent = shallow(<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Note</span> <span class=\"token attr-name\">note</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{note}</span> <span class=\"token punctuation\">/></span></span>)</code></pre></div>\n<p>Normaalisti React-komponentit renderöityvät <em>DOM</em>:iin. Nyt kuitenkin renderöimme komponentteja <a href=\"http://airbnb.io/enzyme/docs/api/shallow.html\">shallowWrapper</a>-tyyppisiksi, testaukseen sopiviksi olioiksi.</p>\n<p>ShallowWrapper-muotoon renderöidyillä React-komponenteilla on runsaasti metodeja, joiden avulla niiden sisältöä voidaan tutkia. Esimerkiksi <a href=\"http://airbnb.io/enzyme/docs/api/ShallowWrapper/find.html\">find</a> mahdollistaa komponentin sisällä olevien <em>elementtien</em> etsimisen <a href=\"http://airbnb.io/enzyme/docs/api/selector.html\">enzyme-selektorien</a> avulla. Eräs tapa elementtien etsimiseen on <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors\">CSS-selektorien</a> käyttö. Liitimme muistiinpanon sisällön kertovaan div-elementtiin luokan <em>content</em>, joten voimme etsiä elementin seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> contentDiv <span class=\"token operator\">=</span> noteComponent<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.content'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ekspektaatiossa varmistamme, että elementtiin on renderöitynyt oikea teksti, eli muistiinpanon sisältö:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>contentDiv<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContain</span><span class=\"token punctuation\">(</span>note<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Testien suorittaminen</h3>\n<p>Create-react-app:issa on konfiguroitu testit oletusarvoisesti suoritettavaksi ns. watch-moodissa, eli jos suoritat testit komennolla <em>npm test</em>, jää konsoli odottamaan koodissa tapahtuvia muutoksia. Muutosten jälkeen testit suoritetaan automaattisesti ja Jest alkaa taas odottamaan uusia muutoksia koodiin.</p>\n<p>Jos haluat ajaa testit \"normaalisti\", se onnistuu komennolla</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">CI<span class=\"token operator\">=</span>true <span class=\"token function\">npm</span> <span class=\"token function\">test</span></code></pre></div>\n<p>Konsoli saattaa herjata virhettä, jos sinulla ei ole asennettuna watchmania. Watchman on Facebookin kehittämä tiedoston muutoksia tarkkaileva ohjelma. Ohjelma nopeuttaa testien ajoa ja ainakin osx sierrasta ylöspäin jatkuva testien vahtiminen aiheuttaa käyttäjillä virheilmoituksia. Näistä ilmoituksista pääsee eroon asentamalla Watchmanin.</p>\n<p>Ohjeet ohjelman asentamiseen eri käyttöjärjestelmille löydät Watchmanin sivulta:\n<a href=\"https://facebook.github.io/watchman/\">https://facebook.github.io/watchman/</a></p>\n<p>Mikäli testejä suoritettaessa ei löydetä tiedostossa <em>src/setupTests.js</em> tehtyä adapterin konfigurointia, auttaa seuraavan asetuksen lisääminen tiedostoon package-lock.json:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  &quot;jest&quot;: {\n    ...\n    &quot;setupFiles&quot;: [\n      &quot;&lt;rootDir&gt;/src/setupTests.js&quot;\n    ],\n    ...\n  }</code></pre></div>\n<h3>Testien sijainti</h3>\n<p>Reactissa on (ainakin) <a href=\"https://medium.com/@JeffLombardJr/organizing-tests-in-jest-17fc431ff850\">kaksi erilaista</a> konventiota testien sijoittamiseen. Sijoitimme testit ehkä vallitsevan tavan mukaan, eli samaan hakemistoon missä testattava komponentti sijaitsee.</p>\n<p>Toinen tapa olisi sijoittaa testit \"normaaliin\" tapaan omaan erilliseen hakemistoon. Valitaanpa kumpi tahansa tapa, on varmaa että se on jonkun mielestä täysin väärä.</p>\n<p>Itse en pidä siitä, että testit ja normaali koodi ovat samassa hakemistossa. Noudatamme kuitenkin nyt tätä tapaa, sillä se on oletusarvo create-react-app:illa konfiguroiduissa sovelluksissa.</p>\n<h3>Testien debuggaaminen</h3>\n<p>Testejä tehdessä törmäämme tyypillisesti erittäin moniin ongelmiin. Näissä tilanteissa vanha kunnon <em>console.log</em> on hyödyllinen. Voimme tulostaa <em>shallow</em>-metodin avulla renderöityjä komponentteja ja niiden sisällä olevia elementtejä metodin <a href=\"http://airbnb.io/enzyme/docs/api/ShallowWrapper/debug.html\">debug</a> avulla:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">describe.only<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;Note />'</span>, <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  it<span class=\"token punctuation\">(</span><span class=\"token string\">'renders content'</span>, <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    const note <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      content: <span class=\"token string\">'Komponenttitestaus tapahtuu jestillä ja enzymellä'</span>,\n      important: <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n\n    const noteComponent <span class=\"token operator\">=</span> shallow<span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Note note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">}</span> /<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n    console.log<span class=\"token punctuation\">(</span>noteComponent.debug<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n\n\n    const contentDiv <span class=\"token operator\">=</span> noteComponent.find<span class=\"token punctuation\">(</span><span class=\"token string\">'.content'</span><span class=\"token punctuation\">)</span>\n    console.log<span class=\"token punctuation\">(</span>contentDiv.debug<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n\n    // <span class=\"token punctuation\">..</span>.\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Konsoliin tulostuu komponentin generoima html:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">console.log src/components/Note.test.js:16\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"wrapper\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"content\"</span><span class=\"token operator\">></span>\n      Komponenttitestaus tapahtuu jestillä ja enzymellä\n    <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>undefined<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token function\">make</span> not important\n      <span class=\"token operator\">&lt;</span>/button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n\nconsole.log src/components/Note.test.js:20\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"content\"</span><span class=\"token operator\">></span>\n    Komponenttitestaus tapahtuu jestillä ja enzymellä\n  <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span></code></pre></div>\n<h3>Nappien painelu testeissä</h3>\n<p>Sisällön näyttämisen lisäksi toinen <em>Note</em>-komponenttien vastuulla oleva asia on huolehtia siitä, että painettaessa noten yhteydessä olevaa nappia, tulee propsina välitettyä tapahtumankäsittelijäfunktiota <em>toggleImportance</em> kutsua.</p>\n<p>Testaus onnistuu seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">it<span class=\"token punctuation\">(</span><span class=\"token string\">'clicking the button calls event handler once'</span>, <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  const note <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    content: <span class=\"token string\">'Komponenttitestaus tapahtuu jestillä ja enzymellä'</span>,\n    important: <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n\n  const mockHandler <span class=\"token operator\">=</span> jest.fn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  const noteComponent <span class=\"token operator\">=</span> shallow<span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Note\n      note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note<span class=\"token punctuation\">}</span>\n      toggleImportance<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>mockHandler<span class=\"token punctuation\">}</span>\n    /<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n\n  const button <span class=\"token operator\">=</span> noteComponent.find<span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span>\n  button.simulate<span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span>\n\n  expect<span class=\"token punctuation\">(</span>mockHandler.mock.calls.length<span class=\"token punctuation\">)</span>.toBe<span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Testissä on muutama mielenkiintoinen seikka. Tapahtumankäsittelijäksi annetaan Jestin avulla määritelty <a href=\"https://facebook.github.io/jest/docs/en/mock-functions.html\">mock</a>-funktio:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mockHandler <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Testi hakee renderöidystä komponentista <em>button</em>-elementin ja klikkaa sitä. Koska komponentissa on ainoastaan yksi nappi, on sen hakeminen helppoa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> noteComponent<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span>\nbutton<span class=\"token punctuation\">.</span><span class=\"token function\">simulate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Klikkaaminen tapahtuu metodin <a href=\"http://airbnb.io/enzyme/docs/api/ShallowWrapper/simulate.html\">simulate</a> avulla.</p>\n<p>Testin ekspektaatio varmistaa, että <em>mock-funktiota</em> on kutsuttu täsmälleen kerran:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockHandler<span class=\"token punctuation\">.</span>mock<span class=\"token punctuation\">.</span>calls<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><a href=\"https://en.wikipedia.org/wiki/Mock_object\">Mockoliot ja -funktiot</a> ovat testauksessa yleisesti käytettyjä valekomponentteja, joiden avulla korvataan testattavien komponenttien riippuvuuksia, eli niiden tarvitsemia muita komponentteja. Mockit mahdollistavat mm. kovakoodattujen syötteiden palauttamisen sekä niiden metodikutsujen lukumäärän sekä parametrien testauksen aikaisen tarkkailun.</p>\n<p>Esimerkissämme mock-funktio sopi tarkoitukseen erinomaisesti, sillä sen avulla on helppo varmistaa, että metodia on kutsuttu täsmälleen kerran.</p>\n<h3>Komponentin <em>Togglable</em> testit</h3>\n<p>Tehdään komponentille <em>Togglable</em> muutama testi. Lisätään komponentin lapset renderöivään div-elementtiin CSS-luokka <em>togglableContent</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">class Togglable extends React.Component {\n\n  render() {\n    const hideWhenVisible = { display: this.state.visible ? &#39;none&#39; : &#39;&#39; }\n    const showWhenVisible = { display: this.state.visible ? &#39;&#39; : &#39;none&#39; }\n\n    return (\n      &lt;div&gt;\n        &lt;div style={hideWhenVisible}&gt;\n          &lt;button onClick={this.toggleVisibility}&gt;{this.props.buttonLabel}&lt;/button&gt;\n        &lt;/div&gt;\n        &lt;div style={showWhenVisible} className=&quot;togglableContent&quot;&gt;\n          {this.props.children}\n          &lt;button onClick={this.toggleVisibility}&gt;cancel&lt;/button&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    )\n  }\n}</code></pre></div>\n<p>Testit ovat seuraavassa</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\nimport { shallow } from &#39;enzyme&#39;\nimport Adapter from &#39;enzyme-adapter-react-16&#39;\nimport Note from &#39;./Note&#39;\nimport Togglable from &#39;./Togglable&#39;\n\ndescribe(&#39;&lt;Togglable /&gt;&#39;, () =&gt; {\n  let togglableComponent\n\n  beforeEach(() =&gt; {\n    togglableComponent = shallow(\n      &lt;Togglable buttonLabel=&quot;show...&quot;&gt;\n        &lt;div className=&quot;testDiv&quot; /&gt;\n      &lt;/Togglable&gt;\n    )\n  })\n\n  it(&#39;renders its children&#39;, () =&gt; {\n    expect(togglableComponent.contains(&lt;div className=&quot;testDiv&quot; /&gt;)).toEqual(true)\n  })\n\n  it(&#39;at start the children are not displayed&#39;, () =&gt; {\n    const div = togglableComponent.find(&#39;.togglableContent&#39;)\n    expect(div.getElement().props.style).toEqual({ display: &#39;none&#39; })\n  })\n\n  it(&#39;after clicking the button, children are displayed&#39;, () =&gt; {\n    const button = togglableComponent.find(&#39;button&#39;)\n\n    button.at(0).simulate(&#39;click&#39;)\n    const div = togglableComponent.find(&#39;.togglableContent&#39;)\n    expect(div.getElement().props.style).toEqual({ display: &#39;&#39; })\n  })\n\n})</code></pre></div>\n<p>Ennen jokaista testiä suoritettava <em>beforeEach</em> alustaa shallow-renderöimällä <em>Togglable</em>-komponentin muuttujaan <em>togglableComponent</em>.</p>\n<p>Ensimmäinen testi tarkastaa, että <em>Togglable</em> renderöi lapsikomponentin <em><div className=\"testDiv\" /></em>. Loput testit varmistavat, että Togglablen sisältämä lapsikomponentti on alussa näkymättömissä, eli sen sisältävään <em>div</em>-elementtiin liittyy tyyli <em>{ display: 'none' }</em>, ja että nappia painettaessa komponentti näkyy, eli tyyli on <em>{ display: '' }</em>. Koska Togglablessa on kaksi nappia, painallusta simuloidessa niistä pitää valita oikea, eli tällä kertaa ensimmäinen.</p>\n<h2>Tehtäviä</h2>\n<p>Tee nyt tehtävät <a href=\"/teht%C3%A4v%C3%A4t#komponenttien-testaaminen\">5.12-14</a></p>\n<h3>mount ja full DOM -renderöinti</h3>\n<p>Käyttämämme <em>shallow</em>-renderöijä on useimmista tapauksissa riittävä. Joskus tarvitsemme kuitenkin järeämmän työkalun sillä <em>shallow</em> renderöi ainoastaan \"yhden tason\", eli sen komponentin, jolle metodia kutsutaan.</p>\n<p>Jos yritämme esim. sijoittaa kaksi <em>Note</em>-komponenttia <em>Togglable</em>-komponentin sisälle ja tulostamme syntyvän <em>ShallowWrapper</em> -olion</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">it<span class=\"token punctuation\">(</span><span class=\"token string\">'shallow renders only one level'</span>, <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  const note1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    content: <span class=\"token string\">'Komponenttitestaus tapahtuu jestillä ja enzymellä'</span>,\n    important: <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n  const note2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    content: <span class=\"token string\">'shallow ei renderöi alikomponentteja'</span>,\n    important: <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n\n  const togglableComponent <span class=\"token operator\">=</span> shallow<span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"show...\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Note note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note1<span class=\"token punctuation\">}</span> /<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Note note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>note2<span class=\"token punctuation\">}</span> /<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>/Togglable<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n\n  console.log<span class=\"token punctuation\">(</span>togglableComponent.debug<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>huomaamme, että <em>Togglable</em> komponentti on renderöitynyt, eli \"muuttunut\" HTML:ksi, mutta sen sisällä olevat <em>Note</em>-komponentit eivät ole HTML:ää vaan React-komponentteja.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      show<span class=\"token punctuation\">..</span>.\n    <span class=\"token operator\">&lt;</span>/button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> className<span class=\"token operator\">=</span><span class=\"token string\">\"togglableContent\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Note note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> /<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Note note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> /<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      cancel\n    <span class=\"token operator\">&lt;</span>/button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span></code></pre></div>\n<p>Jos komponentille tehdään edellisten esimerkkien tapaan yksikkötestejä, <em>shallow</em>-renderöinti on useimmiten riittävä. Jos haluamme testata isompia kokonaisuuksia, eli tehdä frontendin <em>integraatiotestausta</em>, ei <em>shallow</em>-renderöinti riitä vaan on turvauduttava komponentit kokonaisuudessaan renderöivään <a href=\"http://airbnb.io/enzyme/docs/api/mount.html\">mount</a>:iin.</p>\n<p>Muutetaan testi käyttämään <em>shallowin</em> sijaan <em>mountia</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\nimport { shallow, mount } from &#39;enzyme&#39;\nimport Note from &#39;./Note&#39;\nimport Togglable from &#39;./Togglable&#39;\n\nit(&#39;mount renders all components&#39;, () =&gt; {\n  const note1 = {\n    content: &#39;Komponenttitestaus tapahtuu jestillä ja enzymellä&#39;,\n    important: true\n  }\n  const note2 = {\n    content: &#39;mount renderöi myös alikomponentit&#39;,\n    important: true\n  }\n\n  const noteComponent = mount(\n    &lt;Togglable buttonLabel=&quot;show...&quot;&gt;\n      &lt;Note note={note1} /&gt;\n      &lt;Note note={note2} /&gt;\n    &lt;/Togglable&gt;\n  )\n\n  console.log(noteComponent.debug())\n})</code></pre></div>\n<p>Tuloksena on kokonaisuudessaan HTML:ksi renderöitynyt <em>Togglable</em>-komponentti:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>Togglable buttonLabel<span class=\"token operator\">=</span><span class=\"token string\">\"show...\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        show<span class=\"token punctuation\">..</span>.\n      <span class=\"token operator\">&lt;</span>/button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> className<span class=\"token operator\">=</span><span class=\"token string\">\"togglableContent\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Note note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"wrapper\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"content\"</span><span class=\"token operator\">></span>\n            Komponenttitestaus tapahtuu jestillä ja enzymellä\n          <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>undefined<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n              <span class=\"token function\">make</span> not important\n            <span class=\"token operator\">&lt;</span>/button<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>/Note<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Note note<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"wrapper\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"content\"</span><span class=\"token operator\">></span>\n            <span class=\"token function\">mount</span> renderöi myös alikomponentit\n          <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>undefined<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n              <span class=\"token function\">make</span> not important\n            <span class=\"token operator\">&lt;</span>/button<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>/Note<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>Function<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        cancel\n      <span class=\"token operator\">&lt;</span>/button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>/Togglable<span class=\"token operator\">></span></code></pre></div>\n<p>Mountin avulla renderöitäessä testi pääsee siis käsiksi periaatteessa samaan HTML-koodiin, joka todellisuudessa renderöidään selaimeen ja tämä luonnollisesti mahdollistaa huomattavasti monipuolisemman testauksen kuin <em>shallow</em>-renderöinti. Komennolla <em>mount</em> tapahtuva renderöinti on kuitenkin hitaampaa, joten jos <em>shallow</em> riittää, sitä kannattaa käyttää.</p>\n<p>Huomaa, että testin käyttämä metodi <a href=\"http://airbnb.io/enzyme/docs/api/ReactWrapper/debug.html\">debug</a> ei palauta todellista HTML:ää vaan debuggaustarkoituksiin sopivan tekstuaalisen esitysmuodon komponentista. Todellisessa HTML:ssä ei mm. ole ollenkaan React-komponenttien tageja.</p>\n<p>Jos on tarvetta tietää, mikä on testattaessa syntyvä todellinen HTML, sen saa selville metodilla <a href=\"http://airbnb.io/enzyme/docs/api/ReactWrapper/html.html\">html</a>.</p>\n<p>Jos muutamme testin viimeisen komennon muotoon</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>noteComponent<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>tulostuu todellinen HTML:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>show...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Komponenttitestaus tapahtuu jestillä ja enzymellä<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>make not important<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>mount renderöi myös alikomponentit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>make not important<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>cancel<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Komento <em>mount</em> palauttaa renderöidyn \"komponenttipuun\" <a href=\"https://airbnb.io/enzyme/docs/api/mount.html#mountnode-options--reactwrapper\">ReactWrapper</a>-tyyppisenä oliona, joka tarjoaa hyvin samantyyppisen rajapinnan komponentin sisällön tutkimiseen kuin <em>ShallowWrapper</em>.</p>\n<h3>Lomakkeiden testaus</h3>\n<p>Lomakkeiden testaaminen Enzymellä on jossain määrin haasteellista. Enzymen dokumentaatio ei mainitse lomakkeista sanaakaan. <a href=\"https://github.com/airbnb/enzyme/issues/364\">Issueissa</a> asiasta kuitenkin keskustellaan.</p>\n<p>Tehdään testi komponentille <em>NoteForm</em>. Lomakkeen koodi näyttää seuraavalta</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const NoteForm = ({ onSubmit, handleChange, value }) =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Luo uusi muistiinpano&lt;/h2&gt;\n\n      &lt;form onSubmit={onSubmit}&gt;\n        &lt;input\n          value={value}\n          onChange={handleChange}\n        /&gt;\n        &lt;button type=&quot;submit&quot;&gt;tallenna&lt;/button&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Lomakkeen toimintaperiaatteena on synkronoida lomakkeen tila sen ulkopuolella olevan React-komponentin tilaan. Lomakettamme on jossain määrin vaikea testata yksistään.</p>\n<p>Teemmekin testejä varten apukomponentin <em>Wrapper</em>, joka renderöi <em>NoteForm</em>:in ja hallitsee lomakkeen tilaa:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">class Wrapper extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      formInput: &#39;&#39;\n    }\n  }\n  onChange = (e) =&gt; {\n    this.setState({ formInput: e.target.value })\n  }\n  render() {\n    return (\n      &lt;NoteForm\n        value={this.state.formInput}\n        onSubmit={this.props.onSubmit}\n        handleChange={this.onChange}\n      /&gt;\n  )}\n}</code></pre></div>\n<p>Testi on seuraavassa:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\nimport { mount } from &#39;enzyme&#39;\nimport NoteForm from &#39;./NoteForm&#39;\n\nit(&#39;renders content&#39;, () =&gt; {\n  const onSubmit = jest.fn()\n\n  const wrapper = mount(\n    &lt;Wrapper onSubmit={onSubmit} /&gt;\n  )\n\n  const input = wrapper.find(&#39;input&#39;)\n  const button = wrapper.find(&#39;button&#39;)\n\n  input.simulate(&#39;change&#39;, { target: { value: &#39;lomakkeiden testaus on hankalaa&#39; } })\n  button.simulate(&#39;submit&#39;)\n\n  expect(wrapper.state().formInput).toBe(&#39;lomakkeiden testaus on hankalaa&#39;)\n  expect(onSubmit.mock.calls.length).toBe(1)\n})</code></pre></div>\n<p>Testi luo <em>Wrapper</em>-komponentin, jolle se välittää propseina mockatun funktion <em>onSubmit</em>. Wrapper välittää funktion edelleen <em>NoteFormille</em> tapahtuman <em>onSubmit</em> käsittelijäksi.</p>\n<p>Syötekenttään <em>input</em> kirjoittamista simuloidaan tekemällä syötekenttään tapahtuma <em>change</em> ja määrittelemällä sopiva olio, joka määrittelee syötekenttään 'kirjoitetun' sisällön.</p>\n<p>Lomakkeen nappia tulee painaa simuloimalla tapahtumaa <em>submit</em>, tapahtuma <em>click</em> ei lähetä lomaketta.</p>\n<p>Testin ensimmäinen ekspektaatio tutkii komponentin <em>Wrapper</em> tilaa metodilla <a href=\"http://airbnb.io/enzyme/docs/api/ReactWrapper/state.html\">state</a>, ja varmistaa, että lomakkeelle kirjoitettu teksti on siirtynyt tilaan. Toinen ekspektaatio varmistaa, että lomakkeen lähetys on aikaansaanut tapahtumankäsittelijän kutsumisen.</p>\n<h2>Frontendin integraatiotestaus</h2>\n<p>Suoritimme edellisessä osassa backendille integraatiotestejä, jotka testasivat backendin tarjoaman API:n läpi backendia ja tietokantaa. Backendin testauksessa tehtiin tietoinen päätös olla kirjoittamatta yksikkötestejä sillä backendin koodi on melko suoraviivaista ja ongelmat tulevatkin esiin todennäköisemmin juuri monimutkaisemmissa skenaarioissa, joita integraatiotestit testaavat hyvin.</p>\n<p>Toistaiseksi kaikki frontendiin tekemämme testit ovat olleet yksittäisten komponenttien oikeellisuutta valvovia yksikkötestejä. Yksikkötestaus on toki tärkeää, mutta kattavinkaan yksikkötestaus ei riitä antamaan riittävää luotettavuutta sille, että järjestelmä toimii kokonaisuudessaan.</p>\n<p>Tehdään nyt sovellukselle yksi integraatiotesti. Integraatiotestaus on huomattavasti komponenttien yksikkötestausta hankalampaa. Erityisesti sovelluksemme kohdalla ongelmia aiheuttaa kaksi seikkaa: sovellus hakee näytettävät muistiinpanot palvelimelta <em>ja</em> sovellus käyttää local storagea kirjautuneen käyttäjän tietojen tallettamiseen.</p>\n<p>Local storage ei ole oletusarvoiseti käytettävissä testejä suorittaessa, sillä kyseessä on selaimen tarjoama toiminnallisuus ja testit ajetaan selaimen ulkopuolella. Ongelma on helppo korjata määrittelemällä testien suorituksen ajaksi <em>mock</em> joka matkii local storagea. Tapoja tähän on <a href=\"https://stackoverflow.com/questions/32911630/how-do-i-deal-with-localstorage-in-jest-tests\">monia</a>.</p>\n<p>Koska testimme ei edellytä local storagelta juuri mitään toiminnallisuutta, teemme tiedostoon <a href=\"https://github.com/facebookincubator/create-react-app/blob/ed5c48c81b2139b4414810e1efe917e04c96ee8d/packages/react-scripts/template/README.md#initializing-test-environment\">src/setupTests.js</a> hyvin yksinkertaisen mockin</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> savedItems <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> localStorageMock <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  setItem<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    savedItems<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> item\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  getItem<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> savedItems<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  clear<span class=\"token punctuation\">:</span> savedItems <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nwindow<span class=\"token punctuation\">.</span>localStorage <span class=\"token operator\">=</span> localStorageMock</code></pre></div>\n<p>Toinen ongelmistamme on se, että sovellus hakee näytettävät muistiinpanot palvelimelta. Muistiinpanojen haku tapahtuu heti komponentin <em>App</em> luomisen jälkeen, kun metodi <em>componentDidMount</em> kutsuu <em>noteService</em>:n metodia <em>getAll</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  noteService<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>notes <span class=\"token operator\">=></span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> notes <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Jestin <a href=\"https://facebook.github.io/jest/docs/en/manual-mocks.html#content\">manual mock</a> -konsepti tarjoaa tilanteeseen hyvän ratkaisun. Manual mockien avulla voidaan kokonainen moduuli, tässä tapauksessa <em>noteService</em> korvata testien ajaksi vaihtoehtoisella esim. kovakoodattua dataa tarjoavalla toiminnallisuudella.</p>\n<p>Luodaan Jestin ohjeiden mukaisesti hakemistoon <em>src/services</em> alihakemisto <em>__mocks__</em> (alussa ja lopussa kaksi alaviivaa) ja sinne tiedosto <em>notes.js</em> jonka määrittelemä metodi <em>getAll</em> palauttaa kovakoodatun listan muistiinpanoja:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n<span class=\"token keyword\">const</span> notes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"5a451df7571c224a31b5c8ce\"</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token punctuation\">:</span> <span class=\"token string\">\"HTML on helppoa\"</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token punctuation\">:</span> <span class=\"token string\">\"2017-12-28T16:38:15.541Z\"</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    user<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      _id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"5a437a9e514ab7f168ddf138\"</span><span class=\"token punctuation\">,</span>\n      username<span class=\"token punctuation\">:</span> <span class=\"token string\">\"mluukkai\"</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Matti Luukkainen\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"5a451e21e0b8b04a45638211\"</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Selain pystyy suorittamaan vain javascriptiä\"</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token punctuation\">:</span> <span class=\"token string\">\"2017-12-28T16:38:57.694Z\"</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    user<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      _id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"5a437a9e514ab7f168ddf138\"</span><span class=\"token punctuation\">,</span>\n      username<span class=\"token punctuation\">:</span> <span class=\"token string\">\"mluukkai\"</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Matti Luukkainen\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"5a451e30b5ffd44a58fa79ab\"</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token punctuation\">:</span> <span class=\"token string\">\"HTTP-protokollan tärkeimmät metodit ovat GET ja POST\"</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token punctuation\">:</span> <span class=\"token string\">\"2017-12-28T16:39:12.713Z\"</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    user<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      _id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"5a437a9e514ab7f168ddf138\"</span><span class=\"token punctuation\">,</span>\n      username<span class=\"token punctuation\">:</span> <span class=\"token string\">\"mluukkai\"</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Matti Luukkainen\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>notes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span> getAll<span class=\"token punctuation\">,</span> notes <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Määritelty metodi <em>getAll</em> palauttaa muistiinpanojen listan käärittynä promiseksi metodin <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\">Promise.resolve</a> avulla sillä käytettäessä metodia, oletetaan sen paluuarvon olevan promise:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">noteService<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>notes <span class=\"token operator\">=></span></code></pre></div>\n<p>Olemme valmiina määrittelemään testin:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mount <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'enzyme'</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n<span class=\"token keyword\">import</span> Note <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/Note'</span>\njest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./services/notes'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">import</span> noteService <span class=\"token keyword\">from</span> <span class=\"token string\">'./services/notes'</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;App />'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> app\n  <span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    app <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'renders all notes it gets from backend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> noteComponents <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>Note<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>noteComponents<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span>noteService<span class=\"token punctuation\">.</span>notes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Komennolla <em>jest.mock('./services/notes')</em> otetaan juuri määritelty mock käyttöön. Loogisempi paikka komennolle olisi kenties testien määrittelyt tekevä tiedosto <em>src/setupTests.js</em></p>\n<p>Testin toimivuuden kannalta on oleellista metodin <a href=\"http://airbnb.io/enzyme/docs/api/ReactWrapper/update.html\">app.update</a> kutsuminen, näin pakotetaan sovellus renderöitymään uudelleen siten, että myös mockatun backendin palauttamat muistiinpanot renderöityvät.</p>\n<h2>Testauskattavuus</h2>\n<p><a href=\"https://github.com/facebookincubator/create-react-app/blob/ed5c48c81b2139b4414810e1efe917e04c96ee8d/packages/react-scripts/template/README.md#coverage-reporting\">Testauskattavuus</a> saadaan helposti selville suorittamalla testit komennolla</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">CI<span class=\"token operator\">=</span>true <span class=\"token function\">npm</span> <span class=\"token function\">test</span> -- --coverage</code></pre></div>\n<p>![]({{ \"/assets/5/8.png\" | absolute_url }})</p>\n<p>Melko primitiivinen HTML-muotoinen raportti generoituu hakemistoon <em>coverage/lcov-report</em>. HTML-muotoinen raportti kertoo mm. yksittäisen komponenttien testaamattomat koodirivit:</p>\n<p>![]({{ \"/assets/5/9.png\" | absolute_url }})</p>\n<p>Huomaamme, että parannettavaa jäi vielä runsaasti.</p>\n<p>Sovelluksen tämänhetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/FullStack-HY/part2-notes/tree/part5-5\">githubissa</a>, tagissa <em>part5-5</em>.</p>\n<h2>Tehtäviä</h2>\n<p>Tee nyt tehtävät <a href=\"/teht%C3%A4v%C3%A4t#integraatiotestaus\">5.15 ja 5.16</a></p>\n<h2>Snapshot-testaus</h2>\n<p>Jest tarjoaa \"perinteisen\" testaustavan lisäksi aivan uudenlaisen tavan testaukseen, ns. <a href=\"https://facebook.github.io/jest/docs/en/snapshot-testing.html\">snapshot</a>-testauksen. Mielenkiintoista snapshot-testauksessa on se, että sovelluskehittäjän ei tarvitse itse määritellä ollenkaan testejä, snapshot-testauksen käyttöönotto riittää.</p>\n<p>Periaatteena on verrata komponenttien määrittelemää HTML:ää aina koodin muutoksen jälkeen siihen, minkälaisen HTML:n komponentit määrittelivät ennen muutosta.</p>\n<p>Jos snapshot-testi huomaa muutoksen komponenttien määrittelemässä HTML:ssä, voi kyseessä joko olla haluttu muutos tai vahingossa aiheutettu \"bugi\". Snapshot-testi huomauttaa sovelluskehittäjälle, jos komponentin määrittelemä HTML muuttuu. Sovelluskehittäjä kertoo muutosten yhteydessä, oliko muutos haluttu. Jos muutos tuli yllätyksenä, eli kyseessä oli bugi, sovelluskehittäjä huomaa sen snapshot-testauksen ansiosta nopeasti.</p>\n<h2>End to end -testaus</h2>\n<p>Olemme tehneet sekä backendille että frontendille hieman niitä kokonaisuutena testaavia integraatiotestejä. Eräs tärkeä testauksen kategoria on vielä käsittelemättä, <a href=\"https://en.wikipedia.org/wiki/System_testing\">järjestelmää kokonaisuutena</a> testaavat \"end to end\" (eli E2E) -testit.</p>\n<p>Web-sovellusten E2E-testaus tapahtuu simuloidun selaimen avulla esimerkiksi <a href=\"http://www.seleniumhq.org\">Selenium</a>-kirjastoa käyttäen. Toinen vaihtoehto on käyttää ns. <a href=\"https://en.wikipedia.org/wiki/Headless_browser\">headless browseria</a> eli selainta, jolla ei ole ollenkaan graafista käyttöliittymää. Esim. Chromea on mahdollista suorittaa Headless-moodissa.</p>\n<p>E2E testit ovat potentiaalisesti kaikkein hyödyllisin testikategoria, sillä ne tutkivat järjestelmää saman rajapinnan kautta kuin todelliset käyttäjät.</p>\n<p>E2E-testeihin liittyy myös ikäviä puolia. Niiden konfigurointi on haastavampaa kuin yksikkö- ja integraatiotestien. E2E-testit ovat tyypillisesti myös melko hitaita ja isommassa ohjelmistossa niiden suoritusaika voi helposti nousta minuutteihin, tai jopa tunteihin. Tämä on ikävää sovelluskehityksen kannalta, sillä sovellusta koodatessa on erittäin hyödyllistä pystyä ajamaan testejä mahdollisimman usein koodin regressioiden varalta.</p>\n<p>Palaamme end to end -testeihin kurssin viimeisessä, eli seitsemännessä osassa.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/part-5-1d38df3161654915a233d16795c6c490.svg"},"part":5,"letter":"c"}}},"pageContext":{"part":5,"letter":"c"}}