{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Palataan jälleen Reactin pariin.</p>\n<p>Sovelluksemme jäi seuraavaan tilaan</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const Hello = (props) =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Hello {props.name}, you are {props.age} years old&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\n\nconst App = () =&gt; {\n  const nimi = &#39;Pekka&#39;\n  const ika = 10\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Greetings&lt;/h1&gt;\n      &lt;Hello name=&quot;Arto&quot; age={26 + 10} /&gt;\n      &lt;Hello name={nimi} age={ika} /&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<h3>Komponenttien apufunktiot</h3>\n<p>Laajennetaan komponenttia <em>Hello</em> siten, että se antaa arvion tervehdittävän henkilön syntymävuodesta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hello</span> <span class=\"token operator\">=</span> props <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bornYear</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> yearNow <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> yearNow <span class=\"token operator\">-</span> props<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        Hello <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> you are <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span> years old\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>So you were probably born <span class=\"token punctuation\">{</span><span class=\"token function\">bornYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Syntymävuoden arvauksen tekevä logiikka on erotettu omaksi funktiokseen, jota kutsutaan renderöinnin yhteydessä.</p>\n<p>Tervehdittävän henkilön ikää ei metodille tarvitse välittää parametrina, sillä funktio näkee sen sisältävälle komponentille välitettävät propsit.</p>\n<p>Teknisesti ajatellen syntymävuoden määrittelevä funktio on määritelty komponentin toiminnan määrittelevän funktion sisällä. Esim. Javalla ohjelmoitaessa metodien määrittely toisen metodin sisällä ei onnistu. Javascriptissa taas funktioiden sisällä määritellyt funktiot on hyvin yleisesti käytetty tekniikka.</p>\n<h3>Destrukturointi</h3>\n<p>Ennen kuin siirrymme eteenpäin, tarkastellaan erästä pientä, mutta käyttökelpoista ES6:n mukanaan tuomaa uutta piirrettä Javascriptissä, eli sijoittamisen yhteydessä tapahtuvaa <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">destrukturointia</a>.</p>\n<p>Jouduimme äskeisessä koodissa viittaamaan propseina välitettyyn dataan hieman ikävästi muodossa <em>props.name</em> ja <em>props.age</em>. Näistä <em>props.age</em> pitää toistaa komponentissa kahteen kertaan.</p>\n<p>Koska <em>props</em> on nyt olio</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Arto Hellas'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token punctuation\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>voimme suoraviivaistaa komponenttia siten, että sijoitamme kenttien arvot muuttujiin <em>name</em> ja <em>age</em> jonka jälkeen niitä on mahdollista käyttää koodissa suoraan:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const Hello = (props) =&gt; {\n  const name = props.name\n  const age = props.age\n\n  const bornYear = () =&gt; new Date().getFullYear() - age\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Hello {name}, you are {age} years old&lt;/p&gt;\n      &lt;p&gt;So you were probably born {bornYear()}&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Huomaa, että olemme myös hyödyntäneet nuolifunktion kompaktimpaa kirjoitustapaa metodin <em>bornYear</em> määrittelyssä. Kuten aiemmin totesimme, jos nuolifunktio koostuu ainoastaan yhdestä komennosta, ei funktion runkoa tarvitse kirjoittaa aaltosulkeiden sisään ja funktio palauttaa ainoan komentonsa arvon.</p>\n<p>Seuraavat ovat siis vaihtoehtoiset tavat määritellä sama funktio:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bornYear</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> age<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bornYear</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Destrukturointi tekee apumuuttujien määrittelyn vielä helpommaksi, sen avulla voimme \"kerätä\" olion oliomuuttujien arvot suoraan omiin yksittäisiin muuttujiin:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const Hello = (props) =&gt; {\n  const { name, age } = props\n  const bornYear = () =&gt; new Date().getFullYear() - age\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Hello {name}, you are {props.age} years old&lt;/p&gt;\n      &lt;p&gt;So you were probably born {bornYear()}&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Eli koska</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Arto Hellas'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token punctuation\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>saa <code> const { name, age } = props</code> aikaan sen, että muuttuja <em>name</em> saa arvon 'Arto Hellas' ja muuttuja <em>age</em> arvon 35.</p>\n<p>Voimme viedä destrukturoinnin vielä askeleen verran pidemmälle</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bornYear</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> age<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        Hello <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> you are <span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">}</span> years old\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>So you were probably born <span class=\"token punctuation\">{</span><span class=\"token function\">bornYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Destrukturointi tehdään nyt suodaan sijoittamalla komponentin saamat propsit muuttujiin <em>name</em> ja <em>age</em>.</p>\n<p>Eli sensijaan että props-olio otettaisiin vastaan muuttujaan <em>props</em> ja sen kentät sijoitettaisiin tämän jälkeen muuttujiin <em>name</em> ja <em>age</em></p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const Hello = (props) =&gt; {\n  const { name, age } = props</code></pre></div>\n<p>sijoitamme destrukturoinnin avulla propsin kentät suoraan muuttujiin kun määrittelemme komponettifunktion saaman parametrin:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const Hello = ({ name, age }) =&gt; {</code></pre></div>\n<h3>Sivun uudelleenrenderöinti</h3>\n<p>Toistaiseksi tekemämme sovellukset ovat olleet sellaisia, että kun niiden komponentit on kerran renderöity, niiden ulkoasua ei ole enää voinut muuttaa. Entä jos haluaisimme toteuttaa laskurin, jonka arvo kasvaa esim. ajan kuluessa tai nappien painallusten yhteydessä?</p>\n<p>Aloitetaan seuraavasta rungosta:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const App = (props) =&gt; {\n  const {counter} = props\n  return (\n    &lt;div&gt;{counter}&lt;/div&gt;\n  )\n}\n\nlet counter = 1\n\nReactDOM.render(&lt;App counter={counter} /&gt;, document.getElementById(&#39;root&#39;))</code></pre></div>\n<p>Sovelluksen juurikomponentille siis annetaan viite laskuriin. Juurikomponentti renderöi arvon ruudulle. Entä laskurin arvon muuttuessa? Jos lisäämme ohjelmaan esim. komennon</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">counter.value += 1</code></pre></div>\n<p>ei komponenttia kuitenkaan renderöidä uudelleen. Voimme saada komponentin uudelleenrenderöitymään kutsumalla uudelleen metodia <em>ReactDOM.render</em>, esim. seuraavasti</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const App = (props) =&gt; {\n  const { counter } = props\n  return (\n    &lt;div&gt;{counter}&lt;/div&gt;\n  )\n}\n\nlet counter = 1\n\nconst renderoi = () =&gt; {\n  ReactDOM.render(&lt;App counter={counter} /&gt;, document.getElementById(&#39;root&#39;))\n}\n\nrenderoi()\ncounter += 1\nrenderoi()\ncounter += 1\nrenderoi()</code></pre></div>\n<p>Copypastea vähentämään on komponentin renderöinti kääritty funktioon <em>renderoi</em>.</p>\n<p>Nyt komponentti renderöityy kolme kertaa, saaden ensin arvon 1, sitten 2 ja lopulta 3. 1 ja 2 tosin ovat ruudulla niin vähän aikaa, että niitä ei ehdi havaita.</p>\n<p>Hieman mielenkiintoisempaan toiminnallisuuteen pääsemme tekemällä renderöinnin ja laskurin kasvatuksen toistuvasti sekunnin välein käyttäen <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval\">SetInterval</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">renderoi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  counter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>ReactDOM.render</em>-metodin toistuva kutsuminen ei kuitenkaan ole suositeltu tapa päivittää komponentteja. Tutustutaan seuraavaksi järkevämpään tapaan.</p>\n<h3>Tilallinen komponentti</h3>\n<p>Tähänastiset komponenttimme ovat olleet siinä mielessä yksinkertaisia, että niillä ei ole ollut ollenkaan omaa tilaa, joka voisi muuttua komponentin elinaikana.</p>\n<p>Määritellään nyt sovelluksemme komonentille <em>App</em> tila Reactin <a href=\"https://reactjs.org/docs/hooks-state.html\">state hookin</a> avulla.</p>\n<p>Muutetaan ohjelmaa seuraavasti</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React, { useState } from &#39;react&#39;\nimport ReactDOM from &#39;react-dom&#39;\n\nconst App = (props) =&gt; {\n  const [ counter, setCounter ] = useState(0)\n\n  setTimeout(\n    () =&gt; setCounter(counter + 1),\n    1000\n  )\n\n  return (\n    &lt;div&gt;{counter}&lt;/div&gt;\n  )\n}\n\nReactDOM.render(&lt;App /&gt;, document.getElementById(&#39;root&#39;))</code></pre></div>\n<p>Sovellus importaa nyt heti ensimmäisellä rivillä <em>useState</em>-funktion:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React, { useState } from &#39;react&#39;</code></pre></div>\n<p>Komponentin määrittelevä funktio alkaa metodikutsulla</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const [ counter, setCounter ] = useState(0)</code></pre></div>\n<p>Kutsu saa aikaan sen, että komponentille luodaan tila, joka saa alkuarvokseen nollan. Metodi palauttaa taulukon, jolla on kaksi alkiota. Alkiot otetaan taulukon destrukturointisyntaksilla talteen muuttujiin <em>counter</em> ja <em>setCounter</em>.</p>\n<p>Muuttuja <em>counter</em> pitää sisällään tilan arvon joka on siis aluksi nolla. Muuttuja <em>setCounter</em> taas on viite funktioon, jonka avulla tilaa voidaan muuttaa.</p>\n<p>Sovellus määrittelee funktion <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\">setTimeout</a> avulla, että tilan <em>counter</em> arvoa kasvatetaan yhdellä sekunnin päästä:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">setTimeout(\n  () =&gt; setCounter(counter + 1),\n  1000\n)</code></pre></div>\n<p>Kun tilaa muuttavaa funktiota <em>setCounter</em> kutsutaan, renderöi React komponentin uudelleen, eli käytännössä suorittaa uudelleen komponentin määrittelevän koodin</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">(props) =&gt; {\n  const [ counter, setCounter ] = useState(0)\n\n  setTimeout(\n    () =&gt; setCounter(counter + 1),\n    1000\n  )\n\n  return (\n    &lt;div&gt;{counter}&lt;/div&gt;\n  )\n}</code></pre></div>\n<p>kun koodi suoritetaan toiseen kertaan, funktion <em>useState</em> kutsuminen palauttaa komponentin jo olemassaolevan tilan arvon, joka on nyt 1. Komponentin suoritus määrittelee jälleen laskuria kasvatettavaksi yhdellä sekunnin päästä ja renderöi ruudulle laskurin nykyisen arvon, joka on 1.</p>\n<p>Sekunnin päästä siis suoritetaan funktion <em>setTimeout</em> parametrina ollut koodi</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">() =&gt; setCounter(counter + 1)</code></pre></div>\n<p>ja koska muuttujan <em>counter</em> arvo on 1, on koodi oleellisesti sama kuin tilan <em>counter</em> arvoon 2 asettava</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">() =&gt; setCounter(2)</code></pre></div>\n<p>Ja tämä saa jälleen aikaan sen, että komponentti renderöidään uudelleen. Tilan arvo kasvaa sekunnin päästä yhdellä ja sama jatkuu niin kauan kun sovellus on toiminnassa.</p>\n<p>Jos komponentti ei renderöidy vaikka sen omasta mielestä pitäisi, tai se renderöityy \"väärään aikaan\", debuggaamista auttaa joskus komponentin määrittelevään kunktioon lisätty konsoliin tulostus. Esim. jos lisäämme koodiin seuraavan,</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const App = (props) =&gt; {\n  const [ counter, setCounter ] = useState(0)\n\n  setTimeout(\n    () =&gt; setCounter(counter + 1),\n    1000\n  )\n\n  console.log(&#39;renderöidään&#39;, counter)\n\n  return (\n    &lt;div&gt;{counter}&lt;/div&gt;\n  )\n}</code></pre></div>\n<p>on konsolista helppo seurata metodin <em>render</em> kutsuja:</p>\n<picture><img src=\"/static/720bca28a8631b8d57805a5beb00fe48/14be6/4a.png\" srcset=\"/static/720bca28a8631b8d57805a5beb00fe48/4cce7/4a.png 200w,\n/static/720bca28a8631b8d57805a5beb00fe48/bae5f/4a.png 400w,\n/static/720bca28a8631b8d57805a5beb00fe48/14be6/4a.png 800w,\n/static/720bca28a8631b8d57805a5beb00fe48/1b35a/4a.png 1200w,\n/static/720bca28a8631b8d57805a5beb00fe48/9ee03/4a.png 1600w,\n/static/720bca28a8631b8d57805a5beb00fe48/35b75/4a.png 1622w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h3>Tapahtumankäsittely</h3>\n<p>Mainitsimme jo <a href=\"/osa0\">osassa 0</a> muutamaan kertaan <em>tapahtumankäsittelijät</em>, eli funktiot, jotka on rekisteröity kutsuttavaksi tiettyjen tapahtumien eli eventien yhteydessä. Esim. käyttäjän interaktio sivun elementtien kanssa aiheuttaa joukon erinäisiä tapahtumia.</p>\n<p>Muutetaan sovellusta siten, että laskurin kasvaminen tapahtuukin käyttäjän painaessa <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\">button</a>-elementin avulla toteutettua nappia.</p>\n<p>Button-elementit tukevat mm. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\">hiiritapahtumia</a> (mouse events), joista yleisin on <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/click\">click</a>.</p>\n<p>Reactissa funktion rekisteröiminen tapahtumankäsittelijäksi tapahtumalle <em>click</em> <a href=\"https://reactjs.org/docs/handling-events.html\">tapahtuu</a> seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const App = (props) =&gt; {\n  const [ counter, setCounter ] = useState(0)\n\n  const handleClick = () =&gt; {\n    console.log(&#39;klicked&#39;)\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;{counter}&lt;/div&gt;\n      &lt;button onClick={handleClick}&gt;\n        plus\n      &lt;/button&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Eli laitetaan <em>button</em>:in onClick-attribuutin arvoksi aaltosulkeissa oleva viite koodissa määriteltyyn funktioon <em>handleClick</em>.</p>\n<p>Nyt jokainen napin <em>plus</em> painallus saa aikaan sen että funktiota <em>handleClick</em> kutsutaan, eli klikatessa konsoliin tulostuu <em>clicked</em>.</p>\n<p>Tapahtumankäsittelijäfunktio voidaan määritellä myös suoraan onClick-määrittelyn yhteydessä:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const App = (props) =&gt; {\n  const [ counter, setCounter ] = useState(0)\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;{counter}&lt;/div&gt;\n      &lt;button onClick={() =&gt; console.log(&#39;klicked&#39;)}&gt;\n        plus\n      &lt;/button&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Muuttamalla tapahtumankäsittelijä seuraavaan muotoon</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> setCounter<span class=\"token punctuation\">(</span>counter + 1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  plus\n<span class=\"token operator\">&lt;</span>/button<span class=\"token operator\">></span></code></pre></div>\n<p>saamme halutun toiminnallisuuden, eli tilan <em>counter</em> arvo kasvaa yhdellä <em>ja</em> komponentti renderöityy uudelleen.</p>\n<p>Lisätään sovellukseen myös nappi laskurin nollaamiseen:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const App = (props) =&gt; {\n  const [ counter, setCounter ] = useState(0)\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;{counter}&lt;/div&gt;\n      &lt;button onClick={() =&gt; setCounter(counter + 1)}&gt;\n        plus\n      &lt;/button&gt;\n      &lt;button onClick={() =&gt; setCounter(0)}&gt;\n        zero\n      &lt;/button&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Sovelluksemme on valmis!</p>\n<p>Tapahtumankäsittelijöiden määrittely suoraan JSX-templatejen sisällä ei useimmiten ole kovin viisasta. Eriytetään vielä nappien tapahtumankäsittelijät omiksi komponentin sisäisiksi apufunktioikseen:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const App = (props) =&gt; {\n  const [ counter, setCounter ] = useState(0)\n\n  const increaseByOne = () =&gt; setCounter(counter + 1)\n  const setToZero = () =&gt; setCounter(0)\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;{counter}&lt;/div&gt;\n      &lt;button onClick={increaseByOne}&gt;\n        plus\n      &lt;/button&gt;\n      &lt;button onClick={setToZero}&gt;\n        zero\n      &lt;/button&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<h3>Tapahtumankäsittelijän on oltava funktio</h3>\n<p>Metodit <em>increaseByOne</em> ja <em>setToZero</em> toimivat melkein samalla tavalla, ne asettavat uuden arvon laskurille. Tehdään koodiin yksittäinen funktio, joka sopii molempiin käyttötarkoituksiin:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const App = (props) =&gt; {\n  const [ counter, setCounter ] = useState(0)\n\n  const setToValue = (value) =&gt; setCounter(value)\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;{counter}&lt;/div&gt;\n      &lt;button onClick={setToValue(counter + 1)}&gt;\n        plus\n      &lt;/button&gt;\n      &lt;button onClick={setToValue(0)}&gt;\n        zero\n      &lt;/button&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Huomaamme kuitenkin että muutos hajottaa sovelluksemme täysin:</p>\n<picture><img src=\"/static/70105bcae7b1dfbe3fe71b0ee734ce44/14be6/5a.png\" srcset=\"/static/70105bcae7b1dfbe3fe71b0ee734ce44/4cce7/5a.png 200w,\n/static/70105bcae7b1dfbe3fe71b0ee734ce44/bae5f/5a.png 400w,\n/static/70105bcae7b1dfbe3fe71b0ee734ce44/14be6/5a.png 800w,\n/static/70105bcae7b1dfbe3fe71b0ee734ce44/1b35a/5a.png 1200w,\n/static/70105bcae7b1dfbe3fe71b0ee734ce44/9ee03/5a.png 1600w,\n/static/70105bcae7b1dfbe3fe71b0ee734ce44/9fb27/5a.png 1782w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Mistä on kyse? Tapahtumankäsittelijäksi on tarkoitus määritellä viite <em>funktioon</em>. Kun koodissa on</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">&lt;button onClick={setToValue(0)}&gt;</code></pre></div>\n<p>tapahtumankäsittelijäksi tulee määriteltyä <em>funktiokutsu</em>. Sekin on monissa tilanteissa ok, mutta ei nyt, nimittäin kun React srenderöi metodin, se suorittaa kutsun <code>this.setToValue(0)</code>. Kutsu aiheuttaa komponentin tilan päivittävän funktion <em>setCounter</em> kutsumisen. Tämä taas aiheuttaa komponentin uudelleenrenderöitymisen. Ja sama toistuu uudelleen...</p>\n<p>Tilanteeseen on kaksi ratkaisua. Ratkaisuista yksinkertaisempi on muuttaa tapahtumankäsitteyä seuraavasti</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const App = (props) =&gt; {\n  const [ counter, setCounter ] = useState(0)\n\n  const setToValue = (value) =&gt; setCounter(value)\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;{counter}&lt;/div&gt;\n      &lt;button onClick={() =&gt; setToValue(counter + 1)}&gt;\n        plus\n      &lt;/button&gt;\n      &lt;button onClick={() =&gt; setToValue(0)}&gt;\n        zero\n      &lt;/button&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>eli tapahtumankäsittelijäki on määritelty <em>funktio</em>, joka kutsuu funktiota <em>setToValue</em> sopivalla parametrilla:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">&lt;button onClick={() =&gt; setToValue(counter + 1)}&gt;</code></pre></div>\n<p>Toinen vaihtoehto on käyttää yleistä Javascriptin ja yleisemminkin funktionaalisen ohjelmoinnin kikkaa, eli määritellä <em>funktio joka palauttaa funktion</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const App = (props) =&gt; {\n  const [ counter, setCounter ] = useState(0)\n\n  const setToValue = (value) =&gt; {\n    return () =&gt; {\n      setCounter(value)\n    }\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;{counter}&lt;/div&gt;\n      &lt;button onClick={setToValue(counter + 1)}&gt;\n        plus\n      &lt;/button&gt;\n      &lt;button onClick={setToValue(0)}&gt;\n        zero\n      &lt;/button&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Jos et ole aiemmin törmännyt tekniikkaan, siihen totutteluun voi mennä tovi.</p>\n<p>Olemme siis määritelleet tapahtumankäsittelijäfunktion <em>setToValue</em> seuraavasti:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setToValue</span> <span class=\"token operator\">=</span> value <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Kun komponentissa määritellään tapahtumankäsittelijä kutsumalla <code>this.setToValue(0)</code> on lopputuloksena funktio</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>eli juuri oikeanlainen tilan nollaamisen aiheuttava funktio!</p>\n<p>Plus-napin tapahtumankäsittelijä määritellään kutsumalla <code>setCounter(counter + 1)</code>. Kun komponentti renderöidään ensimmäisen kerran, <em>counter</em> on saanut alkuarvon 0, eli plus-napin tapahtumankäsittelijäksi tulee funktiokutsun <code>setCounter(1)</code> tulos, eli funktio</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Vastaavasti, kun laskurin tila on esim 41, tulee plus-napin tapahtumakuuntelijaksi</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tarkastellaan vielä hieman metodia <em>asetaArvoon</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setToValue</span> <span class=\"token operator\">=</span> value <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Koska metodi itse sisältää ainoastaan yhden komennon, eli <em>returnin</em>, joka palauttaa funktion, voidaan hyödyntää nuolifunktion tiiviimpää muotoa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setToValue</span> <span class=\"token operator\">=</span> value <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Usein tälläisissä tilanteissa kaikki kirjoitetaan samalle riville, jolloin tuloksena on \"kaksi nuolta sisältävä funktio\":</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setToValue</span> <span class=\"token operator\">=</span> value <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Kaksinuolisen funktion voi ajatella funktiona, jota lopullisen tuloksen saadakseen täytyy kutsua kaksi kertaa.</p>\n<p>Ensimmäisellä kutsulla \"konfiguroidaan\" varsinainen funktio, sijoittamalla osalle parametreista arvo. Eli kutsu <code>setToValue(5)</code> sitoo muuttujaan <em>value</em> arvon 5 ja funktiosta \"jää jäljelle\" seuraava funktio:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tässä näytetty tapa soveltaa funktioita palauttavia funktioita on oleellisesti sama asia mistä funktionaalisessa ohjelmoinnissa käytetään termiä <a href=\"http://www.datchley.name/currying-vs-partial-application/\">currying</a>. Termi currying ei ole lähtöisin funktionaalisen ohjelmoinnin piiristä vaan sillä on juuret <a href=\"https://en.wikipedia.org/wiki/Currying\">syvällä matematiikassa</a>.</p>\n<p>Jo muutamaan kertaan mainittu termi <em>funktionaalinen ohjelmointi</em> ei ole välttämättä kaikille tässä vaiheessa tuttu. Asiaa avataan hiukan kurssin kuluessa, sillä React tukee ja osin edellyttää funktionaalisen tyylin käyttöä.</p>\n<p><strong>HUOM:</strong> muutos, missä korvasimme metodit <em>increaseByOne</em> ja <em>setToZero</em> metodilla <em>setToValue</em> ei välttämättä ole järkevä, sillä erikoistuneemmat metodit ovat paremmin nimettyjä. Teimme muutoksen oikeastaan ainoastaan demonstroidaksemme <em>currying</em>-tekniikan soveltamista.</p>\n<p><strong>HUOM2:</strong> et todennäköisesti tarvitse tämän osan tehtävissä funktioita palauttavia funktioita, joten älä sekoita päätäsi asialla turhaan.</p>\n<h3>Tilan vieminen alikomponenttiin</h3>\n<p>Reactissa suositaan pieniä komponentteja, joita on mahdollista uusiokäyttää monessa osissa sovellusta ja jopa useissa eri sovelluksissa. Refaktoroidaan koodiamme vielä siten, että yhden komponentin sijaan koostamme laskurin näytöstä ja kahdesta painikkeesta.</p>\n<p>Tehdään ensin näytöstä vastaava komponentti <em>Display</em>.</p>\n<p>Reactissa parhaana käytänteenä on sijoittaa tila <a href=\"https://reactjs.org/docs/lifting-state-up.html\">mahdollisimman ylös</a> komponenttihierarkiassa, mielellään sovelluksen juurikomponenttiin.</p>\n<p>Jätetään sovelluksen tila, eli laskimen arvo komponenttiin <em>App</em> ja välitetään tila <em>props</em>:ien avulla komponentille <em>Display</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const Display = (props) =&gt; {\n  return (\n    &lt;div&gt;{props.counter}&lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Voimme hyödyntää aiemmin mainittua <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">destrukturointia</a> myös metodien parametreissa. Eli koska olemme kiinnostuneita <em>props</em>:in kentästä <em>counter</em>, on edellinen mahdollista yksinkertaistaa seuraavaan muotoon:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const Display = ({ counter }) =&gt; {\n  return (\n    &lt;div&gt;{counter}&lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Koska komponentin määrittelevä metodi ei sisällä muuta kuin returnin, voimme ilmaista sen hyödyntäen nuolifunktioiden tiiviimpää ilmaisumuotoa</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const Display = ({ counter }) =&gt; &lt;div&gt;{counter}&lt;/div&gt;</code></pre></div>\n<p>Komponentin käyttö on suoraviivaista, riittää että sille välitetään laskurin tila eli <em>counter</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const App = (props) =&gt; {\n  const [ counter, setCounter ] = useState(0)\n  // ...\n\n  return (\n    &lt;div&gt;\n      &lt;Display counter={counter}/&gt;\n      &lt;button onClick={setToValue(counter + 1)}&gt;\n        plus\n      &lt;/button&gt;\n      &lt;button onClick={setToValue(0)}&gt;\n        zero\n      &lt;/button&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Kaikki toimii edelleen. Kun nappeja painetaan ja <em>App</em> renderöityy uudelleen, renderöityvät myös kaikki sen alikomponentit, siis myös <em>Display</em> automaattisesti uudelleen.</p>\n<p>Tehdään seuraavaksi napeille tarkoitettu komponentti <em>Button</em>. Napille on välitettävä propsien avulla tapahtumankäsittelijä sekä napin teksti:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const Button = (props) =&gt; (\n  &lt;button onClick={props.handleClick}&gt;\n    {props.text}\n  &lt;/button&gt;\n)</code></pre></div>\n<p>ja hyödynnetään taas destrukturointia ottamaan <em>props</em>:in tarpeelliset kentät suoraan:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const Button = ({ handleClick, text }) =&gt; (\n  &lt;button onClick={handleClick}&gt;\n    {text}\n  &lt;/button&gt;\n)</code></pre></div>\n<p>Komponentti <em>App</em> muuttuu nyt muotoon:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const App = (props) =&gt; {\n  const [ counter, setCounter ] = useState(0)\n\n  const setToValue = (value) =&gt; {\n    return () =&gt; {\n      setCounter(value)\n    }\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;Display counter={counter}/&gt;\n      &lt;Button\n        handleClick={setToValue(counter + 1)}\n        text=&#39;plus&#39;\n      /&gt;\n      &lt;Button\n        handleClick={setToValue(0)}\n        text=&#39;zero&#39;\n      /&gt;\n    &lt;/div&gt;\n  )\n}</code></pre></div>\n<p>Koska meillä on nyt uudelleenkäytettävä nappi, sovellukselle on lisätty uutena toiminnallisuutena nappi, jolla laskurin arvoa voi vähentää.</p>\n<p>Tapahtumankäsittelijä välitetään napeille propsin <em>handleClick</em> välityksellä. Propsin nimellä ei ole sinänsä merkitystä, mutta valinta ei ollut täysin sattumanvarainen, esim. Reactin <a href=\"https://reactjs.org/tutorial/tutorial.html\">tutoriaali</a> suosittelee tätä konventiota.</p>\n</div>","frontmatter":{"title":"osa 1","subTitle":"Komonentin tila ja tapahtumankäsittely","path":"/osa1/komponentin_tila","mainImage":{"publicURL":"/static/part-1-4336fcf032b41b5932e500b36479c2b4.svg"},"partColor":"green","part":1,"letter":"c"}}},"pageContext":{}}