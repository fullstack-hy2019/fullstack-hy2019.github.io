{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Olemme noudattaneet sovelluksen tilan hallinnassa Reactin suosittelemaa käytäntöä määritellä tila ja sitä käsittelevät metodit <a href=\"https://reactjs.org/docs/lifting-state-up.html\">sovelluksen juurikomponentissa</a>. Tilaa ja sitä käsitteleviä funktioita on välitetty propsien avulla niitä tarvitseville komponenteille. Tämä toimii johonkin pisteeseen saakka, mutta kun sovellusten koko kasvaa, muuttuu tilan hallinta haasteelliseksi.</p>\n<h3>Flux-arkkitehtuuri</h3>\n<p>Facebook kehitti tilan hallinnan ongelmia helpottamaan <a href=\"https://facebook.github.io/flux/docs/in-depth-overview.html#content\">Flux</a>-arkkitehtuurin. Fluxissa sovelluksen tilan hallinta erotetaan kokonaan Reactin komponenttien ulkopuolisiin varastoihin eli <i>storeihin</i>. Storessa olevaa tilaa ei muuteta suoraan, vaan tapahtumien eli <i>actionien</i> avulla.</p>\n<p>Kun action muuttaa storen tilaa, renderöidään näkymät uudelleen:</p>\n<img src=\"https://facebook.github.io/flux/img/flux-simple-f8-diagram-1300w.png\">\n<p>Jos sovelluksen käyttö, esim. napin painaminen aiheuttaa tarpeen tilan muutokseen, tehdään tilanmuutos actonin avulla. Tämä taas aiheuttaa uuden näytön renderöitymisen:</p>\n<img src=\"https://facebook.github.io/flux/img/flux-simple-f8-diagram-with-client-action-1300w.png\">\n<p>Flux tarjoaa siis standardin tavan sille miten ja missä sovelluksen tila pidetään sekä tavalle tehdä tilaan muutoksia.</p>\n<h3>Redux</h3>\n<p>Facebookilla on olemassa valmis toteutus Fluxille, käytämme kuitenkin saman periaatteen mukaan toimivaa, mutta hieman yksinkertaisempaa <a href=\"https://redux.js.org\">Redux</a>-kirjastoa, jota myös Facebookilla käytetään nykyään alkuperäisen Flux-toteutuksen sijaan.</p>\n<p>Tutustutaan Reduxiin tekemällä jälleen kerran laskurin toteuttava sovellus:</p>\n<picture><img src=\"/static/840092f1209e6650c1989aaf0c143817/14be6/1.png\" srcset=\"/static/840092f1209e6650c1989aaf0c143817/4cce7/1.png 200w,\n/static/840092f1209e6650c1989aaf0c143817/bae5f/1.png 400w,\n/static/840092f1209e6650c1989aaf0c143817/14be6/1.png 800w,\n/static/840092f1209e6650c1989aaf0c143817/1b35a/1.png 1200w,\n/static/840092f1209e6650c1989aaf0c143817/156ce/1.png 1364w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Tehdään uusi create-react-app-sovellus ja asennetaan siihen <i></i>redux</i> komennolla</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> redux --save</code></pre></div>\n<p>Fluxin tapaan Reduxissa sovelluksen tila talletetaan <a href=\"https://redux.js.org/basics/store\">storeen</a>.</p>\n<p>Koko sovelluksen tila talletetaan <i>yhteen</i> storen tallettamaan Javascript-objektiin. Koska sovelluksemme ei tarvitse mitään muuta tilaa kuin laskurin arvon, talletetaan se storeen suoraan. Jos sovelluksen tila olisi monipuolisempi, talletettaisiin \"eri asiat\" storessa olevaan olioon erillisinä kenttinä.</p>\n<p>Storen tilaa muutetaan <a href=\"https://redux.js.org/basics/actions\">actionien</a> avulla. Actionit ovat olioita, joilla on vähintään actionin <i>tyypin</i> määrittelevä kenttä <i>type</i>. Sovelluksessamme tarvitsemme esimerkiksi seuraavaa actionia:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'INCREMENT'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Jos actioneihin liittyy dataa, määritellään niille tarpeen vaatiessa muitakin kenttiä. Laskurisovelluksemme on kuitenkin niin yksinkertainen, että actioneille riittää pelkkä tyyppikenttä.</p>\n<p>Actionien vaikutus sovelluksen tilaan määritellään <a href=\"https://redux.js.org/basics/reducers\">reducerin</a> avulla. Käytännössä reducer on funktio, joka saa parametrikseen olemassaolevan staten tilan sekä actionin ja <i>palauttaa</i> staten uuden tilan.</p>\n<p>Määritellään nyt sovelluksellemme reduceri:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">counterReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'INCREMENT'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'DECREMENT'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> state <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'ZERO'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> state\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ensimmäinen parametri on siis storessa oleva <i>tila</i>. Reducer palauttaa <i>uuden tilan</i> actionin tyypin mukaan.</p>\n<p>Muutetaan koodia vielä hiukan. Reducereissa on tapana käyttää if:ien sijaan <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\">switch</a>-komentoa.\nMääritellään myös parametrille <i>state</i> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\">oletusarvoksi</a> 0. Näin reducer toimii vaikka store -tilaa ei olisi vielä alustettu.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">counterReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'INCREMENT'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'DECREMENT'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'ZERO'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">// jos ei mikään ylläolevista tullaan tänne</span>\n    <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Reduceria ei ole tarkoitus kutsua koskaan suoraan sovelluksen koodista. Reducer ainoastaan annetaan parametrina storen luovalle <em>createStore</em>-funktiolle:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">counterReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>counterReducer<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Store käyttää nyt reduceria käsitelläkseen <em>actioneja</em>, jotka <em>dispatchataan</em> eli \"lähetetään\" storelle sen <a href=\"https://redux.js.org/api-reference/store#dispatch-action\">dispatch</a>-metodilla:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'INCREMENT'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Storen tilan saa selville metodilla <a href=\"https://redux.js.org/api-reference/store#getstate\">getState</a>.</p>\n<p>Esim. seuraava koodi</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>counterReducer<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'INCREMENT'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'INCREMENT'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'INCREMENT'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'ZERO'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'DECREMENT'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>tulostaisi konsoliin</p>\n<pre>\n0\n3\n-1\n</pre>\n<p>sillä ensin storen tila on 0. Kolmen <i>INCREMENT</i>-actionin jälkeen tila on 3, ja lopulta actionien <i>ZERO</i> ja <i>DECREMENT</i> jälkeen -1.</p>\n<p>Kolmas tärkeä metodi storella on <a href=\"https://redux.js.org/api-reference/store#subscribe-listener\">subscribe</a>, jonka avulla voidaan määritellä takaisinkutsufunktioita, joita store kutsuu sen tilan muuttumisen yhteydessä.</p>\n<p>Jos esim. lisäisimme seuraavan funktion subscribellä, tulostuisi <i>jokainen storen muutos</i> konsoliin.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> storeNow <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>storeNow<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>eli koodi</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>counterReducer<span class=\"token punctuation\">)</span>\n\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> storeNow <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>storeNow<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'INCREMENT'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'INCREMENT'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'INCREMENT'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'ZERO'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'DECREMENT'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>aiheuttaisi tulostuksen</p>\n<pre>\n1\n2\n3\n0\n-1\n</pre>\n<p>Laskurisovelluksemme koodi on seuraavassa. Kaikki koodi on kirjoitettu samaan tiedostoon, jolloin <i>store</i> on suoraan React-koodin käytettävissä. Tutustumme React/Redux-koodin parempiin strukturointitapoihin myöhemmin.</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\nimport ReactDOM from &#39;react-dom&#39;\nimport { createStore } from &#39;redux&#39;\n\nconst counterReducer = (state = 0, action) =&gt; {\n  switch (action.type) {\n    case &#39;INCREMENT&#39;:\n      return state + 1\n    case &#39;DECREMENT&#39;:\n      return state - 1\n    case &#39;ZERO&#39;:\n      return 0\n    default:\n      return state\n  }\n}\n\nconst store = createStore(counterReducer)\n\nclass App extends React.Component {\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;div&gt;\n          {store.getState()}\n        &lt;/div&gt;\n        &lt;button onClick={e =&gt; store.dispatch({ type: &#39;INCREMENT&#39; })}&gt;\n          plus\n        &lt;/button&gt;\n        &lt;button onClick={e =&gt; store.dispatch({ type: &#39;DECREMENT&#39; })}&gt;\n          minus\n        &lt;/button&gt;\n        &lt;button onClick={e =&gt; store.dispatch({ type: &#39;ZERO&#39; })}&gt;\n          zero\n        &lt;/button&gt;\n      &lt;/div&gt;\n    )\n  }\n}\n\nconst renderApp = () =&gt; {\n  ReactDOM.render(&lt;App /&gt;, document.getElementById(&#39;root&#39;))\n}\n\nrenderApp()\nstore.subscribe(renderApp)</code></pre></div>\n<p>Koodissa on pari huomionarvoista seikkaa. <em>App</em> renderöi laskurin arvon kysymällä sitä storesta metodilla <em>store.getState()</em>. Nappien tapahtumankäsittelijät <em>dispatchaavat</em> suoraan oikean tyyppiset actionit storelle.</p>\n<p>Kun storessa olevan tilan arvo muuttuu, ei React osaa automaattisesti renderöidä sovellusta uudelleen. Olemmekin rekisteröineet koko sovelluksen renderöinnin suorittavan funktion <em>renderApp</em> kuuntelemaan storen muutoksia metodilla <em>store.subscribe</em>. Huomaa, että joudumme kutsumaan heti alussa metodia <em>renderApp()</em>, ilman kutsua sovelluksen ensimmäistä renderöintiä ei koskaan tapahdu.</p>\n<h2>Redux-muistiinpanot</h2>\n<p>Tavoitteenamme on muuttaa muistiinpanosovellus käyttämään tilanhallintaan Reduxia. Katsotaan kuitenkin ensin eräitä konsepteja hieman yksinkertaistetun muistiinpanosovelluksen kautta.</p>\n<p>Sovelluksen ensimmäinen versio seuraavassa</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const noteReducer = (state = [], action) =&gt; {\n  if (action.type === &#39;NEW_NOTE&#39;) {\n    state.push(action.data)\n    return state\n  }\n\n  return state\n}\n\nconst store = createStore(noteReducer)\n\nstore.dispatch({\n  type: &#39;NEW_NOTE&#39;,\n  data: {\n    content: &#39;sovelluksen tila talletetaan storeen&#39;,\n    important: true,\n    id: 1\n  }\n})\n\nstore.dispatch({\n  type: &#39;NEW_NOTE&#39;,\n  data: {\n    content: &#39;tilanmuutokset tehdään actioneilla&#39;,\n    important: false,\n    id: 2\n  }\n})\n\nclass App extends React.Component {\n  render() {\n    return(\n      &lt;div&gt;\n        &lt;ul&gt;\n          {store.getState().map(note=&gt;\n            &lt;li key={note.id}&gt;\n              {note.content} &lt;strong&gt;{note.important ? &#39;tärkeä&#39; : &#39;&#39;}&lt;/strong&gt;\n            &lt;/li&gt;\n          )}\n         &lt;/ul&gt;\n      &lt;/div&gt;\n    )\n  }\n}</code></pre></div>\n<p>Toistaiseksi sovelluksessa ei siis ole toiminnallisuutta uusien muistiinpanojen lisäämiseen, voimme kuitenkin tehdä sen dispatchaamalla <em>NEW</em>NOTE_-tyyppisiä actioneja koodista.</p>\n<p>Actioneissa on nyt tyypin lisäksi kenttä <em>data</em>, joka sisältää lisättävän muistiinpanon:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'NEW_NOTE'</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    content<span class=\"token punctuation\">:</span> <span class=\"token string\">'tilanmuutokset tehdään actioneilla'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>puhtaat funktiot, immutable</h3>\n<p>Reducerimme alustava versio on yksinkertainen:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'NEW_NOTE'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    state<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> state\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tila on nyt taulukko. <em>NEW</em>NOTE<em>-tyyppisen actionin seurauksena tilaan lisätään uusi muistiinpano metodilla [push](<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global</a></em>Objects/Array/push).</p>\n<p>Sovellus näyttää toimivan, mutta määrittelemämme reduceri on huono, se rikkoo Reduxin reducerien <a href=\"https://github.com/reactjs/redux/blob/master/docs/basics/Reducers.md#handling-actions\">perusolettamusta</a> siitä, että reducerien tulee olla <a href=\"https://en.wikipedia.org/wiki/Pure_function\">puhtaita funktioita</a>.</p>\n<p>Puhtaat funktiot ovat sellaisia, että ne <em>eivät aiheuta mitään sivuvaikutuksia</em> ja niiden tulee aina palauttaa sama vastaus samoilla parametreilla kutsuttaessa.</p>\n<p>Lisäsimme tilaan uuden muistiinpanon metodilla <em>state.push(action.data)</em> joka <em>muuttaa</em> state-olion tilaa. Tämä ei ole sallittua. Ongelma korjautuu helposti käyttämällä metodia <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">concat</a>, joka luo <em>uuden taulukon</em>, jonka sisältönä on vanhan taulukon alkiot sekä lisättävä alkio:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'NEW_NOTE'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> state\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Reducen tilan tulee koostua muuttumattomista eli <a href=\"https://en.wikipedia.org/wiki/Immutable_object\">immutable</a> olioista. Jos tilaan tulee muutos, ei vanhaa oliota muuteta, vaan se <em>korvataan uudella muuttuneella oliolla</em>. Juuri näin toimimme uudistuneessa reducerissa, vanha taulukko korvaantuu uudella.</p>\n<p>Laajennetaan reduceria siten, että se osaa käsitellä muistiinpanon tärkeyteen liittyvän muutoksen:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'TOGGLE_IMPORTANCE'</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Koska meillä ei ole vielä koodia joka käyttää ominaisuutta, laajennetaan reduceria testivetoisesti. Aloitetaan tekemällä testi actionin <em>NEW</em>NOTE_ käsittelylle.</p>\n<p>Jotta testaus olisi helpompaa, siirretään reducerin koodi ensin omaan moduuliinsa tiedostoon <em>src/noteReducer.js</em>. Otetaan käyttöön myös kirjasto <a href=\"https://github.com/substack/deep-freeze\">deep-freeze</a>, jonka avulla voimme varmistaa, että reducer on määritelty oikeaoppisesti puhtaana funktiona. Asennetaan kirjasto kehitysaikaiseksi riippuvuudeksi</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev deep<span class=\"token operator\">-</span>freeze</code></pre></div>\n<p>Testi on seuraavassa:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> noteReducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./noteReducer'</span>\n<span class=\"token keyword\">import</span> deepFreeze <span class=\"token keyword\">from</span> <span class=\"token string\">'deep-freeze'</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'noteReducer'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returns new state with action NEW_NOTE'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> action <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">'NEW_NOTE'</span><span class=\"token punctuation\">,</span>\n      data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        content<span class=\"token punctuation\">:</span> <span class=\"token string\">'sovelluksen tila talletetaan storeen'</span><span class=\"token punctuation\">,</span>\n        important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">deepFreeze</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> newState <span class=\"token operator\">=</span> <span class=\"token function\">noteReducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContainEqual</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Komento <em>deepFreeze(state)</em> varmistaa, että reducer ei muuta parametrina olevaa storen tilaa. Jos reduceri käyttää state:n manipulointiin komentoa <em>push</em>, testi ei mene läpi</p>\n<p>![]({{ \"/assets/5/11.png\" | absolute_url }})</p>\n<p>Tehdään sitten testi actionin <em>TOGGLE</em>IMPORTANCE_ käsittelylle:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'returns new state with action TOGGLE_IMPORTANCE'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      content<span class=\"token punctuation\">:</span> <span class=\"token string\">'sovelluksen tila talletetaan storeen'</span><span class=\"token punctuation\">,</span>\n      important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      content<span class=\"token punctuation\">:</span> <span class=\"token string\">'tilanmuutokset tehdään actioneilla'</span><span class=\"token punctuation\">,</span>\n      important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">const</span> action <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'TOGGLE_IMPORTANCE'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">deepFreeze</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> newState <span class=\"token operator\">=</span> <span class=\"token function\">noteReducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContainEqual</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContainEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    content<span class=\"token punctuation\">:</span> <span class=\"token string\">'tilanmuutokset tehdään actioneilla'</span><span class=\"token punctuation\">,</span>\n    important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Reduceri laajenee seuraavasti</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'NEW_NOTE'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'TOGGLE_IMPORTANCE'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>id\n      <span class=\"token keyword\">const</span> noteToChange <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> changedNote <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>noteToChange<span class=\"token punctuation\">,</span> important<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>noteToChange<span class=\"token punctuation\">.</span>important <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>note <span class=\"token operator\">=></span> note<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id <span class=\"token operator\">?</span> note <span class=\"token punctuation\">:</span> changedNote <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Luomme tärkeyttä muuttaneesta muistiinpanosta kopion osasta 2 <a href=\"/osa2#muistiinpanon-t%C3%A4rkeyden-muutos\">tutulla syntaksilla</a> ja korvaamme tilan uudella tilalla, mihin otetaan muuttumattomat muistiinpanot ja muutettavasta sen muutettu kopio <em>changedNote</em>.</p>\n<h3>array spread -syntaksi</h3>\n<p>Koska reducerilla on nyt suhteellisen hyvät testit, voimme refaktoroida koodia turvallisesti.</p>\n<p>Uuden muistiinpanon lisäys luo palautettavan tilan taulukon <em>concat</em>-funktiolla. Katsotaan nyt miten voimme toteuttaa saman hyödyntämällä Javascriptin <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\">array spread</a> -syntaksia:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">noteReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'NEW_NOTE'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'TOGGLE_IMPORTANCE'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Spread-syntaksi toimii seuraavasti. Jos määrittelemme</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> luvut <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>niin <code>...luvut</code> hajottaa taulukon yksittäisiksi alkioiksi, eli voimme sijoittaa sen esim, toisen taulukon sisään:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>luvut<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>ja lopputuloksena on taulukko, jonka sisältö on <em>[1, 2, 3, 4, 5]</em>.</p>\n<p>Jos olisimme sijoittaneet taulukon toisen sisälle ilman spreadia, eli</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>luvut<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>lopputulos olisi ollut <em>[ [1, 2, 3], 4, 5]</em>.</p>\n<p>Samannäköinen syntaksi toimii taulukosta <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">destrukturoimalla</a> alkioita otettaessa siten, että se <em>kerää</em> loput alkiot:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> luvut <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>eka<span class=\"token punctuation\">,</span> toka<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>loput<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> luvut\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>eka<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// tulostuu 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>toka<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// tulostuu 2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>loput<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// tulostuu [3, 4, 5, 6]</span></code></pre></div>\n<h2>Tehtäviä</h2>\n<p>Tee nyt tehtävät <a href=\"/teht%C3%A4v%C3%A4t#redux-unicafe\">5.17 ja 5.18</a></p>\n<h3>Lisää toiminnallisuutta ja ei-kontrolloitu lomake</h3>\n<p>Lisätään sovellukseen mahdollisuus uusien muistiinpanojen tekemiseen sekä tärkeyden muuttamiseen:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const generateId = () =&gt; Number((Math.random() * 1000000).toFixed(0))\n\nclass App extends React.Component {\n  addNote = (event) =&gt; {\n    event.preventDefault()\n    const content = event.target.note.value\n    store.dispatch({\n      type: &#39;NEW_NOTE&#39;,\n      data: {\n        content: content,\n        important: false,\n        id: generateId()\n      }\n    })\n    event.target.note.value = &#39;&#39;\n  }\n  toggleImportance = (id) =&gt; () =&gt; {\n    store.dispatch({\n      type: &#39;TOGGLE_IMPORTANCE&#39;,\n      data: { id }\n    })\n  }\n  render() {\n    return(\n      &lt;div&gt;\n        &lt;form onSubmit={this.addNote}&gt;\n          &lt;input name=&quot;note&quot; /&gt;\n          &lt;button type=&quot;submit&quot;&gt;lisää&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul&gt;\n          {store.getState().map(note=&gt;\n            &lt;li key={note.id} onClick={this.toggleImportance(note.id)}&gt;\n              {note.content} &lt;strong&gt;{note.important ? &#39;tärkeä&#39; : &#39;&#39;}&lt;/strong&gt;\n            &lt;/li&gt;\n          )}\n         &lt;/ul&gt;\n      &lt;/div&gt;\n    )\n  }\n}</code></pre></div>\n<p>Molemmat toiminnallisuudet on toteutettu suoraviivaisesti. Huomionarvoista uuden muistiinpanon lisäämisessä on nyt se, että toisin kuin aiemmat Reactilla toteutetut lomakkeet, emme ole nyt sitoneet lomakkeen kentän arvoa komponentin <em>App</em> tilaan. React kutsuu tälläisiä lomakkeita <a href=\"https://reactjs.org/docs/uncontrolled-components.html\">ei-kontrolloiduiksi</a>.</p>\n<blockquote>\n<p>Ei-kontrolloiduilla lomakkeilla on tiettyjä rajoitteita (ne eivät esim. mahdollista lennossa annettavia validointiviestejä, lomakkeen lähetysnapin disabloimista sisällön perusteella ym...), meidän käyttötapaukseemme ne kuitenkin tällä kertaa sopivat.\nVoit halutessasi lukea aiheesta enemmän <a href=\"https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/\">täältä</a>.</p>\n</blockquote>\n<p>Muistiinpanon lisäämisen käsittelevä metodi on yksinkertainen, se ainoastaan dispatchaa muistiinpanon lisäävän actionin:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">.</span>value\n  store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'NEW_NOTE'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      content<span class=\"token punctuation\">:</span> content<span class=\"token punctuation\">,</span>\n      important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      id<span class=\"token punctuation\">:</span> <span class=\"token function\">generateId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Uuden muistiinpanon sisältö saadaan suoraan lomakkeen syötekentästä, johon kentän nimeämisen ansiosta päästään käsiksi tapahtumaolion kautta <em>event.target.note.value</em></p>\n<p>Tärkeyden muuttaminen tapahtuu klikkaamalla muistiinpanon nimeä. Käsittelijä on erittäin yksinkertainen:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">toggleImportance</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'TOGGLE_IMPORTANCE'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kyseessä on jälleen tuttu <em>funktio, joka palauttaa funktion</em>, eli kullekin muistiinpanolle generoituu käsittelijäksi funktio, jolla on muistiinpanon yksilöllinen id. Esim. jos id olisi 12345, käsittelijä olisi seuraava:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'TOGGLE_IMPORTANCE'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">12345</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>action creatorit</h3>\n<p>Alamme huomata, että jo näinkin yksinkertaisessa sovelluksessa Reduxin käyttö yksinkertaistaa sovelluksen ulkoasusta vastaavaa koodia melkoisesti. React-komponenttien on oikeastaan tarpeetonta tuntea reduxin actionien tyyppejä ja esitysmuotoja. Eristetään ne erilliseen olioon, jonka metodit ovat <a href=\"https://redux.js.org/advanced/async-actions#synchronous-action-creators\">action creatoreja</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> actionFor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">noteCreation</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">'NEW_NOTE'</span><span class=\"token punctuation\">,</span>\n      data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        content<span class=\"token punctuation\">,</span>\n        important<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        id<span class=\"token punctuation\">:</span> <span class=\"token function\">generateId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">importanceToggling</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token punctuation\">:</span> <span class=\"token string\">'TOGGLE_IMPORTANCE'</span><span class=\"token punctuation\">,</span>\n      data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Komponentin <em>App</em> ei tarvitse enää tietää mitään actionien sisäisestä esitystavasta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">addNote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>\n      actionFor<span class=\"token punctuation\">.</span><span class=\"token function\">noteCreation</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>note<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">toggleImportance</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>\n      actionFor<span class=\"token punctuation\">.</span><span class=\"token function\">importanceToggling</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>staten välittäminen propseissa ja contextissa</h3>\n<p>Sovelluksemme on reduceria lukuunottamatta tehty samaan tiedostoon. Kyseessä ei tietenkään ole järkevä käytäntö, eli on syytä eriyttää <em>App</em> omaan moduuliinsa.</p>\n<p>Herää kuitenkin kysymys miten <em>App</em> pääsee muutoksen jälkeen käsiksi <em>storeen</em>? Ja yleisemminkin, kun komponentti koostuu suuresta määrästä komponentteja, tulee olla jokin mekanismi, minkä avulla komponentit pääsevät käsiksi storeen.</p>\n<p>Tapoja on muutama, käsitellään tässä osassa kahta helpoimmin ymmärrettävää. Parhaan tavan eli kirjaston React-redux määrittelevän <a href=\"https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options\">connect</a>-metodin säästämme seuraavaan osaan, sillä se on hieman abstrakti ja on kenties hyvä totutella Reduxiin aluksi ilman connectin tuomia käsitteellisiä haasteita.</p>\n<p>Yksinkertaisin vaihtoehto on välittää store propsien avulla. Sovelluksen käynnistyspiste <em>index.js</em> typistyy seuraavasti</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\nimport ReactDOM from &#39;react-dom&#39;\nimport { createStore } from &#39;redux&#39;\nimport App from &#39;./App&#39;\nimport noteReducer from &#39;./noteReducer&#39;\n\nconst store = createStore(noteReducer)\n\nconst render = () =&gt; {\n  ReactDOM.render(&lt;App store={store}/&gt;,\n  document.getElementById(&#39;root&#39;))\n}\n\nrender()\nstore.subscribe(render)</code></pre></div>\n<p>Muutos omaan moduuliinsa eriytettyyn komponenttiin <em>App</em> on pieni, storeen viitataan <em>propsien</em> kautta <code>this.props.store</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">import React from &#39;react&#39;\nimport actionFor from &#39;./actionCreators&#39;\n\nclass App extends React.Component {\n  addNote = (event) =&gt; {\n    event.preventDefault()\n    this.props.store.dispatch(\n      actionFor.noteCreation(event.target.note.value)\n    )\n    event.target.note.value = &#39;&#39;\n  }\n  toggleImportance = (id) =&gt; () =&gt; {\n    this.props.store.dispatch(\n      actionFor.importanceToggling(id)\n    )\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;form onSubmit={this.addNote}&gt;\n          &lt;input name=&quot;note&quot; /&gt;\n          &lt;button type=&quot;submit&quot;&gt;lisää&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;ul&gt;\n          {this.props.store.getState().map(note =&gt;\n            &lt;li key={note.id} onClick={this.toggleImportance(note.id)}&gt;\n              {note.content} &lt;strong&gt;{note.important ? &#39;tärkeä&#39; : &#39;&#39;}&lt;/strong&gt;\n            &lt;/li&gt;\n          )}\n        &lt;/ul&gt;\n      &lt;/div&gt;\n    )\n  }\n}\n\nexport default App</code></pre></div>\n<p>Jos sovelluksessa on enemmän storea tarvitsevia komponentteja, tulee <em>App</em>-komponentin välittää <i>store</i> propseina kaikille sitä tarvitseville komponenteille.</p>\n<p>Eriytetään uuden muistiinpanon luominen sekä muistiinpanojen lista ja yksittäisen muistiinpanon esittäminen omiksi komponenteiksi:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">class NoteForm extends React.Component {\n  addNote = (event) =&gt; {\n    event.preventDefault()\n    this.props.store.dispatch(\n      actionFor.noteCreation(event.target.note.value)\n    )\n    event.target.note.value = &#39;&#39;\n  }\n  render() {\n    return(\n      &lt;form onSubmit={this.addNote}&gt;\n        &lt;input name=&quot;note&quot; /&gt;\n        &lt;button&gt;lisää&lt;/button&gt;\n      &lt;/form&gt;\n    )\n  }\n}\n\nconst Note = ({note, handleClick}) =&gt; {\n  return(\n    &lt;li onClick={handleClick}&gt;\n      {note.content} &lt;strong&gt;{note.important ? &#39;tärkeä&#39; : &#39;&#39;}&lt;/strong&gt;\n    &lt;/li&gt;\n  )\n}\n\nclass NoteList extends React.Component {\n  toggleImportance = (id) =&gt; () =&gt; {\n    this.props.store.dispatch(\n      actionFor.importanceToggling(id)\n    )\n  }\n  render() {\n    return(\n      &lt;ul&gt;\n        {this.props.store.getState().map(note =&gt;\n          &lt;Note\n            key={note.id}\n            note={note}\n            handleClick={this.toggleImportance(note.id)}\n          /&gt;\n        )}\n      &lt;/ul&gt;\n    )\n  }\n}</code></pre></div>\n<p>Komponenttiin <em>App</em> ei jää enää paljoa koodia:</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">class App extends React.Component {\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;NoteForm store={this.props.store} /&gt;\n        &lt;NoteList store={this.props.store} /&gt;\n      &lt;/div&gt;\n    )\n  }\n}</code></pre></div>\n<p>Toisin kuin aiemmin ilman Reduxia tekemässämme React-koodissa, tapahtumankäsittelijät on nyt siirretty pois <em>App</em>-komponentista. Yksittäisen muistiinpanon renderöinnistä huolehtiva <em>Note</em> on erittäin yksinkertainen, eikä ole tietoinen siitä, että sen propsina saama tapahtumankäsittelijä dispatchaa actionin. Tälläisiä komponentteja kutsutaan Reactin terminologiassa <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\">presentational</a>-komponenteiksi.</p>\n<p><em>NoteList</em> taas on sellainen mitä kutsutaan <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\">container</a>-komponenteiksi, se sisältää sovelluslogiikkaa, eli määrittelee mitä <em>Note</em>-komponenttien tapahtumankäsittelijät tekevät ja koordinoi <em>presentational</em>-komponenttien, eli <em>Notejen</em> konfigurointia.</p>\n<p>Palaamme presentational/container-jakoon tarkemmin seuraavassa osassa.</p>\n<p><em>storen</em> välittäminen sitä tarvitseviin komponentteihin propsien avulla on melko ikävää. Vaikka <em>App</em> ei itse tarvitse storea, sen on otettava store vastaan, pystyäkseen välittämään sen edelleen komponenteille <em>NoteForm</em> ja <em>NoteList</em>.</p>\n<p>Redux-sovelluksen tämänhetkinen koodi on kokonaisuudessaan <a href=\"https://github.com/FullStack-HY/redux-notes/tree/part5-6\">githubissa</a>, tagissa <em>part5-6</em>.</p>\n<p>Egghead.io:ssa on ilmaiseksi saatavilla Reduxin kehittäjän Dan Abramovin loistava tutoriaali <a href=\"https://egghead.io/courses/getting-started-with-redux\">Getting started with Redux</a>. Neljässä viimeisessä videossa käytettävää <em>connect</em>-metodia käsittelemme vasta kurssin seuraavassa osassa.</p>\n<h2>Tehtäviä</h2>\n<p>Tee nyt tehtävät <a href=\"/teht%C3%A4v%C3%A4t#redux-anekdootit\">5.19-5.21</a></p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/part-6-d6924a30e54668b01a539aa7bc2db9e8.svg"},"part":6,"letter":"a"}}},"pageContext":{"part":6,"letter":"a"}}