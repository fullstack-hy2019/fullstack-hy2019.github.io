{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Alamme nyt tutustua kurssin ehkä tärkeimpään teemaan, <a href=\"https://reactjs.org/\">React</a>-kirjastoon. Tehdään heti yksinkertainen React-sovellus ja tutustutaan samalla Reactin peruskäsitteistöön.</p>\n<p>Ehdottomasti helpoin tapa päästä alkuun on <a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a>-nimisen työkalun käyttö. <em>create-react-app</em> on mahdollista asentaa omalle koneelle, mutta asennukseen ei ole tarvetta jos Noden mukana asentunut <em>npm</em>-työkalu on versioltaan vähintään <em>5.3</em>. Tällöin npm:n mukana asentuu komento <em>npx</em>, joka mahdollistaa create-react-app:in käytön asentamatta sitä erikseen. Npm:n version saa selville komennolla <em>npm -v</em>.</p>\n<p>Luodaan sovellus nimeltään <em>osa1</em> ja mennään sovelluksen sisältämään hakemistoon:</p>\n<pre>\n$ npx create-react-app osa1\n$ cd osa1\n$ npm start\n</pre>\n<p>Kaikki tässä (ja jatkossa) annettavat merkillä $ alkavat komennot on kirjoitettu terminaaliin eli komentoriville. Merkkiä $ tule kirjoittaa, sillä se edustaa komentokehoitetta.</p>\n<p>React on koko ajan aktiivisen kehityksen alla. Tämän vuoden ensimmäisen neljänneksen aikana Reactiin on tulossa erittäin merkittävä lisäys <a href=\"https://reactjs.org/docs/hooks-intro.html\">hookit</a> jotka tulevat vaikuttamaan merkittävästi siihen miten Reactia tullaan tulevaisuudessa käyttämään. Koska haluamme elää kehityksen eturintamassa käytämme kurssilla hookeja alusta asti. </p>\n<p>Hookit eivät ole vielä Reactin uusimmassa virallisessa julkaisussa 0.16.7, mutta ne löytyvät hieman <a href=\"https://reactjs.org/blog/2018/12/19/react-v-16-7.html\">erikoisesti numeroidusta</a> julkaisusta 0.16.7-alpha.2</p>\n<p>Saamme hookit käyttöön antamalla seuraavan komenon sovelluksen sisältävässä hakemistossa:</p>\n<pre>\nnpm install -s react@16.7.0-alpha.2 react-dom@16.7.0-alpha.2\n</pre>\n<p>Joudumme siis ainakin alkuvuoden ajan antamaan aina edellisen komennon kun aloitamme uuden React-projektin.</p>\n<p>Sovellus käynnistetään seuraavasti</p>\n<pre>\n$ npm start\n</pre>\n<p>Sovellus käynnistyy oletusarvoisesti localhostin porttiin 3000, eli osoitteeseen <a href=\"http://localhost:3000\">http://localhost:3000</a></p>\n<p>Chromen pitäisi aueta automaattisesti. Avaa konsoli <strong>välittömästi</strong>. Avaa myös tekstieditori siten, että näet koodin ja web-sivun samaan aikaan ruudulla:</p>\n<picture><img src=\"/static/1a6e78155c5ac2c56ba6fd327ef9555f/14be6/1a.png\" srcset=\"/static/1a6e78155c5ac2c56ba6fd327ef9555f/4cce7/1a.png 200w,\n/static/1a6e78155c5ac2c56ba6fd327ef9555f/bae5f/1a.png 400w,\n/static/1a6e78155c5ac2c56ba6fd327ef9555f/14be6/1a.png 800w,\n/static/1a6e78155c5ac2c56ba6fd327ef9555f/1b35a/1a.png 1200w,\n/static/1a6e78155c5ac2c56ba6fd327ef9555f/9ee03/1a.png 1600w,\n/static/1a6e78155c5ac2c56ba6fd327ef9555f/64929/1a.png 2222w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Sovelluksen koodi on hakemistossa <em>src</em>. Yksinkertaistetaan valmiina olevaa koodia siten, että tiedoston <em>index.js</em> sisällöksi tulee:</p>\n<pre><code class=\"language-react\">import React from 'react'\nimport ReactDOM from 'react-dom'\n\nconst App = () => (\n  &#x3C;div>\n    &#x3C;p>Hello world&#x3C;/p>\n  &#x3C;/div>\n)\n\nReactDOM.render(&#x3C;App />, document.getElementById('root'))\n</code></pre>\n<p>Tiedostot <em>App.js</em>, <em>App.css</em>, <em>App.test.js</em>, <em>logo.svg</em> ja <em>registerServiceWorker.js</em> voi poistaa sillä niitä emme sovelluksessamme nyt tarvitse.</p>\n<h3>Komponentti</h3>\n<p>Tiedosto <em>index.js</em> määrittelee nyt React-<a href=\"https://reactjs.org/docs/components-and-props.html\">komponentin</a> nimeltään <em>App</em> ja viimeisen rivin komento</p>\n<pre><code class=\"language-react\">ReactDOM.render(&#x3C;App />, document.getElementById('root'))\n</code></pre>\n<p>renderöi komponentin sisällön tiedoston <em>public/index.html</em> määrittelemään <em>div</em>-elementtiin, jonka <em>id:n</em> arvona on 'root'</p>\n<p>Tiedosto <em>public/index.html</em> on oleellisesti ottaen tyhjä, voit kokeilla lisätä sinne HTML:ää. Reactilla ohjelmoitaessa yleensä kuitenkin kaikki renderöitävä sisältö määritellään Reactin komponenttien avulla.</p>\n<p>Tarkastellaan vielä tarkemmin komponentin määrittelevää koodia:</p>\n<pre><code class=\"language-react\">const App = () => (\n  &#x3C;div>\n    &#x3C;p>Hello world&#x3C;/p>\n  &#x3C;/div>\n)\n</code></pre>\n<p>Kuten arvata saattaa, komponentti renderöityy <em>div</em>-tagina, jonka sisällä on <em>p</em>-tagin sisällä oleva teksti <em>Hello world</em>.</p>\n<p>Teknisesti ottaen komponentti on määritelty Javascript-funktiona. Seuraava siis on funktio (joka ei saa yhtään parametria):</p>\n<pre><code class=\"language-react\">() => (\n  &#x3C;div>\n    &#x3C;p>Hello world&#x3C;/p>\n  &#x3C;/div>\n)\n</code></pre>\n<p>joka sijoitetaan vakioarvoiseen muuttujaan <em>App</em></p>\n<pre><code class=\"language-js\">const App = ...\n</code></pre>\n<p>Javascriptissa on muutama tapa määritellä funktioita. Käytämme nyt Javascriptin hieman uudemman version <a href=\"http://es6-features.org/#Constants\">EcmaScript 6:n</a> eli ES6:n <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">nuolifunktiota</a> (arrow functions).</p>\n<p>Koska funktio koostuu vain yhdestä lausekkeesta, on käytössämme lyhennysmerkintä, joka vastaa oikeasti seuraavaa koodia:</p>\n<pre><code class=\"language-react\">const App = () => {\n  return (\n    &#x3C;div>\n      &#x3C;p>Hello world&#x3C;/p>\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>eli funktio palauttaa sisältämänsä lausekkeen arvon.</p>\n<p>Komponentin määrittelevä funktio voi sisältää mitä tahansa Javascript-koodia. Muuta komponenttisi seuraavaan muotoon ja katso mitä konsolissa tapahtuu:</p>\n<pre><code class=\"language-react\">const App = () => {\n  console.log('Hello from komponentti')\n  return (\n    &#x3C;div>\n      &#x3C;p>Hello world&#x3C;/p>\n    &#x3C;/div>\n  )}\n</code></pre>\n<p>Komponenttien sisällä on mahdollista renderöidä myös dynaamista sisältöä.</p>\n<p>Muuta komponentti muotoon:</p>\n<pre><code class=\"language-react\">const App = () => {\n  const now = new Date()\n  const a = 10\n  const b = 20\n  return (\n    &#x3C;div>\n      &#x3C;p>Hello world, it is {now.toString()}&#x3C;/p>\n      &#x3C;p>{a} plus {b} is {a + b}&#x3C;/p>\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>Aaltosulkeiden sisällä oleva Javascript-koodi evaluoidaan ja evaluoinnin tulos upotetaan määriteltyyn kohtaan komponentin tuottamaa HTML-koodia.</p>\n<h3>JSX</h3>\n<p>Näyttää siltä, että React-komponentti palauttaa HTML-koodia. Näin ei kuitenkaan ole. React-komponenttien ulkoasu kirjoitetaan yleensä <a href=\"https://reactjs.org/docs/introducing-jsx.html\">JSX</a>:ää käyttäen. Vaikka JSX näyttää HTML:ltä, kyseessä on kuitenkin tapa kirjoittaa Javascriptiä. React komponenttien palauttama JSX käännetään konepellin alla Javascriptiksi.</p>\n<p>Käännösvaiheen jälkeen ohjelmamme näyttää seuraavalta:</p>\n<pre><code class=\"language-js\">import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst App = () => {\n  const now = new Date();\n  const a = 10;\n  const b = 20;\n  return React.createElement(\n    'div',\n    null,\n    React.createElement('p', null, 'Hello world, it is ', now.toString()),\n    React.createElement('p', null, a, ' plus ', b, ' is ', a + b)\n  );\n};\n\nReactDOM.render(\n  React.createElement(App, null),\n  document.getElementById('root')\n);\n</code></pre>\n<p>Käännöksen hoitaa <a href=\"https://babeljs.io/repl/\">Babel</a>. Create-react-app:illa luoduissa projekteissa käännös on konfiguroitu tapahtumaan automaattisesti. Tulemme tutustumaan aiheeseen tarkemmin kurssin <a href=\"/osa7\">osassa 7</a>.</p>\n<p>Reactia olisi myös mahdollista kirjoittaa \"suoraan Javascriptinä\" käyttämättä JSX:ää. Kukaan täysijärkinen ei kuitenkaan niin tee.</p>\n<p>Käytännössä JSX on melkein kuin HTML:ää sillä erotuksella, että mukaan voi upottaa helposti dynaamista sisältöä kirjoittamalla sopivaa Javascriptiä aaltosulkeiden sisälle. Idealtaan JSX on melko lähellä monia palvelimella käytettäviä templating-kieliä kuten Java Springin yhteydessä käytettävää thymeleafia.</p>\n<p>JSX on \"XML:n kaltainen\", eli jokainen tagi tulee sulkea. Esimerkiksi rivinvaihto on tyhjä elementti, joka kirjoitetaan HTML:ssä tyypillisesti</p>\n<pre><code class=\"language-html\">&#x3C;br>\n</code></pre>\n<p>mutta JSX:ää kirjoittaessa tagi on pakko sulkea:</p>\n<pre><code class=\"language-html\">&#x3C;br />\n</code></pre>\n<h2>Monta komponenttia</h2>\n<p>Muutetaan sovellusta seuraavasti (yläreunan importit jätetään <em>esimerkeistä</em> nyt ja jatkossa pois, niiden on kuitenkin oltava koodissa jotta ohjelma toimisi):</p>\n<pre><code class=\"language-react\">const Hello = () => {\n  return (\n    &#x3C;div>\n      &#x3C;p>Hello world&#x3C;/p>\n    &#x3C;/div>\n  )\n}\n\nconst App = () => {\n  return (\n    &#x3C;div>\n      &#x3C;h1>Greetings&#x3C;/h1>\n      &#x3C;Hello />\n    &#x3C;/div>\n  )\n}\n\nReactDOM.render(&#x3C;App />, document.getElementById('root'))\n</code></pre>\n<p>Olemme määritelleet uuden komponentin <em>Hello</em>, jota käytetään komponentista <em>App</em>. Komponenttia voidaan luonnollisesti käyttää monta kertaa:</p>\n<pre><code class=\"language-react\">const App = () => {\n  return (\n    &#x3C;div>\n      &#x3C;h1>Greetings&#x3C;/h1>\n      &#x3C;Hello />\n      &#x3C;Hello />\n      &#x3C;Hello />\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>Komponenttien tekeminen Reactissa on helppoa ja komponentteja yhdistelemällä monimutkaisempikin sovellus on mahdollista pitää kohtuullisesti ylläpidettävänä. Reactissa filosofiana onkin koostaa sovellus useista, pieneen asiaan keskittyvistä uudelleenkäytettävistä komponenteista.</p>\n<h2>props: tiedonvälitys komponenttien välillä</h2>\n<p>Komponenteille on mahdollista välittää dataa <a href=\"https://reactjs.org/docs/components-and-props.html\">propsien</a> avulla.</p>\n<p>Muutetaan komponenttia <em>Hello</em> seuraavasti</p>\n<pre><code class=\"language-react\">const Hello = (props) => {\n  return (\n    &#x3C;div>\n      &#x3C;p>Hello {props.name}&#x3C;/p>\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>komponentin määrittelevällä funktiolla on nyt parametri <em>props</em>. Parametri saa arvokseen olion, jonka kenttinä ovat kaikki eri \"propsit\", jotka komponentin käyttäjä määrittelee.</p>\n<p>Propsit määritellään seuraavasti:</p>\n<pre><code class=\"language-react\">const App = () => {\n  return (\n    &#x3C;div>\n      &#x3C;h1>Greetings&#x3C;/h1>\n      &#x3C;Hello name=\"Arto\" />\n      &#x3C;Hello name=\"Pekka\" />\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>Propseja voi olla mielivaltainen määrä ja niiden arvot voivat olla \"kovakoodattuja\" merkkijonoja tai Javascript-lausekkeiden tuloksia. Jos propsin arvo muodostetaan Javascriptillä, tulee se olla aaltosulkeissa.</p>\n<p>Muutetaan koodia siten, että komponentti <em>Hello</em> käyttää kahta propsia:</p>\n<pre><code class=\"language-react\">const Hello = (props) => {\n  return (\n    &#x3C;div>\n      &#x3C;p>Hello {props.name}, you are {props.age} years old&#x3C;/p>\n    &#x3C;/div>\n  )\n}\n\nconst App = () => {\n  const nimi = 'Pekka'\n  const ika = 10\n\n  return (\n    &#x3C;div>\n      &#x3C;h1>Greetings&#x3C;/h1>\n      &#x3C;Hello name=\"Arto\" age={26 + 10} />\n      &#x3C;Hello name={nimi} age={ika} />\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>Komponentti <em>App</em> lähettää propseina muuttujan arvoja, summalausekkeen evaluoinnin tuloksen ja normaalin merkkijonon.</p>\n<h3>Muutamia huomioita</h3>\n<p>React on konfiguroitu antamaan varsin hyviä virheilmoituksia. Kannattaa kuitenkin edetä ainakin alussa <strong>todella pienin askelin</strong> ja varmistaa, että jokainen muutos toimii halutulla tavalla.</p>\n<p><strong>Konsolin tulee olla koko ajan auki</strong>. Jos selain ilmoittaa virheestä, ei kannata kirjoittaa sokeasti lisää koodia ja toivoa ihmettä tapahtuvaksi, vaan tulee yrittää ymmärtää virheen syy ja esim. palata edelliseen toimivaan tilaan:</p>\n<picture><img src=\"/static/d6976fc68cf1d476dfdad2730e4614d5/14be6/2a.png\" srcset=\"/static/d6976fc68cf1d476dfdad2730e4614d5/4cce7/2a.png 200w,\n/static/d6976fc68cf1d476dfdad2730e4614d5/bae5f/2a.png 400w,\n/static/d6976fc68cf1d476dfdad2730e4614d5/14be6/2a.png 800w,\n/static/d6976fc68cf1d476dfdad2730e4614d5/1b35a/2a.png 1200w,\n/static/d6976fc68cf1d476dfdad2730e4614d5/9ee03/2a.png 1600w,\n/static/d6976fc68cf1d476dfdad2730e4614d5/7d462/2a.png 2140w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Kannattaa myös muistaa, että React-koodissakin on mahdollista ja kannattavaa lisätä koodin sekaan sopivia konsoliin tulostavia <code>console.log()</code>-komentoja. Tulemme hieman <a href=\"#react-sovellusten-debuggaus\">myöhemmin</a> tutustumaan muutamiin muihinkin tapoihin debugata Reactia.</p>\n<p>Kannattaa pitää mielessä, että <strong>React-komponenttien nimien tulee alkaa isolla kirjaimella</strong>. Jos yrität määritellä komponentin seuraavasti:</p>\n<pre><code class=\"language-react\">const footer = () => {\n  return (\n    &#x3C;div>greeting app created by &#x3C;a href=\"https://github.com/mluukkai\">mluukkai&#x3C;/a>&#x3C;/div>\n  )\n}\n</code></pre>\n<p>ja ottaa se käyttöön</p>\n<pre><code class=\"language-react\">const App = () => {\n  return (\n    &#x3C;div>\n      &#x3C;h1>Greetings&#x3C;/h1>\n      &#x3C;Hello name=\"Arto\" age={26 + 10} />\n      &#x3C;footer />\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>sivulle ei kuitenkaan ilmesty näkyviin Footer-komponentissa määriteltyä sisältöä, vaan React luo sivulle ainoastaan tyhjän <em>footer</em>-elementin. Jos muutat komponentin nimen alkamaan isolla kirjaimella, React luo sivulle <em>div</em>-elementin, joka määriteltiin Footer-komponentissa.</p>\n<p>Kannattaa myös pitää mielessä, että React-komponentin sisällön tulee (yleensä) sisältää <strong>yksi juurielementti</strong>. Eli jos yrittäisimme määritellä komponentin <em>App</em> ilman uloimmaista <em>div</em>-elementtiä:</p>\n<pre><code class=\"language-react\">const App = () => {\n  return (\n    &#x3C;h1>Greetings&#x3C;/h1>\n    &#x3C;Hello name=\"Arto\" age={26 + 10} />\n    &#x3C;Footer />\n  )\n}\n</code></pre>\n<p>seurauksena on virheilmoitus:</p>\n<picture><img src=\"/static/b24675fa8665e8f1911c4248081d4650/14be6/3a.png\" srcset=\"/static/b24675fa8665e8f1911c4248081d4650/4cce7/3a.png 200w,\n/static/b24675fa8665e8f1911c4248081d4650/bae5f/3a.png 400w,\n/static/b24675fa8665e8f1911c4248081d4650/14be6/3a.png 800w,\n/static/b24675fa8665e8f1911c4248081d4650/1b35a/3a.png 1200w,\n/static/b24675fa8665e8f1911c4248081d4650/9ee03/3a.png 1600w,\n/static/b24675fa8665e8f1911c4248081d4650/a5108/3a.png 1726w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Juurielementin käyttö ei ole ainoa toimiva vaihtoehto, myös <em>taulukollinen</em> komponentteja on validi tapa:</p>\n<pre><code class=\"language-react\">const App = () => {\n  return (\n    [\n      &#x3C;h1>Greetings&#x3C;/h1>,\n      &#x3C;Hello name=\"Arto\" age={26 + 10} />,\n      &#x3C;Footer />\n    ]\n  )\n}\n</code></pre>\n<p>Määritellessä sovelluksen juurikomponenttia, tämä ei kuitenkaan ole järkevää ja näyttää koodissakin pahalta.</p>\n<p>Juurielementin pakollinen käytöstä on se seuraus, että sovelluksen DOM-puuhun tulee \"ylimääräisiä\" div-elementtejä. Tämä on mahdollista välttää käyttmällä <a href=\"https://reactjs.org/docs/fragments.html#short-syntax\">fragmentteja</a>, eli ympäröimällä komponentin palauttamat elementit tyhjällä elementillä:</p>\n<pre><code class=\"language-react\">const App = () => {\n  const nimi = 'Pekka'\n  const ika = 10\n\n  return (\n    &#x3C;>\n      &#x3C;h1>Greetings&#x3C;/h1>\n      &#x3C;Hello name=\"Arto\" age={26 + 10} />\n      &#x3C;Hello name={nimi} age={ika} />\n      &#x3C;Footer />\n    &#x3C;/>\n  )\n}\n</code></pre>\n<p>Nyt käännös menee läpi ja Reactin generoimaan DOM:iin ei tule ylimääräistä div-elementtiä.</p>\n</div>\n<div class=\"tasks\">\n  <h3>Tehtävä 1.1</h3>\n  <h4>jako komponenteiksi</h4>\n<p>Luo create-react-app:illa uusi sovellus. Muuta <i>index.js</i> muotoon</p>\n<pre><code class=\"language-react\">import React from 'react'\nimport ReactDOM from 'react-dom'\n\nconst App = () => {\n  const kurssi = 'Half Stack -sovelluskehitys'\n  const osa1 = 'Reactin perusteet'\n  const tehtavia1 = 10\n  const osa2 = 'Tiedonvälitys propseilla'\n  const tehtavia2 = 7\n  const osa3 = 'Komponenttien tila'\n  const tehtavia3 = 14\n\n  return (\n    &#x3C;div>\n      &#x3C;h1>{kurssi}&#x3C;/h1>\n      &#x3C;p>{osa1} {tehtavia1}&#x3C;/p>\n      &#x3C;p>{osa2} {tehtavia2}&#x3C;/p>\n      &#x3C;p>{osa3} {tehtavia3}&#x3C;/p>\n      &#x3C;p>yhteensä {tehtavia1 + tehtavia2 + tehtavia3} tehtävää&#x3C;/p>\n    &#x3C;/div>\n  )\n}\n\nReactDOM.render(\n  &#x3C;App />,\n  document.getElementById('root')\n)\n</code></pre>\n<p>ja poista ylimääräiset tiedostot.</p>\n<p>Koko sovellus on nyt ikävästi yhdessä komponentissa. Refaktoroi sovelluksen koodi siten, että se koostuu kolmesta komponentista <i>Otsikko</i>, <i>Sisalto</i> ja <i>Yhteensa</i>. Kaikki data pidetään edelleen komponentissa <i>App</i>, joka välittää tarpeelliset tiedot kullekin komponentille <i>props:ien</i> avulla. <i>Otsikko</i> huolehtii kurssin nimen renderöimisestä, <i>Sisalto</i> osista ja niiden tehtävämääristä ja <i>Yhteensa</i> tehtävien yhteismäärästä.</p>\n<p>Komponentin <i>App</i> runko tulee olemaan suunnilleen seuraavanlainen:</p>\n<pre><code class=\"language-react\">const App = () => {\n  // const-määrittelyt\n\n  return (\n    &#x3C;div>\n      &#x3C;Otsikko kurssi={kurssi} />\n      &#x3C;Sisalto ... />\n      &#x3C;Yhteensa ... />\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<h3 class=\"spacing\">Tehtävät 1.2</h3>\n<h4>lisää komponentteja</h4>\n<p>Refaktoroi vielä komponentti <i>Sisalto</i> siten, että se ei itse renderöi yhdenkään osan nimeä eikä sen tehtävälukumäärää vaan ainoastaan kolme <i>Osa</i>-nimistä komponenttia, joista kukin siis renderöi yhden osan nimen ja tehtävämäärän.</p>\n<pre><code class=\"language-react\">const Sisalto = ... {\n  return (\n    &#x3C;div>\n      &#x3C;Osa .../>\n      &#x3C;Osa .../>\n      &#x3C;Osa .../>\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>Sovelluksemme tiedonvälitys on tällä hetkellä todella alkukantaista, sillä se perustuu yksittäisiin muuttujiin. Tilanne paranee pian.</p>\n</div>","frontmatter":{"title":"osa 1","subTitle":"React","path":"/osa1/reactin_alkeet","mainImage":{"publicURL":"/static/osa1-b7ac07cbe6df8ed745701fabe73af8ef.png"},"partColor":"green","part":1,"letter":"a"}}},"pageContext":{}}