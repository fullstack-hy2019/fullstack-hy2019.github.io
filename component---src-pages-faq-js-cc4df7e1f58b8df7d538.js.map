{"version":3,"sources":["webpack:///./src/pages/faq.js","webpack:///./src/components/Footer/Footer.js","webpack:///./src/components/seo.js"],"names":["__webpack_require__","r","__webpack_exports__","gatsby__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","n","_components_Element_Element__WEBPACK_IMPORTED_MODULE_2__","_components_Footer_Footer__WEBPACK_IMPORTED_MODULE_3__","_components_layout__WEBPACK_IMPORTED_MODULE_4__","_components_seo__WEBPACK_IMPORTED_MODULE_5__","FAQ","a","createElement","title","className","to","gatsby__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","_images_hgin_yliopisto_png__WEBPACK_IMPORTED_MODULE_3__","_images_hgin_yliopisto_png__WEBPACK_IMPORTED_MODULE_3___default","_images_houston_logo_png__WEBPACK_IMPORTED_MODULE_4__","_images_houston_logo_png__WEBPACK_IMPORTED_MODULE_4___default","_Element_Element__WEBPACK_IMPORTED_MODULE_5__","_Image_Image__WEBPACK_IMPORTED_MODULE_6__","_Navigation_Navigation__WEBPACK_IMPORTED_MODULE_7__","images","src","yliopisto","alt","href","houston","Footer","id","flex","spaceBetween","map","image","key","contain","navigation","item","path","style","marginLeft","text","SEO","_ref","description","lang","meta","keywords","react__WEBPACK_IMPORTED_MODULE_3___default","query","detailsQuery","render","data","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_4___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,KAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAAM,EAAAF,GAAAG,EAAAP,EAAA,KAAAQ,EAAAR,EAAA,KAAAS,EAAAT,EAAA,KAAAU,EAAAV,EAAA,KAsBeW,UAdH,kBACVN,EAAAO,EAAAC,cAACJ,EAAA,EAAD,KACEJ,EAAAO,EAAAC,cAACH,EAAA,EAAD,CAAKI,MAAM,QAEXT,EAAAO,EAAAC,cAACN,EAAA,EAAD,CAASQ,UAAU,2CACjBV,EAAAO,EAAAC,cAAA,kCAEAR,EAAAO,EAAAC,cAACV,EAAA,KAAD,CAAMa,GAAG,KAAT,4BAGFX,EAAAO,EAAAC,cAACL,EAAA,EAAD,0CClBJR,EAAA,SAAAiB,EAAAjB,EAAA,KAAAkB,EAAAlB,EAAA,GAAAmB,EAAAnB,EAAAM,EAAAY,GAAAE,EAAApB,EAAA,KAAAqB,EAAArB,EAAAM,EAAAc,GAAAE,EAAAtB,EAAA,KAAAuB,EAAAvB,EAAAM,EAAAgB,GAAAE,EAAAxB,EAAA,KAAAyB,EAAAzB,EAAA,KAAA0B,EAAA1B,EAAA,KAWM2B,EAAS,CACb,CACEC,IAAKC,IACLC,IAAK,4BACLC,KAAM,4BAER,CACEH,IAAKI,IACLF,IAAK,oBACLC,KAAM,iCAwCKE,IApCA,kBACbd,EAAAP,EAAAC,cAACW,EAAA,EAAD,CAASU,GAAG,SAASnB,UAAU,2BAA2BoB,MAAI,GAC5DhB,EAAAP,EAAAC,cAACW,EAAA,EAAD,CACET,UAAU,qDACVoB,MAAI,EACJC,cAAY,GAEXT,EAAOU,IAAI,SAAAC,GAAK,OACfnB,EAAAP,EAAAC,cAAA,KACE0B,IAAKD,EAAMR,IACXC,KAAMO,EAAMP,KACZhB,UAAU,uCAEVI,EAAAP,EAAAC,cAACY,EAAA,EAAD,CAAOe,SAAO,EAACZ,IAAKU,EAAMV,IAAKE,IAAKQ,EAAMR,IAAKf,UAAU,cAK/DI,EAAAP,EAAAC,cAACW,EAAA,EAAD,CACEW,MAAI,EACJpB,UAAU,0DAET0B,IAAWJ,IAAI,SAAAK,GAAI,OAClBvB,EAAAP,EAAAC,cAACI,EAAA,KAAD,CACEsB,IAAKG,EAAKC,KACV3B,GAAI0B,EAAKC,KACT5B,UAAU,wDACV6B,MAAO,CAAEC,WAAY,WAEpBH,EAAKI,2IChDhB,SAASC,EAATC,GAA2D,IAA5CC,EAA4CD,EAA5CC,YAAaC,EAA+BF,EAA/BE,KAAMC,EAAyBH,EAAzBG,KAAMC,EAAmBJ,EAAnBI,SAAUtC,EAASkC,EAATlC,MAChD,OACEuC,EAAAzC,EAAAC,cAACI,EAAA,YAAD,CACEqC,MAAOC,EACPC,OAAQ,SAAAC,GACN,IAAMC,EACJT,GAAeQ,EAAKE,KAAKC,aAAaX,YACxC,OACEI,EAAAzC,EAAAC,cAACgD,EAAAjD,EAAD,CACEkD,eAAgB,CACdZ,QAEFpC,MAAOA,EACPiD,cAAa,QAAUN,EAAKE,KAAKC,aAAa9C,MAC9CqC,KAAM,CACJ,CACEa,KAAM,cACNC,QAASP,GAEX,CACEQ,SAAU,WACVD,QAASnD,GAEX,CACEoD,SAAU,iBACVD,QAASP,GAEX,CACEQ,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASR,EAAKE,KAAKC,aAAaO,QAElC,CACEH,KAAM,gBACNC,QAASnD,GAEX,CACEkD,KAAM,sBACNC,QAASP,IAGVU,OACChB,EAASiB,OAAS,EACd,CACEL,KAAM,WACNC,QAASb,EAASkB,KAAK,OAEzB,IAELF,OAAOjB,MAtDlBM,KAAAc,IA8DJxB,EAAIyB,aAAe,CACjBtB,KAAM,KACNC,KAAM,GACNC,SAAU,IAGZL,EAAI0B,UAAY,CACdxB,YAAayB,IAAUC,OACvBzB,KAAMwB,IAAUC,OAChBxB,KAAMuB,IAAUE,MAChBxB,SAAUsB,IAAUG,QAAQH,IAAUC,QACtC7D,MAAO4D,IAAUC,OAAOG,YAGX/B,MAEf,IAAMQ,EAAY","file":"component---src-pages-faq-js-cc4df7e1f58b8df7d538.js","sourcesContent":["import { Link } from 'gatsby';\nimport React from 'react';\n\nimport Element from '../components/Element/Element';\nimport Footer from '../components/Footer/Footer';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\n\nconst FAQ = () => (\n  <Layout>\n    <SEO title=\"FAQ\" />\n\n    <Element className=\"container spacing--large spacing--after\">\n      <h1>Hi from the FAQ page</h1>\n\n      <Link to=\"/\">Go back to the homepage</Link>\n    </Element>\n\n    <Footer />\n  </Layout>\n);\n\nexport default FAQ;\n","import './Footer.scss';\n\nimport { Link } from 'gatsby';\nimport React from 'react';\n\nimport yliopisto from '../../images/hgin_yliopisto.png';\nimport houston from '../../images/houston_logo.png';\nimport Element from '../Element/Element';\nimport { Image } from '../Image/Image';\nimport { navigation } from '../Navigation/Navigation';\n\nconst images = [\n  {\n    src: yliopisto,\n    alt: 'Helsingin yliopiston logo',\n    href: 'https://www.helsinki.fi/',\n  },\n  {\n    src: houston,\n    alt: 'Houston inc. logo',\n    href: 'https://www.houston-inc.com/',\n  },\n];\n\nconst Footer = () => (\n  <Element id=\"footer\" className=\"container spacing--after\" flex>\n    <Element\n      className=\"col-5 col-10--mobile order-2--mobile footer__links\"\n      flex\n      spaceBetween\n    >\n      {images.map(image => (\n        <a\n          key={image.alt}\n          href={image.href}\n          className=\"col-5 col-4--mobile spacing--mobile\"\n        >\n          <Image contain src={image.src} alt={image.alt} className=\"col-6\" />\n        </a>\n      ))}\n    </Element>\n\n    <Element\n      flex\n      className=\"col-5 col-5--mobile order-1--mobile footer__navigation\"\n    >\n      {navigation.map(item => (\n        <Link\n          key={item.path}\n          to={item.path}\n          className=\"footer__navigation-link nav-item-hover col-10--mobile\"\n          style={{ marginLeft: '4.5rem' }}\n        >\n          {item.text}\n        </Link>\n      ))}\n    </Element>\n  </Element>\n);\n\nexport default Footer;\n","import { StaticQuery, graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from 'react-helmet';\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description;\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: 'description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:title',\n                content: title,\n              },\n              {\n                property: 'og:description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:type',\n                content: 'website',\n              },\n              {\n                name: 'twitter:card',\n                content: 'summary',\n              },\n              {\n                name: 'twitter:creator',\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: 'twitter:title',\n                content: title,\n              },\n              {\n                name: 'twitter:description',\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: 'keywords',\n                      content: keywords.join(', '),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        );\n      }}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  keywords: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}